#!/usr/bin/perl -w

#
#     FILE: msg.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Alumni Directory update redirector
#      $Id: msg,v 7.5 2013/08/04 15:52:27 mradwin Exp $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
    if ($0 =~ m,(.*[/\\]),) {
	unshift @INC, $1;
    } else {
	unshift @INC, '.';
    }
}

use strict;
use Digest::MD5  qw(md5_hex);
use Email::Valid;
use CGI qw(-no_xhtml);
use CGI::Carp qw(fatalsToBrowser);
use aid_util;
use DBI ();
use LWP::UserAgent;
use JSON::PP qw();

my %in;
my($q) = new CGI;
foreach my $key ($q->param())
{
    my($val) = $q->param($key);
    $val = '' unless defined $val;
    $in{$key} = $val;
}

my $xtra_head = "<script src='https://www.google.com/recaptcha/api.js'></script>\n";

if (defined($in{'to'}) && $in{'to'} =~ /^\d+$/)
{
    my $id = $in{'to'};

    my $dbh = aid_util::db_connect(); 
    my $DB = aid_util::load_records($dbh, "AND a.alumnus_id = $id");
    $dbh->disconnect;

    my @recs = values %{$DB};
    bail() unless @recs;

    my $recp = $recs[0];

    print "Content-Type: text/html\015\012\015\012";

    print aid_util::common_html_hdr(9, 'Send Message', 1,
        undef, undef, $xtra_head);

    print aid_util::email_form_html($recp,
				    "",
				    aid_util::config('short_school') . " Alumni",
				    "");

    print aid_util::common_html_ftr(9);
    exit(0);
}
elsif (defined($in{'id'}) && $in{'id'} =~ /^\d+$/ && $in{'hash'} &&
       defined($in{'from'}) && defined($in{'subject'}) &&
       defined($in{'message'}))
{
    my $id = $in{'id'};

    my $dbh = aid_util::db_connect();
    my $DB = aid_util::load_records($dbh, "AND a.alumnus_id = $id");
    #$dbh->disconnect;

    my @recs = values %{$DB};
    bail() unless @recs;

    my $recp = $recs[0];
    my $hash = md5_hex($recp->{'e'});
    bail() unless ($hash eq $in{'hash'});

    my $from = $in{'from'};
    check_blank($recp,"e-mail address",$from);

    my $subject = $in{'subject'};
    check_blank($recp,"subject",$subject);

    $subject =~ s/[\015\012]/ /g;
    $subject = substr($subject, 0, 80);

    my $message = $in{'message'};
    $message =~ s/\r\n/\n/g;
    check_blank($recp,"message body",$message);

    chomp($from);
    if ($from =~ /^[^<]*<([^>]+)>/) {
	$from = $1;
    }

    if (Email::Valid->address($from)) {
	$from = Email::Valid->address($from);
    } else {
	print "Content-Type: text/html\015\012\015\012";
        print aid_util::common_html_hdr(9, 'Invalid Email Address', 1,
            undef, undef, $xtra_head);

	my $h = aid_util::html_entify_str($from);
	
	print <<_EOHTML_;
<div class="alert alert-danger">
<strong>Sorry</strong>, your e-mail address
<strong>$h</strong> appears to be invalid.
<br>It must be in the form of <code>user\@example.com</code>.
</div>
_EOHTML_

	print aid_util::email_form_html($recp, $from, $subject, $message);

	print aid_util::common_html_ftr(9);
	exit(0);
    }

    my $key = POSIX::strftime("%Y%m%d.", gmtime(time())) . $ENV{'REMOTE_ADDR'};
    my $qkey = $dbh->quote($key);
    my $sql = "SELECT limit_count FROM aid_limit "
	. "WHERE limit_name = $qkey";
    my $sth = $dbh->prepare($sql);
    $sth->execute
	or aid_util::cgi_die("Database Error", $dbh->errstr);
    my($count) = $sth->fetchrow_array;

    # hack for Greg McCarthy
    if (lc($from) eq 'lovenandlight@aol.com' && $id eq "3282") {
	$count = 999;
    }

    my $maxcount = 20;
    if (defined $count && $count >= $maxcount) {
	print "Content-Type: text/html\015\012\015\012";
	print aid_util::common_html_hdr(9, 'Too many messages today', 1,
            undef, undef, $xtra_head);

        my $school = aid_util::config('short_school');
	my $admin = aid_util::config('admin_email');

	print <<_EOHTML_;
<div class="alert alert-danger">
<p>Sorry, you have sent too many messages today.
<br>In order to prevent abuse, you may only email up to
$maxcount messages a day via this form. If you are really a member of the
$school alumni community and think you are getting this message in
error, please contact <a
href="mailto:$admin">$admin</a></p>
</div>
_EOHTML_

	print aid_util::email_form_html($recp, $from, $subject, $message);

	print aid_util::common_html_ftr(9);
	exit(0);
    }

    my $private_key = aid_util::config('captcha_private_key');
    my $ua = LWP::UserAgent->new;
    $ua->timeout(10);
    my $url = 'https://www.google.com/recaptcha/api/siteverify';
    my $captcha_response = $in{'g-recaptcha-response'};
    my %form = (
        'secret' => $private_key,
        'response' => $captcha_response,
        'remoteip' => $ENV{'REMOTE_ADDR'},
        );
    my $response = $ua->post($url, \%form);
    my $is_valid = 0;
    if ($response->is_success) {
        my $json = eval {JSON::PP::decode_json($response->content)};
        if ($json) {
            $is_valid = $json->{success};
        }
    }
    if (! $is_valid) {
	print "Content-Type: text/html\015\012\015\012";
        print aid_util::common_html_hdr(9, 'Invalid reCAPTCHA response', 1,
            undef, undef, $xtra_head);

        my $school = aid_util::config('short_school');
	my $admin = aid_util::config('admin_email');

	print <<_EOHTML_;
<div class="alert alert-danger">
<p><strong>Sorry,</strong> the anti-robot reCAPTCHA text at the bottom
of the form did not work.</p>
<p>Your message was not sent. Please try again.</p>
</div>
_EOHTML_

	print aid_util::email_form_html($recp, $from, $subject, $message);

	print aid_util::common_html_ftr(9);
	exit(0);
    }

    # message not spam and not over limit
    $count = $count ? $count + 1 : 1;
    $sql = "REPLACE INTO aid_limit (limit_name,limit_count)"
	. " VALUES ($qkey,$count)";
    $dbh->do($sql)
	or aid_util::cgi_die("Database Error", $dbh->errstr);

    warn "aid_msg: $qkey, $count, from=$from, to=$recp->{'e'}, to_id=$recp->{'id'}\n";

    my $name = email_name($recp);
    my $school = aid_util::config('short_school');

    my $disclaimer =
"#####################################################################
  Sent via $school Web Form from IP address $ENV{'REMOTE_ADDR'}

  Please read our email advisory page before replying to this message:
  http://" . aid_util::config('master_srv') . aid_util::config('master_path')
      . "etc/email.html

  Please report abuse to " . aid_util::config('admin_email') . "
#####################################################################

";

    my $status = 0;
    for (my $i = 0; $status == 0 && $i < 3; $i++) {
	$status = aid_util::sendmail_v2(
	 aid_util::config('devnull_email'),
	 "\"$from via $school Web Form\"",
	 $subject,
	 "Reply-To: $from\nX-Originating-IP: $ENV{'REMOTE_ADDR'}",
	 $disclaimer . $message,
	 $name,
	 $recp->{'e'});
    }

    if ($status == 0) {
        aid_util::cgi_die('ERROR: Unable to send e-mail',
		 "We're sorry, we were unable to send e-mail to\n" .
		 "<strong>" . aid_util::protect_email($recp->{'e'}) . "</strong>.\n" .
		 "<p>This may be a problem with our\n" .
		 "server or perhaps with the target e-mail address.\n" .
		 "Please try again in a few minutes.<p>If you continue\n" .
		 "to get this error, please send e-mail to <a\n" .
		 "href=\"mailto:" . aid_util::config('admin_email') .
		 "\">" . aid_util::config('admin_email') . "</a>\n");
    }

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(9, 'Message Sent', 1,
        undef, undef, $xtra_head);
    print <<_EOHTML_;
<div class="alert alert-success">
<p><strong>Success!</strong></p>
<p>Your message has been sent.</p>
</div>
_EOHTML_
    print aid_util::common_html_ftr(9);
    exit(0);
}
else
{
    bail();
}

sub email_name
{
    my($recp) = @_;
    my $name = $recp->{'gn'};
    $name .= " $recp->{'mi'}."
	if defined $recp->{'mi'} && $recp->{'mi'} ne '';
    $name .= " $recp->{'sn'}";
    $name .= " $recp->{'mn'}"
	if defined $recp->{'mn'} && $recp->{'mn'} ne '';
    $name =~ s/\"/\'/g;

    $name;
}

sub check_blank
{
    my($recp,$title,$val) = @_;

    unless (defined $val && $val !~ /^\s*$/) {
	print "Content-Type: text/html\015\012\015\012";
        print aid_util::common_html_hdr(9, "Missing $title", 1,
            undef, undef, $xtra_head);

	print <<_EOHTML_;
<div class="alert alert-danger">
<p>Missing <strong>$title</strong> (can\'t be blank).</p>
<p>Please include your $title in the text area below.</p>
</div>
_EOHTML_

	print aid_util::email_form_html($recp, $in{'from'}, $in{'subject'}, $in{'message'});

	print aid_util::common_html_ftr(9);
	exit(0);
    }
}

sub bail
{
    my($err) = @_;

    print "Status: 400 Bad Request\015\012";
    aid_util::cgi_die('Bad Request',
		 "Sorry, looks like the form submission was broken.\n" .
		 ($err ? "<br><strong>$err</strong>" : ""));
    close(STDOUT);
    exit(0);
}
