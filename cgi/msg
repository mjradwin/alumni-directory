#!/usr/local/bin/perl -w

#
#     FILE: msg.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Alumni Internet Directory update redirector
#      $Id: msg,v 6.8 2003/09/12 17:39:30 mradwin Exp mradwin $
#
#   Copyright (c) 2003  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use FindBin;
use lib $FindBin::Bin;
use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";

use DB_File::Lock;
use Digest::MD5  qw(md5_hex);
use Email::Valid;
use CGI qw(-no_xhtml);
use CGI::Carp qw(fatalsToBrowser);
use Mail::SpamAssassin;
use aid_util;
use strict;

my %in;
my($q) = new CGI;
foreach my $key ($q->param())
{
    my($val) = $q->param($key);
    $val = '' unless defined $val;
    $in{$key} = $val;
}

my $dbmfile = aid_util::config('dbmfile');
die "$dbmfile: $!\n" unless -r $dbmfile;

my $limit = aid_util::config('limit');
die "$limit: $!\n" unless -w $limit;

if (defined($in{'to'}) && $in{'to'} =~ /^\d+$/)
{
    my $id = $in{'to'};

    my(%DB);
    tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
	or die "$dbmfile: $!\n";
    my $val = $DB{$id};
    untie(%DB);

    bail() unless $val;

    my %rec = aid_util::db_unpack_rec($id,$val);
    my $hash = md5_hex($rec{'e'});
    my $name = email_name(\%rec);
    my $e = "$name &lt;" . aid_util::protect_email($rec{'e'}) . "&gt;";

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(9, 'Send Message', 1);

    form($e,$id,$hash,'',aid_util::config('short_school') . ' Alumni','');

    print aid_util::common_html_ftr(9);
    exit(0);
}
elsif (defined($in{'id'}) && $in{'id'} =~ /^\d+$/ && $in{'hash'} &&
       defined($in{'from'}) && defined($in{'subject'}) &&
       defined($in{'message'}))
{
    my $id = $in{'id'};

    my(%DB);
    tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
	or die "$dbmfile: $!\n";
    my $val = $DB{$id};
    untie(%DB);

    bail() unless $val;

    my %rec = aid_util::db_unpack_rec($id,$val);
    my $hash = md5_hex($rec{'e'});
    bail() unless ($hash eq $in{'hash'});

    my $from = $in{'from'};
    check_blank(\%rec,"e-mail address",$from,$id,$hash);

    my $subject = $in{'subject'};
    check_blank(\%rec,"subject",$subject,$id,$hash);

    $subject =~ s/[\015\012]/ /g;
    $subject = substr($subject, 0, 80);

    my $message = $in{'message'};
    check_blank(\%rec,"message body",$message,$id,$hash);

    chomp($from);
    if ($from =~ /^[^<]*<([^>]+)>/) {
	$from = $1;
    }

    if (Email::Valid->address($from)) {
	$from = Email::Valid->address($from);
    } else {
	print "Content-Type: text/html\015\012\015\012";
	print aid_util::common_html_hdr(9, 'Invalid Email Address', 1);

	my $h = aid_util::html_entify_str($from);
	
	print <<_EOHTML_;
<p><font color=\"red\">Your e-mail address
<b>$h</b> appears to be invalid.</font>
<br>It must be in the form of <code>user\@example.com</code>.
_EOHTML_

	my $name = email_name(\%rec);
	my $e = "$name &lt;" . aid_util::protect_email($rec{'e'}) . "&gt;";
	form($e,$id,$hash,$from,$subject,$message);

	print aid_util::common_html_ftr(9);
	exit(0);
    }

    my $spam_headers = "From: $from\nSubject: $subject\nTo: " . $rec{'e'} ."\nDate: " .
      POSIX::strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime(time())) . "\n\n";

    my $spam_test = Mail::SpamAssassin->new({
	'local_tests_only' => 1,
	'rules_filename' => '/pub/m/r/mradwin/private/share/spamassassin',
    });

    # avoid waring "Failed to create default user preference file
    #               /var/www/.spamassassin/user_prefs"
    $spam_test->compile_now(0);

    my $spam_status = $spam_test->check_message_text($spam_headers . $message);
    if ($spam_status->is_spam()) {
	print "Content-Type: text/html\015\012\015\012";
	print aid_util::common_html_hdr(9, 'Your message looks like SPAM', 1);

        my $school = aid_util::config('short_school');
	my $admin = aid_util::config('admin_email');

	print <<_EOHTML_;
<p><font color=\"red\">Sorry, this message appears to be unsolicited
commercial email (a.k.a. <a
href=\"http://spam.abuse.net/overview/\">Spam</a>).</font>
<br>If you are really a member of the $school alumni community and
think you are getting this message in error, please contact <a
href="mailto:$admin">$admin</a></p>
_EOHTML_

	my $name = email_name(\%rec);
	my $e = "$name &lt;" . aid_util::protect_email($rec{'e'}) . "&gt;";
	form($e,$id,$hash,$from,$subject,$message);

	print aid_util::common_html_ftr(9);
	exit(0);
    }

    my(%LIMIT);
    tie(%LIMIT, 'DB_File::Lock', $limit, O_RDWR, 0644, $DB_HASH, 'write')
	or die "$limit: $!\n";
    my $key = POSIX::strftime("%Y%m%d", gmtime(time())) . $ENV{'REMOTE_ADDR'};
    if (defined $LIMIT{$key} && $LIMIT{$key} >= 4) {
	untie(%LIMIT);

	print "Content-Type: text/html\015\012\015\012";
	print aid_util::common_html_hdr(9, 'Too many messages today', 1);

        my $school = aid_util::config('short_school');
	my $admin = aid_util::config('admin_email');

	print <<_EOHTML_;
<p><font color=\"red\">Sorry, you have sent too many messages today.</font>
<br>In order to prevent abuse, you may only email up to
4 messages a day via this form. If you are really a member of the
$school alumni community and think you are getting this message in
error, please contact <a
href="mailto:$admin">$admin</a></p>
_EOHTML_

	my $name = email_name(\%rec);
	my $e = "$name &lt;" . aid_util::protect_email($rec{'e'}) . "&gt;";
	form($e,$id,$hash,$from,$subject,$message);

	print aid_util::common_html_ftr(9);
	exit(0);
    }

    if (defined $LIMIT{$key}) {
	$LIMIT{$key}++;
    } else {
	$LIMIT{$key} = 1;
    }
    untie(%LIMIT);

    my $name = email_name(\%rec);
    my $school = aid_util::config('short_school');

    $message .= "

----
Sent via $school Web Form from IP address $ENV{'REMOTE_ADDR'}
Please report abuse to " . aid_util::config('admin_email') . "\n";

#    $message .= "\n" . $spam_status->get_report();

    my $status = 0;
    for (my $i = 0; $status == 0 && $i < 3; $i++) {
	$status = aid_util::sendmail_v2(
	 aid_util::config('devnull_email'),
	 "\"$from via $school Web Form\"",
	 $subject,
	 "Reply-To: $from\nX-Originating-IP: $ENV{'REMOTE_ADDR'}",
	 $message,
	 $name,
	 $rec{'e'});
    }

    aid_util::cgi_die('ERROR: Unable to send e-mail',
		 "We're sorry, we were unable to send e-mail to\n" .
		 "<b>" . aid_util::protect_email($rec{'e'}) . "</b>.\n" .
		 "<p>This may be a problem with our\n" .
		 "server or perhaps with the target e-mail address.\n" .
		 "Please try again in a few minutes.<p>If you continue\n" .
		 "to get this error, please send e-mail to <a\n" .
		 "href=\"mailto:" . aid_util::config('admin_email') .
		 "\">" . aid_util::config('admin_email') . "</a>\n")
	if $status == 0;

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(9, 'Message Sent', 1);
    print <<_EOHTML_;
<p>Your message has been sent.</p>
_EOHTML_
    print aid_util::common_html_ftr(9);
    exit(0);
}
else
{
    bail();
}

sub email_name
{
    my($recp) = @_;
    my $name = $recp->{'gn'};
    $name .= " $recp->{'mi'}."
	if defined $recp->{'mi'} && $recp->{'mi'} ne '';
    $name .= " $recp->{'sn'}";
    $name .= " $recp->{'mn'}"
	if defined $recp->{'mn'} && $recp->{'mn'} ne '';
    $name =~ s/\"/\'/g;

    $name;
}

sub check_blank
{
    my($recp,$title,$val,$id,$hash) = @_;

    my $name = email_name($recp);
    my $e = "$name &lt;" . aid_util::protect_email($recp->{'e'}) . "&gt;";
    my $from = $in{'from'};
    my $subject = $in{'subject'};
    my $message = $in{'message'};

    unless (defined $val && $val !~ /^\s*$/) {
	print "Content-Type: text/html\015\012\015\012";
	print aid_util::common_html_hdr(9, "Missing $title", 1);

	print <<_EOHTML_;
<p><font color=\"red\">Missing $title (can't be blank).  Please
include your $title in the text area below.</font>
_EOHTML_

	form($e,$id,$hash,$from,$subject,$message);

	print aid_util::common_html_ftr(9);
	exit(0);
    }
}

sub form
{
    my($e,$id,$hash,$from,$subject,$message) = @_;
    my $action = aid_util::config('message_cgi');
    my $t = POSIX::strftime("%a, %d %b %Y %H:%M:%S", localtime(time()));

    $from = aid_util::html_entify_str($from);
    $subject = aid_util::html_entify_str($subject);

    # don't use aid_util::html_entify_str() on msg so we can preserve \n
    $message =~ s/&/&amp;/g;
    $message =~ s/</&lt;/g;
    $message =~ s/>/&gt;/g;

    print <<_EOHTML_;
<form method="post" action="$action/post">
<input type="hidden" name="id" value="$id">
<input type="hidden" name="hash" value="$hash">
<table border="0" cellspacing="1" cellpadding="2" >
<tr><td align="right"><b>To:</b></td>
<td>$e</td></tr>
<tr><td align="right"><b>From:</b></td>
<td><input type="text" name="from" size="60" 
maxlength="128" value="$from"></td></tr>
<tr><td align="right"><b>Date:</b></td>
<td>$t</td></tr>
<tr><td align="right"><b>Subject:</b></td>
<td><input type="text" name="subject" size="60" 
maxlength="80" value="$subject"></td></tr>
</table>
<textarea name="message" rows="20" cols="70"
wrap="hard">$message</textarea>
<br><input type="submit" name="send" value="Send">
</form>
_EOHTML_
}

sub bail
{
    my($err) = @_;

    print "Status: 400 Bad Request\015\012";
    aid_util::cgi_die('Bad Request',
		 "Sorry, looks like the form submission was broken.\n" .
		 ($err ? "<br><b>$err</b>" : ""));
    close(STDOUT);
    exit(0);
}
