#!/usr/local/bin/perl -w

#
#     FILE: verify.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: CGI for verifcation of e-mail address
#      $Id: verify,v 7.4 2006/03/14 20:50:08 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
    if ($0 =~ m,(.*[/\\]),) {
	unshift @INC, $1;
    } else {
	unshift @INC, ".";
    }
}

use strict;
use CGI qw(-no_xhtml);
use CGI::Carp qw(fatalsToBrowser);
use aid_util;
use DBI ();

my %cgi;
my $q = new CGI;
my $key;
if ($q->param("k")) {
    $key = $q->param("k");
} elsif ($q->keywords()) {
    my @kw = $q->keywords();
    $key = $kw[0];
} else {
    print "Status: 400 Bad Request\015\012";
    aid_util::cgi_die("Bad Request",
		      "Sorry, looks like the form submission was broken.\n");
    close(STDOUT);
    exit(0);
}

if ($key !~ /^[0-9a-f]+$/) {
    invalid($key);
}

my $dbh = aid_util::db_connect();
my $sql = qq{
SELECT
verify_staging_id,verify_alumnus_id,
UNIX_TIMESTAMP(verify_created),verify_confirmed
FROM aid_verify
WHERE verify_code = ?
};
my $sth = $dbh->prepare($sql);
$sth->execute($key)
    or aid_util::cgi_die("Database Error", $sth->errstr);
my($sid,$id,$tscreated,$tsconfirmed) = $sth->fetchrow_array;

if (defined $tsconfirmed) {
    $dbh->disconnect;

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,"Verifcation already confirmed",1);

    print "<p>The verification code you entered\n",
    "(<b>$key</b>) has already been processed.</p>\n";

    print aid_util::common_html_ftr(20);
    close(STDOUT);
    exit(0);
}

if (defined $sid) {
    my $recp = get_staging_rec($dbh,$sid);
    if (!$recp) {
	$dbh->disconnect;
	print "Status: 500 Server Error\015\012";
	aid_util::cgi_die("Server Error",
			  "Sorry, looks like the DB is broken.\n");
	close(STDOUT);
	exit(0);
    }

    if ($q->param("commit"))
    {
	if (defined $id)
	{
	    $sql = "UPDATE aid_alumnus SET alumnus_old_id = alumnus_entry_id"
		. " WHERE alumnus_id = $id";
	    $dbh->do($sql)
		or aid_util::cgi_die("Database Error", $dbh->errstr);

	    $sql = "UPDATE aid_alumnus SET alumnus_entry_id = $sid"
		. ",alumnus_status=1"
		. " WHERE alumnus_id = $id";
	    $dbh->do($sql)
		or aid_util::cgi_die("Database Error", $dbh->errstr);

	    $sql = "UPDATE aid_verify SET verify_confirmed = NOW()"
		. " WHERE verify_code = ?";
	    my $sth = $dbh->prepare($sql);
	    $sth->execute($key)
		or aid_util::cgi_die("Database Error", $sth->errstr);
	}
	else
	{
	    my $sql = "INSERT INTO aid_alumnus (alumnus_status,"
		. "alumnus_entry_id,alumnus_create,alumnus_update)"
		. " VALUES (1,$sid,FROM_UNIXTIME($tscreated),NOW())";
	    $dbh->do($sql)
		or aid_util::cgi_die("Database Error", $dbh->errstr);
	    $id = $dbh->last_insert_id(undef, undef, undef, undef);

	    $sql = "UPDATE aid_verify SET verify_confirmed = NOW(),"
		. "verify_alumnus_id = ?"
		. " WHERE verify_code = ?";
	    my $sth = $dbh->prepare($sql);
	    $sth->execute($id,$key)
		or aid_util::cgi_die("Database Error", $sth->errstr);
	}

	$dbh->disconnect;

	my $fullname = aid_util::html_entify_str(aid_util::inorder_fullname($recp));

	print "Content-Type: text/html\015\012\015\012";
	print aid_util::common_html_hdr(20,'E-mail address verified',1);

	print "
<p>The listing for <strong>$fullname</strong> has been
accepted into the submission queue, and it will be processed
within 5 minutes. E-mail will be sent to
<b>$recp->{'e'}</b>
confirming receipt of this submission when it it processed.</p>
";
	print aid_util::config('html_ad');
	print aid_util::common_html_ftr(20);

	close(STDOUT);
	exit(0);
    }

    my $oldrecp;
    if (defined $id) {
	my $MDB = aid_util::load_records($dbh, "AND a.alumnus_id = $id");
	my @oldrecs = values %{$MDB};
	if (@oldrecs) {
	    $oldrecp = $oldrecs[0];
	}
    }

    my $title = $oldrecp
	? "Confirm change to your listing"
	: "Publish your listing";

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,$title,1);

    my $action =  aid_util::config("verify_cgi");
    print qq{
<p>Here is what your listing will look like. If you approve,
click the button below.</p>
<form method="post" name="f1" id="f1" action="$action">
<input type="hidden" name="k" value="$key">
<input type="hidden" name="commit" value="1">
<input type="submit" name="sub1" id="sub1" value="$title">
</form>
<br>
<table border="1" cellpadding="6">
};

    if ($oldrecp) {
	print qq{<tr><th><big>Old Entry</big></th><th><big>New Entry</big></th></tr>},
	qq{<tr valign="top"><td>},
	aid_util::verbose_entry($oldrecp,1,1,1),
	qq{</td><td>}, aid_util::verbose_entry($recp,1,1,1),
	qq{</td></tr>\n};
    } else {
	print qq{<tr><td>}, aid_util::verbose_entry($recp,1,1,1),
	qq{</td></tr>\n};
    }

    print qq{</table><p>\n};

    print aid_util::common_html_ftr(20);

    close(STDOUT);
    exit(0);

} else {
    $dbh->disconnect;

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,"Verifcation code not found",1);

    print "<p>Sorry, the verification code you entered\n",
    "(<b>$key</b>) wasn't found in our database.</p>\n";

    print aid_util::common_html_ftr(20);
    close(STDOUT);
    exit(0);
}

sub invalid {
    my($key) = @_;

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,"Invalid verifcation code",1);

    $key =~ s/&/&amp;/g;
    $key =~ s/</&lt;/g;
    $key =~ s/>/&gt;/g;

    print "<p>Sorry, the verification code you entered\n",
    "(<b>$key</b>) is invalid.</p>\n";

    print aid_util::common_html_ftr(20);
    close(STDOUT);
    exit(0);
}

sub get_staging_rec
{
    my($dbh,$sid) = @_;

    my $sql = qq{
SELECT
entry_name_surname,entry_name_married,
entry_name_given,entry_name_mi,
entry_email,entry_gradclass,entry_affil_other,
entry_web_page,entry_location,entry_note,entry_reunion
FROM aid_entry
WHERE entry_id = $sid
};

    my $sth = $dbh->prepare($sql);
    $sth->execute
	or aid_util::cgi_die("Database Error", $dbh->errstr);
    my($name_surname,$name_married,
       $name_given,$name_mi,
       $email,$gradclass,$affil_other,
       $web_page,$location,$note_text,$reunion) = $sth->fetchrow_array;

    if (!defined $name_surname) {
	return undef;
    }

    my $yr = $gradclass ? $gradclass : $affil_other;
    my %rec = (
	       "id" => -1,
	       "v" => -1,
	       "sn" => $name_surname,
	       "mn" => $name_married,
	       "gn" => $name_given,
	       "mi" => $name_mi,
	       "q" => 4,
	       "r" => $reunion,
	       "b" => 0,
	       "c" => $tscreated,
	       "u" => time(),
	       "f" => 0,
	       "yr" => $yr,
	       "e" => $email,
	       "w" => $web_page,
	       "l" => $location,
	       "n" => $note_text,
	       );

    foreach my $key (@aid_util::edit_field_names, "n") {
	$rec{$key} = "" unless defined $rec{$key};
    }

    return \%rec;
}
