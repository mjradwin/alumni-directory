#!/usr/bin/perl -w

#
#     FILE: search.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Alumni Directory CGI search
#      $Id: search,v 7.5 2013/08/04 15:52:27 mradwin Exp $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
    if ($0 =~ m,(.*[/\\]),) {
	unshift @INC, $1;
    } else {
	unshift @INC, ".";
    }
}

use strict;
use CGI qw(-no_xhtml);
use CGI::Carp qw(fatalsToBrowser);
use aid_util;
use DBI ();

my %in;
my($q) = new CGI;
foreach my $key ($q->param())
{
    my($val) = $q->param($key);
    $val = "" unless defined $val;
    $in{$key} = $val;
}

my $dbh = aid_util::db_connect();
$dbh || aid_util::cgi_die("Database Failure", $DBI::errstr);

if (!defined($in{"q"}) || $in{"q"} =~ /^[^\w]*$/)
{
    print "Content-Type: text/html\015\012\015\012";

    print aid_util::common_html_hdr(6, "Search", 1);
    print_search_form($dbh, "", defined $in{"y"} ? $in{"y"} : "");
    print aid_util::common_html_ftr(6);

    close(STDOUT);
    $dbh->disconnect;
    exit(0);
}

my $query_save = $in{"q"};
$query_save =~ s/^\s*//;
$query_save =~ s/\s*$//;
my $query = $query_save;
$query =~ s/[^\w]/ /g; # nuke everything but wordchars
$query =~ s/\band\b//ig;
$query =~ s/\bor\b//ig;
my @search_terms = split(/\s+/, $query);
my $qquery = "'+" . join(" +", @search_terms) . "'";
#my $qquery = $dbh->quote($query);

my $sql = qq{
SELECT a.alumnus_id,a.alumnus_status,
e.entry_name_surname,e.entry_name_married,
e.entry_name_given,e.entry_name_mi,
e.entry_gradclass,e.entry_affil_other
FROM aid_alumnus a, aid_entry e
WHERE a.alumnus_entry_id=e.entry_id AND
MATCH (e.entry_name_surname,e.entry_name_married,e.entry_name_given)
AGAINST ($qquery IN BOOLEAN MODE)
};

if (defined $in{"y"} && $in{"y"} eq "other") {
    $sql .= " AND e.entry_affil_other IS NOT NULL";
} elsif (defined $in{"y"} && $in{"y"} =~ /^\d+$/) {
    $sql .= " AND e.entry_gradclass = $in{'y'}";
}

$sql .= " ORDER BY e.entry_gradclass";

my $sth = $dbh->prepare($sql);
$sth->execute
    or aid_util::cgi_die("Database Error", $dbh->errstr);

my @results;
while (my($id,$status,
	  $name_surname,$name_married,$name_given,$name_mi,
	  $gradclass,$affil_other) =  $sth->fetchrow_array)
{
	my $yr = $gradclass ? $gradclass : $affil_other;
	my %rec = (
		   "id" => $id,
		   "v" => $status,
		   "sn" => $name_surname,
		   "mn" => $name_married,
		   "gn" => $name_given,
		   "mi" => $name_mi,
		   "yr" => $yr,
		   );

	foreach my $key (@aid_util::edit_field_names, "n") {
	    $rec{$key} = "" unless defined $rec{$key};
	}

	push(@results, \%rec);
}

my $nresults = scalar(@results);

print "Content-Type: text/html\015\012\015\012";

$query_save = aid_util::html_entify_str($query_save);

if ($nresults == 0)
{
    print aid_util::common_html_hdr(26, "No matches", 1);

    print_search_form($dbh, $query_save, defined $in{"y"} ? $in{"y"} : "");

    print "<p>Sorry, no matches were found containing\n";
    print "<strong>$query_save</strong>";
    print "\nin <strong>Class of $in{'y'}</strong>"
	if defined $in{"y"} && $in{"y"} =~ /^\d+$/;
    print "\nin <strong>Faculty/Staff</strong>"
	if defined $in{"y"} && $in{"y"} eq "other";
    print "\nin <strong>all graduating classes</strong>"
	if ! defined $in{"y"} || $in{"y"} eq "";
    print ".</p>\n\n";

    print "<p>You might try broadening your search.  Try just the first\n";
    print "or last name, or search \"all years\" instead of a particular\n";
    print "graduating class.  Or, just browse the\n";
    print "<a href=\"", aid_util::config("master_path"), "alpha/\">";
    print "Alphabetical</a> or\n";
    print "<a href=\"", aid_util::config("master_path"), "class/\">";
    print "Graduating Class</a>\nlistings.</p>\n\n";

    print "<p>For some other reasons why you might not find who you're\n";
    print "looking for, please see the\n";
    print "<a href=\"", aid_util::config("master_path");
    print "etc/faq.html#incomplete\">Frequently Asked Questions</a>.</p>\n\n";

    print aid_util::common_html_ftr(26);

    close(STDOUT);
    $dbh->disconnect;
    exit(0);
}
else
{
    if ($nresults == 1)
    {
	print aid_util::common_html_hdr(26, "Found 1 match", 1);
    }
    else
    {
	print aid_util::common_html_hdr(26, "Found $nresults matches", 1);
    }

    print_search_form($dbh, $query_save, defined $in{"y"} ? $in{"y"} : "");

    print "\n<ul>\n";
    foreach my $recp (@results)
    {
	my $fullname = aid_util::inorder_fullname($recp);
	my($affil,undef) = aid_util::affiliate($recp,0);
	
	print "<li>";
	if ($in{"upd"})
	{
	    print "<a href=\"", aid_util::config("about_cgi"), 
	    "/", $recp->{"id"}, "\">$fullname</a> $affil";
	}
	else
	{
	    print "<a href=\"", aid_util::about_path($recp), 
	    "\">$fullname</a> $affil";
	}

	if (! $recp->{"v"})
	{
	    print " <em>(e-mail bouncing)</em>";
	}
	print "\n";
    }
    print "</ul>\n";
    print aid_util::common_html_ftr(26);
}

close(STDOUT);
$dbh->disconnect;
exit(0);

sub print_search_form
{
    my($dbh,$q,$y) = @_;

    my @years = aid_util::load_years($dbh);
    push(@years, "other");

    print "\n<p>";
    print "<center>\n",
      "<form method=\"get\" action=\"" . aid_util::config("search_cgi") . "\">\n",
      "<input type=\"text\" name=\"q\" id=\"q\" size=\"25\" value=\"$q\">\n",
      "<select name=\"y\" id=\"y\">\n";
    print "<option";
    print " selected=\"selected\"" if "" eq $y;
    print " value=\"\">all years</option>\n";
    foreach (@years)
    {
	print "<option";
	print " selected=\"selected\"" if $_ eq $y;
	print ">$_" unless $_ eq "other";
	print " value=\"other\">Faculty/Staff" if $_ eq "other";
	print "</option>\n";
    }
    print "</select>\n";
    print "<input type=\"submit\" value=\"Search\">",
      "\n</form>\n</center>\n";

    1;
}
