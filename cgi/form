#!/usr/local/bin/perl -w

#
#     FILE: form.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Alumni Internet Directory CGI form-submission interface
#      $Id: form,v 5.46 2003/08/25 01:22:44 mradwin Exp mradwin $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use FindBin;
use lib $FindBin::Bin;
use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";

use CGI;
use CGI::Carp qw(fatalsToBrowser);
use DB_File::Lock;
use Email::Valid;
use aid_util;
use aid_submit;

# configuration
my $dbmfile = aid_util::config('dbmfile');

$rcsid = '$Id: form,v 5.46 2003/08/25 01:22:44 mradwin Exp mradwin $'; #'fnt

$listing_upd_title = 'Modify Your Directory Listing';
$listing_add_title = 'Join the Directory';
$listing_sub_title = 'Review and Confirm Your Listing';

die "$dbmfile: $!\n" unless -r $dbmfile;

@form_required = ('id', 'gn', 'sn', 'yr', 'e');

CGI::ReadParse();
%cgi = %in;
if (! keys %cgi)
{
    send_upd_real(\%aid_util::blank_entry,'');
    close(STDOUT);
    exit(0);
}

# look for special flags: version, update
#
# if any of these flags is set, we're sending back a dynamic page
# instead of processing a form request.
if (defined($cgi{'version'})) {
    print "Content-Type: text/plain\015\012\015\012$rcsid\015\012";
    print aid_util::config('rcsid'), "\015\012";
    close(STDOUT);
    exit(0);

}
elsif (defined($cgi{'update'}) || defined($cgi{'upd'}))
{
    $key = defined($cgi{'update'}) ? $cgi{'update'} : $cgi{'upd'};

    if ($key =~ /^\d+$/)
    {
	my(%DB);
	tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
	    or die "$dbmfile: $!\n";
	my $val = $DB{$key};
	untie(%DB);

	if (defined $val)
	{
	    my %updateme = aid_util::db_unpack_rec($key,$val);
	    send_upd_real(\%updateme,'');
	}
	else
	{
	    send_upd_real(\%aid_util::blank_entry,'');
	}
    }
    elsif ($key =~ /^\s*[^@]+@[^\.]+\./) 
    {
	$key =~ s/^\s*//;
	$key =~ s/\s*$//;
	$key = "\L$key\E";

	my(%DB);
	tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
	    or die "$dbmfile: $!\n";

	if (defined $DB{$key})
	{
	    $id = unpack("n",$DB{$key});
	    if ($id > 0)
	    {
		my %updateme = aid_util::db_unpack_rec($id,$DB{$id});

		untie(%DB);

		send_upd_real(\%updateme,'');
		close(STDOUT);
		exit(0);
	    }
	}
	send_upd_notfound($key);

	untie(%DB);
    }
    else
    {
	send_upd_notfound($key);
    }

    close(STDOUT);
    exit(0);
}


# no special flags, so this should be a submission-processing request.
# did they access this with the right form?
foreach (@form_required) {
    aid_util::cgi_die('Form Data Missing',
		 "The required form data was not present or something\n" .
		 "is awry. Please <a href=\"" . 
		 aid_util::config('master_path') . "add/\">try again</a>.")
	unless defined($cgi{$_});
}


# okay, we've got the right form.  clean up the input.
foreach $key (keys(%cgi)) {
    $cgi{$key} =~ s/^\s*//;  # get rid of leading and trailing whitespace
    $cgi{$key} =~ s/\s*$//;

    $cgi{$key} = '' if $cgi{$key} =~ m|^n/a$|i;
    $cgi{$key} = '' if $cgi{$key} =~ m|^none$|i;
    $cgi{$key} = '' if $cgi{$key} =~ m|^\(none\)$|i;
    $cgi{$key} = '' if $cgi{$key} =~ m|^\(blank\)$|i;
}

foreach $key (keys(%cgi)) {
    next if $key eq 'n';
    $cgi{$key} =~ s/;/,/g;   # can't handle ; because it's field delim
}

# remove apostropies and add a leading year to gradyear field
$cgi{'yr'} =~ s/^class\s+of\s*//i;
$cgi{'yr'} =~ s/^\'(\d\d)$/$1/;
$cgi{'yr'} = '0' . $cgi{'yr'} if $cgi{'yr'} =~ /^\d$/;

# find the right century for a 2-digit year
if ($cgi{'yr'} =~ /^\d\d$/) {
    # localtime() returns number of years since 1900
    $this_year = (localtime(time))[5] + 1900;

    $fourdigit = substr($this_year,0,2) . $cgi{'yr'};
    $fourdigit = ((substr($this_year,0,2) - 1) . $cgi{'yr'})
	if ($fourdigit > $this_year + 4);

    $cgi{'yr'} = $fourdigit;
}

$cgi{'r'} = (defined $cgi{'r'} && 
	    ($cgi{'r'} eq 'on' || $cgi{'r'} == 1)) ? 1 : 0;

# uncapitalize those overzealous capslock names
$cgi{'gn'} = "\L$cgi{'gn'}\E"
    if ($cgi{'gn'} eq "\U$cgi{'gn'}\E") && $cgi{'gn'} !~ /\./;
$cgi{'sn'} = "\L$cgi{'sn'}\E"
    if ($cgi{'sn'} eq "\U$cgi{'sn'}\E");
$cgi{'mn'} = "\L$cgi{'mn'}\E"
    if ($cgi{'mn'} eq "\U$cgi{'mn'}\E");

# initial capitalize those lazy names
$cgi{'gn'} = "\u$cgi{'gn'}";
$cgi{'sn'} = "\u$cgi{'sn'}"
    unless $cgi{'sn'} =~ /^(van|d[ie]) /;
$cgi{'mn'} = "\u$cgi{'mn'}"
    unless $cgi{'mn'} =~ /^(van|d[ie]) /;

$cgi{'mi'} = "\u$cgi{'mi'}";

$cgi{'w'} = '' if $cgi{'w'} eq 'http://';
$cgi{'w'} = 'http://' . $cgi{'w'}
    if ($cgi{'w'} ne '' && $cgi{'w'} !~ m,^http://,i);

$cgi{'sn'} =~ s/^$cgi{'gn'}\s+//i;
$cgi{'mn'} =~ s/^$cgi{'gn'}\s+//i;
     
$cgi{'mn'} = '' if defined $cgi{'mn'} &&
    ($cgi{'mn'} =~ /\(?\s*same\s+as\s+last\s+name\s*\)?/i ||
     $cgi{'mn'} =~ /\(?\s*same\s*\)?/i ||
     $cgi{'mn'} eq $cgi{'sn'});

# did they have non-empty entries for all the required fields?
$empty_fields = '';
foreach (@form_required) 
{
    $empty_fields .= $_ . "\t"
	if ($cgi{$_} =~ /^\s*$/);
}

# lowercase the hostname portion of the email address
$mangled_e = $cgi{'e'};
$mangled_e =~ s/\s//g;
if (&is_email_okay($mangled_e))
{
    ($mail_user,$mail_addr) = split(/\@/, $mangled_e);
	
    # test for initial-cap, rest lower user
    $lower_user = "\L$mail_user\E";
    $mail_user = $lower_user if $mail_user eq "\u$lower_user";

    # test for all-caps user
    $mail_user = $lower_user if $mail_user eq "\U$mail_user\E";

    $cgi{'e'} = $mail_user . '@' . "\L$mail_addr\E";
}
elsif ($empty_fields !~ /\be\b/)
{
    $empty_fields .= "e\t";
}

if ($cgi{'yr'} =~ /^\d+$/ &&
    $cgi{'yr'} > aid_util::config('max_gradyear'))
{
    $empty_fields .= "yr\t";
}

if ($empty_fields ne '')
{
    delete $cgi{'u'};
    send_upd_real(\%cgi,$empty_fields);
    close(STDOUT);
    exit(0);
}

# now that the input is cleaned up, decide whether we're going to enter
# the confirmation phase or the queueing phase.

if (defined($cgi{'revise'})) {
    delete $cgi{'u'};
    send_upd_real(\%cgi,'');
} elsif (defined($cgi{'confirmed'})) {
    &queue_submission();
} else {
    &confirm_submission();
}

close(STDOUT);
exit(0);


sub confirm_submission
{
    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,$listing_sub_title,1);

    print "<form method=\"post\" action=\"", aid_util::config('confirm_cgi');
    print "/$cgi{'id'}" if $cgi{'id'} != -1;
    print "/new" if $cgi{'id'} == -1;
    print "\">\n";
    %newrec = aid_util::html_entify_rec(\%cgi);
    foreach (keys %newrec) {
	print "<input type=\"hidden\" name=\"$_\"";
	print "\n" if $_ eq 'n';
	print " value=\"$newrec{$_}\">\n";
    }

    print "
Here is what your listing will look like:
<br><br>

<table border=\"1\" cellpadding=\"6\"><tr><td>";

    $cgi{'u'} = time unless defined $cgi{'u'};
    print aid_util::verbose_entry(\%cgi,1,1,1);

    print "</td></tr></table>
<p>Want to change something?
<input type=submit name=\"revise\" value=\"Edit Listing\">
<br><br>
Everything above is correct?
<input type=submit name=\"confirmed\" value=\"Submit Listing\">
</p>
</form>
";
    print aid_util::common_html_ftr(20);
}

sub queue_submission {
    require 'ctime.pl';

    # set the times and then update the db.
    $cgi{'f'} = $cgi{'u'} = time;
    $cgi{'c'} = $cgi{'u'}
	unless defined $cgi{'c'} && $cgi{'c'} =~ /^\d+$/;
    $cgi{'h'} = &remote_host() unless defined $cgi{'h'};
    $cgi{'lm'} = $cgi{'b'} = 0;
    $cgi{'n'} =~ s/\015\012/\n/g;
    $cgi{'n'} =~ s/\015/\n/g;
    $cgi{'n'} =~ s/[ \t]+\n/\n/g;

    if (($cgi{'id'} != -1) && ("\L$cgi{'pe'}\E" ne "\L$cgi{'e'}\E"))
    {
	$cgi{'eu'} = $cgi{'u'};
	$cgi{'eo'} = $cgi{'pe'};
    }
    else
    {
	$cgi{'eo'} = '';
    }

    my($dbmfilew) = aid_util::config('staging');

    my(%DBW);
    tie(%DBW, 'DB_File::Lock', $dbmfilew, O_CREAT|O_RDWR, 0644,
	$DB_HASH, 'write') or die "$dbmfilew: $!\n";

    my($randkey);

    if (($cgi{'id'} != -1) && defined $DBW{$cgi{'id'}}) {
	$randkey = $DBW{$cgi{'id'}};
    } elsif (($cgi{'id'} == -1) && defined $DBW{"\L$cgi{'e'}\E"}) {
	$randkey = $DBW{"\L$cgi{'e'}\E"};
    } else {
	NEWKEY:
	for (;;) {
	    $randkey = &encode_key(int(rand(0x7FFFFFFF)));
	    last NEWKEY unless defined $DBW{$randkey};
	}
    }
	
    $DBW{$randkey} = $cgi{'id'} . "\0" . aid_util::db_pack_rec(\%cgi);
    if ($cgi{'id'} != -1) {
	$DBW{$cgi{'id'}} = $randkey;
    } else {
	$DBW{"\L$cgi{'e'}\E"} = $randkey;
    }

    if (($cgi{'id'} != -1) && ("\L$cgi{'pe'}\E" eq "\L$cgi{'e'}\E"))
    {
	if (defined $DBW{'_verified'})
	{
	    $DBW{'_verified'} .= "\0" . $randkey
		unless $DBW{'_verified'} =~ /\b$randkey\b/;
	}
	else
	{
	    $DBW{'_verified'} = $randkey;
	}

	untie(%DBW);

	$fullname = aid_util::inorder_fullname(\%cgi);

	print "Content-Type: text/html\015\012\015\012";
	print aid_util::common_html_hdr(20,'Submission Queued',1);

	$fullname = aid_util::html_entify_str($fullname);
	print "

<p>The listing for <strong>$fullname</strong> has been
accepted into the submission queue, and it will be processed
within 5 minutes. E-mail will be sent to
<b>$cgi{'e'}</b>
confirming receipt of this submission when it it processed.</p>

Here is what your listing will look like:
<br><br>

<table border=\"1\" cellpadding=\"6\"><tr><td>";

	print aid_util::verbose_entry(\%cgi,1,1,1);

	print "</td></tr></table>\n";
	print aid_util::config('html_ad');
	print aid_util::common_html_ftr(20);
    }
    else
    {
	untie(%DBW);

	&send_verify_email($randkey);
    }

    1;
}

sub send_verify_email {
    my($randkey) = @_;

    my($return_path,$from,$subject,$body,@recip) =
	aid_util::verification_message($randkey, \%cgi);

    my($i);
    my($status) = 0;

    for ($i = 0; $status == 0 && $i < 3; $i++)
    {
	$status = aid_util::sendmail_v2($return_path,$from,$subject,$body,@recip);
    }

    aid_util::cgi_die('ERROR: Unable to send confirmation e-mail',
		 "We're sorry, we were unable to send e-mail to\n" .
		 "<b>$cgi{'e'}</b>.<p>This may be a problem with our\n" .
		 "server or perhaps with your e-mail address.\n" .
		 "Please try again in a few minutes.<p>If you continue\n" .
		 "to get this error, please send e-mail to <a\n" .
		 "href=\"mailto:" . aid_util::config('admin_email') .
		 "\">" . aid_util::config('admin_email') . "</a>\n" .
		 "with error code <b>$randkey</b>.")
	if $status == 0;

    # success sending email; update last-mail timestamp
    my($dbmfilew) = aid_util::config('staging');

    my(%DBW);
    tie(%DBW, 'DB_File::Lock', $dbmfilew, O_CREAT|O_RDWR, 0644,
	$DB_HASH, 'write') or die "$dbmfilew: $!\n";

    $cgi{'lm'} = time;
    $DBW{$randkey} = $cgi{'id'} . "\0" . aid_util::db_pack_rec(\%cgi);

    untie(%DBW);

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,'Final Step: verify e-mail address',1);

    print "
<p>Our e-mail robot
(<tt>", aid_util::config('admin_email'), "</tt>)
just sent a verification message to
<b>$cgi{'e'}</b>.
It may take 2 or 3 minutes for it to arrive.</p>

<p>Please check your e-mail and find the 8-letter
verification code that was sent to you by the ",
aid_util::config('short_school'), "
Alumni Robot and enter it below.</p>

<form method=\"get\" action=\"" . aid_util::config('verify_cgi') . "\">
<label for=\"k\">Enter 8-letter code:</label>
&nbsp;
<input id=\"k\" type=\"text\" size=\"8\" maxlength=\"8\" name=\"k\">
&nbsp;
<input id=\"e\" type=\"hidden\" name=\"e\" value=\"$cgi{'e'}\">
<input id=\"id\" type=\"hidden\" name=\"id\" value=\"$cgi{'id'}\">
<input type=\"submit\" value=\"Submit verification code\">
</form>
";

    print aid_util::common_html_ftr(20);
}

sub send_upd_real {
    my($recp,$empty_fields) = @_;

    print "Content-Type: text/html\015\012\015\012";

    print aid_util::common_html_hdr(20,
			   (($recp->{'id'} == -1) ? 
			    $listing_add_title :
			    'Modify listing for ' .
			    aid_util::inorder_fullname($recp)),
			   1,
			   defined $recp->{'u'} ? $recp->{'u'} : undef);

    print aid_submit::submit_body($recp,$empty_fields);
    print aid_util::common_html_ftr(20,
			       defined $recp->{'u'} ? $recp->{'u'} : undef);
}

sub send_upd_notfound {
    my($notfound) = @_;

    $notfound = aid_util::html_entify_str($notfound);

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,$listing_upd_title,1);
    print "
<p><big><font color=\"red\">Sorry, a listing with the address</font>
<code><strong>$notfound</strong></code>
<font color=\"red\">could not be found in the Directory.</font></big></p>
<blockquote>
<dl>
  <dt><h3>I am currently listed in the Directory and want to
      modify my listing.</h3>
  <dd><br>
      <form method=\"get\" action=\"" . aid_util::config('update_cgi') . "\">
      <label for=\"upd\">My e-mail address is </label>
      <input type=\"text\" name=\"upd\" size=\"20\" id=\"upd\">
      <input type=\"submit\" value=\"Sign In\">
      </form>
  <dt><dd><strong>If you don't remember the e-mail address you used
  before, search for your listing:</strong>
  <dd><br>
      <form method=\"get\" action=\"" . aid_util::config('search_cgi') . "/upd\">
      <label for=\"q\">My last name is </label>
      <input type=\"text\" name=\"q\" size=\"20\" id=\"q\">
      <input type=\"hidden\" name=\"upd\" value=\"1\">
      <input type=\"submit\" value=\"Search\">
      </form>

  <dt><br><h3>I want to join the Directory.</h3>
  <dd><br><a
href=\"" . aid_util::config('master_path') . "add/new.html\">Fill
out this form with your contact information</a>.
      
</dl>
</blockquote>
";

    print aid_util::common_html_ftr(20);
}

sub jump_bar {
    my $retval = '';
    my $initial = 'a';
 
    while ($initial ne 'aa') {
        $retval .= "<a href=\"#${initial}-last\">\U${initial}\E</a>\n";
        $initial++;
    }
 
    $retval;
}

sub is_email_okay
{
    my($e) = @_;
    
    return undef unless $e;

    chomp($e);
    if ($e =~ /^[^<]*<([^>]+)>/) {
	$e = $1;
    }

    Email::Valid->address($e);
}

sub remote_host
{
    my($ip) = defined($ENV{'REMOTE_HOST'}) ? $ENV{'REMOTE_HOST'} :
	defined($ENV{'REMOTE_ADDR'}) ? $ENV{'REMOTE_ADDR'} : '[unknown]';

    if ($ip =~ /^\d+\.\d+\.\d+\.\d+$/)
    {
	my $ipnum = pack('C4', split(/\./, $ip));
	my $host = (gethostbyaddr($ipnum, 2))[0];

	$ip = $host if defined $host;
    }

    $ip;
}

sub encode_key
{
    my($key) = @_;
    my($retval) = '';
    my(@encode) = 
	(
	 'A','B','C','D','E','G','H','J',
	 'K','P','Q','R','T','X','Y','Z'
	 );

    my($i);
    for($i=7; $i>=0; $i--) {
	$retval .= $encode[$key & 0x0000000F];
	$key >>= 4; # Shift for next position
    }

    $retval;
}

# avoid stupid warnings
if ($^W && 0)
{
    %in = ();
}

1;
