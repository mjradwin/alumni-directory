#!/usr/bin/perl -w

#
#     FILE: form.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Alumni Internet Directory CGI form-submission interface
#      $Id: form,v 5.7 1999/06/10 21:22:40 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

require 'aid_util.pl';
require 'cgi-lib.pl';

if ($ENV{'SCRIPT_NAME'} =~ m,/nph-,)
{
    print "HTTP/1.1 200 OK\015\012",
          "Date: ", &aid_http_date(time), "\015\012";
    print "Server: ", $ENV{'SERVER_SOFTWARE'}, "\015\012"
	if defined $ENV{'SERVER_SOFTWARE'};
    print "Connection: close\015\012";
}

# configuration
$mailprog = &aid_config('mailprog');
$dbmfile = &aid_config('dbmfile');
$dbmfile =~ s/\.db$//;

$rcsid = '$Id: form,v 5.7 1999/06/10 21:22:40 mradwin Exp mradwin $'; #'fnt

$listing_upd_title = 'Modify Your Directory Listing';
$listing_upl_title = 'Select a Listing to Modify';
$listing_add_title = 'Join the Directory';
$listing_sub_title = 'Review and Confirm Your Listing';

&CgiDie(&aid_config('short_school') . " Alumni: Script Error",
	"The database is unreadable.\n" .
	"Please <a href=\"mailto:" . &aid_config('admin_email') .
	"\">e-mail " . &aid_config('admin_name') . "</a>.")
    unless -r "${dbmfile}.db";

@form_required = ('id', 'gn', 'sn', 'yr', 'e');

if (!&ReadParse())
{
    &send_upd_real(*aid_util'blank_entry,'');  #')#
    close(STDOUT);
    exit(0);
}

# look for special flags: version, update
#
# if any of these flags is set, we're sending back a dynamic page
# instead of processing a form request.
if (defined($in{'version'})) {
    print "Content-Type: text/plain\015\012\015\012$rcsid\015\012";
    print &aid_config('rcsid'), "\015\012",
	"cgi-lib.pl version ", $cgi_lib'version, "\015\012"; #'#
    close(STDOUT);
    exit(0);

}
elsif (defined($in{'update'}) || defined($in{'upd'}))
{
    $key = defined($in{'update'}) ? $in{'update'} : $in{'upd'};

    if ($key =~ /^\d+$/)
    {
	dbmopen(%DB,$dbmfile,0444);
	if (defined $DB{$key})
	{
	    %updateme = &aid_db_unpack_rec($key,$DB{$key});
	    &send_upd_real(*updateme,'');
	}
	else
	{
	    &send_upd_real(*aid_util'blank_entry,'');  #'#
	}
	dbmclose(%DB);

    }
    elsif ($key =~ /^\s*[^@]+@[^\.]+\./) 
    {
	$key =~ s/^\s*//;
	$key =~ s/\s*$//;
	$key = "\L$key\E";

	dbmopen(%DB,$dbmfile,0444);
	if (defined $DB{$key})
	{
	    $id = unpack("n",$DB{$key});
	    if ($id > 0)
	    {
		%updateme = &aid_db_unpack_rec($id,$DB{$id});
		dbmclose(%DB);
		&send_upd_real(*updateme,'');
		close(STDOUT);
		exit(0);
	    }
	}
	&send_upd_notfound($key);
	dbmclose(%DB);

    }
    elsif ($key =~ /^\s*$/)
    {
	&send_upd_list();
    }
    else
    {
	&send_upd_notfound($key);
    }

    close(STDOUT);
    exit(0);
}


# no special flags, so this should be a submission-processing request.
# did they access this with the right form?
foreach (@form_required) {
    select(STDOUT); $| = 1;
    &CgiDie(&aid_config('short_school') . " Alumni: Script Error",
	    "The required form data was not present or something is awry.\n" .
	    "Please <a href=\"" . &aid_config('master_path') .
	    "add/\">try again</a>.")
	unless defined($in{$_});
}


# okay, we've got the right form.  clean up the input.
foreach $key (keys(%in)) {
    $in{$key} =~ s/^\s*//;  # get rid of leading and trailing whitespace
    $in{$key} =~ s/\s*$//;

    $in{$key} = '' if $in{$key} =~ m|^n/a$|i;
    $in{$key} = '' if $in{$key} =~ m|^none$|i;
    $in{$key} = '' if $in{$key} =~ m|^\(none\)$|i;
    $in{$key} = '' if $in{$key} =~ m|^\(blank\)$|i;
}

foreach $key (keys(%in)) {
    next if $key eq 'n';
    $in{$key} =~ s/;/,/g;   # can't handle ; because it's field delim
}

# remove apostropies and add a leading year to gradyear field
$in{'yr'} =~ s/^class\s+of\s*//i;
$in{'yr'} =~ s/^\'(\d\d)$/$1/;
$in{'yr'} = '0' . $in{'yr'} if $in{'yr'} =~ /^\d$/;

# Year 2000 stuff: make 2-digit year fields be 4 digits.
# either 20 years in the future, or 80 years in the past.
if ($in{'yr'} =~ /^\d\d$/) {
    $year = (localtime(time))[5];
    $year += 1900;  # localtime() returns number of years since 1900
    if ((($year % 100) - $in{'yr'}) <= 80) {
	$year = int($year / 100);
	$in{'yr'} = $year . $in{'yr'};
    } else {
	$year = int($year / 100);
	$in{'yr'} = ++$year . $in{'yr'};
    }
}

$in{'r'} = (defined $in{'r'} && 
	    ($in{'r'} eq 'on' || $in{'r'} == 1)) ? 1 : 0;

# uncapitalize those overzealous capslock names
$in{'gn'} = "\L$in{'gn'}\E"
    if ($in{'gn'} eq "\U$in{'gn'}\E") && $in{'gn'} !~ /\./;
$in{'sn'} = "\L$in{'sn'}\E"
    if ($in{'sn'} eq "\U$in{'sn'}\E");
$in{'mn'} = "\L$in{'mn'}\E"
    if ($in{'mn'} eq "\U$in{'mn'}\E");

# initial capitalize those lazy names
$in{'gn'} = "\u$in{'gn'}";
$in{'sn'} = "\u$in{'sn'}"
    unless $in{'sn'} =~ /^(van|d[ie]) /;
$in{'mn'} = "\u$in{'mn'}"
    unless $in{'mn'} =~ /^(van|d[ie]) /;

$in{'mi'} = "\u$in{'mi'}";

$in{'w'} = '' if $in{'w'} eq 'http://';
$in{'w'} = 'http://' . $in{'w'} if
    $in{'w'} ne '' && $in{'w'} !~ m,^http://,i;

$in{'sn'} =~ s/^$in{'gn'}\s+//i;
$in{'mn'} =~ s/^$in{'gn'}\s+//i;
     
$in{'mn'} = '' if defined $in{'mn'} &&
    ($in{'mn'} =~ /\(?\s*same\s+as\s+last\s+name\s*\)?/i ||
     $in{'mn'} =~ /\(?\s*same\s*\)?/i ||
     $in{'mn'} eq $in{'sn'});

# did they have non-empty entries for all the required fields?
$empty_fields = '';
foreach (@form_required) 
{
    $empty_fields .= $_ . "\t"
	if ($in{$_} =~ /^\s*$/);
}

# lowercase the hostname portion of the email address
$mangled_e = $in{'e'};
$mangled_e =~ s/\s//g;
if (&is_email_okay($mangled_e))
{
    ($mail_user,$mail_addr) = split(/\@/, $mangled_e);
	
    # test for initial-cap, rest lower user
    $lower_user = "\L$mail_user\E";
    $mail_user = $lower_user if $mail_user eq "\u$lower_user";

    # test for all-caps user
    $mail_user = $lower_user if $mail_user eq "\U$mail_user\E";

    $in{'e'} = $mail_user . '@' . "\L$mail_addr\E";
}
elsif ($empty_fields !~ /\be\b/)
{
    $empty_fields .= 'e';
}

if ($empty_fields ne '')
{
    delete $in{'u'};
    &send_upd_real(*in,$empty_fields);
    close(STDOUT);
    exit(0);
}

# now that the input is cleaned up, decide whether we're going to enter
# the confirmation phase or the queueing phase.

if (defined($in{'revise'})) {
    delete $in{'u'};
    &send_upd_real(*in,'');
} elsif (defined($in{'confirmed'})) {
    &queue_submission();
} else {
    &confirm_submission();
}

close(STDOUT);
exit(0);


sub confirm_submission {
    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(-1,$listing_sub_title,1);

    print "<form method=\"post\" action=\"", &aid_config('confirm_cgi');
    print "/$in{'id'}" if $in{'id'} != -1;
    print "/new" if $in{'id'} == -1;
    print "\">\n";
    %newrec = &aid_html_entify_rec(*in);
    foreach (keys %newrec) {
	print "<input type=\"hidden\" name=\"$_\"";
	print "\n" if $_ eq 'n';
	print " value=\"$newrec{$_}\">\n";
    }

    print "
<table border=0 cellspacing=7>

<tr><td bgcolor=\"#$aid_util'header_bg\">
<font color=\"#$aid_util'header_fg\"><big><strong>7.
Final Review</strong></big></font>
</td></tr>

<tr><td>

Please double-check all of the below information.  
Be sure that your e-mail address
(<strong class=\"alert\"><code>$in{'e'}</code></strong>)
is spelled correctly or we won't be able to communicate with you!

<ul>
<li>If you have made any mistakes, select the
<strong>&lt;&nbsp;Back</strong> button
to edit your listing.
<li>If everything is correct, please hit the
<strong>Finish&nbsp;&gt;</strong> button.
</ul>
<input type=submit name=\"revise\" value=\"&lt;&nbsp;Back\">
&nbsp;
<input type=submit name=\"confirmed\" value=\"Finish&nbsp;&gt;\">
</td></tr>
</table>

";

    $in{'u'} = time unless defined $in{'u'};
    print "<div class=\"about\">", &aid_verbose_entry(*in,1,1,1), 
          "</div></form>\n";
    print &aid_common_html_ftr(-1);
}

sub queue_submission {
    require 'ctime.pl';

    # set the times and then update the db.
    $in{'u'} = time unless defined $in{'u'};
    $in{'f'} = $in{'u'} unless defined $in{'f'};
    $in{'c'} = $in{'c'} ne '' ? $in{'c'} : $in{'u'};
    $in{'h'} = $ENV{'REMOTE_HOST'} unless defined $in{'h'};
    $in{'b'} = 0 unless defined $in{'b'};
    $in{'n'} =~ s/\015\012/\n/g;
    $in{'n'} =~ s/\015/\n/g;

    if (($in{'id'} != -1) && ($in{'pe'} ne $in{'e'}))
    {
	$in{'eu'} = $in{'u'};
	$in{'eo'} = $in{'pe'};
    }
    else
    {
	$in{'eo'} = '';
    }

    $in{'browser'} = $ENV{'HTTP_USER_AGENT'};
    $date = &ctime($in{'u'});
    $mailto = &aid_config('mailto');
    $mailsubj = &aid_config('short_school') . "AID";
    $mailname = &aid_config('admin_name');

    $mailbody  = "Dear $mailname,\n\n";

    $mailbody .= 'Submission from ' . &aid_inorder_fullname(*in);
    $mailbody .= ' <' . $in{'e'} . "> follows:\n";

    $mailbody .= "\n" . &aid_config('sub_beg_str') . "\n";

    while (($key,$val) = each(%in))
    {
	next if $key eq 'n' || $key eq 'confirmed';
	$mailbody .= $key . '=' . $val . "\n";
    }

    if ($in{'n'} ne '')
    {
	$mailbody .= &aid_config('note_beg_str') . "\n";
	$mailbody .= $in{'n'} . "\n";
	$mailbody .= &aid_config('note_end_str') . "\n";
    }
    
    $mailbody .= &aid_config('sub_end_str') . "

Love,
the Alumni Internet Directory form-submission script
$date";

    system("$mailprog -s '$mailsubj [$in{'id'} $in{'e'}]' $mailto <<'EOM'
$mailbody
EOM
");

    $fullname = &aid_inorder_fullname(*in);

    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(-1,
			   (($in{'id'} == -1 ? 'Welcome, ' : 'Thank You, ') .
			    $fullname . '!'),
			   1);

    $fullname = &aid_html_entify_str($fullname);
    print "

<h3>Your submission has been received but is not yet published.</h3>

<p>The listing for <strong>$fullname</strong> has been added
to the submission queue, but it has <em>not</em> yet been published in
the Directory.  Processing your submission can take up to 48 hours.
If your submission was made Monday-Friday between 9am and 5pm Pacific
Time, your submission will probably be processed within an hour.</p>

<p>E-mail will be sent to <code><strong>$in{'e'}</strong></code>
confirming receipt of this submission when it it processed.
See \"<a href=\"" . &aid_config('master_path') . 
"etc/faq.html#submit\">What happens when I submit my listing?</a>\"
for behind-the-scenes details.</p>

";

    print &aid_config('html_ad');
    print &aid_common_html_ftr(-1);
}


sub send_upd_real {
    local(*rec,$empty_fields) = @_;

    print "Content-Type: text/html\015\012\015\012";

    print &aid_common_html_hdr(-1,
			   (($rec{'id'} == -1) ? 
			    $listing_add_title : 
			    'Modify listing for ' .
			    &aid_inorder_fullname(*rec)),
			   1,
			   defined $rec{'u'} ? $rec{'u'} : undef);

    print &aid_submit_body(*rec,$empty_fields);
    print &aid_common_html_ftr(-1,
			       defined $rec{'u'} ? $rec{'u'} : undef);
}

sub send_upd_notfound {
    local($notfound) = @_;
    local($_);

    $notfound = &aid_html_entify_str($notfound);

    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(-1,$listing_upd_title,1);
    print "\n";
    print "<p>Sorry, a listing with the address\n";
    print "<code><strong>$notfound</strong></code>\n";
    print "could not be found in the Directory.</p>\n";
    print "<p>Please check the spelling and <a href=\""
	. &aid_config('master_path') .  "add/\">try again</a>.</p>\n";

    print &aid_common_html_ftr(-1);
}

sub send_upd_list {
    local($_);
    local(@alpha_ids,%DB);
    local($fullname,$affil,$len);
    local($initial,$anchor);
    local(%rec);

    dbmopen(%DB,$dbmfile,0444);
    if (defined $DB{'_alpha'})
    {
	@alpha_ids = unpack("n*",$DB{'_alpha'});
    }
    else
    {
	dbmclose(%DB);
	&CgiDie(&aid_config('short_school') . " Alumni: Script Error",
		"The alphabetic database is unavailable.\n" .
		"Please <a href=\"mailto:" . &aid_config('admin_email') .
		"\">e-mail " . &aid_config('admin_name') . "</a>.");
    }

    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(-1,$listing_upl_title,1);
    print "\n";
    
    print "<p>Please select an alumnus to modify from the list below.\nThe list is quite long, so it may take a while to display all alumni.</p>\n";
    print "<p>\nLast Initial:\n", &jump_bar(), "</p>\n\n";
    print "<pre>";

    $initial = "z";
    foreach (@alpha_ids) {
	%rec = &aid_db_unpack_rec($_,$DB{$_});

	$cur_initial = substr($rec{'sn'}, 0, 1);
	$cur_initial = "\L${cur_initial}\E";
	if ("\L${initial}\E" ne $cur_initial) {
	    $initial = $cur_initial;
	    $anchor = " name=\"${initial}-last\"";
	} else {
	    $anchor = '';
	}

	$fullname = &aid_fullname(*rec);
	($affil,$len) = &aid_affiliate(*rec,0);

	print "<a$anchor href=\"", &aid_config('update_cgi'), 
  	  "/$rec{'id'}?upd=$rec{'id'}\">", $fullname, "</a>", $affil, "\n";
    }
    dbmclose(%DB);

    print "</pre>\n\n";
    print &aid_common_html_ftr(-1);

    1;
}

sub jump_bar {
    local($initial,$retval);
 
    $retval = '';
    $initial = 'a';
 
    while ($initial ne 'aa') {
        $retval .= "<a href=\"#${initial}-last\">\U${initial}\E</a>\n";
        $initial++;
    }
 
    $retval;
}

sub is_email_okay
{
    local($_) = @_;

    if (/^\s*[^\@\s\(\)\"]+\@([^\.\s\(\)\"]+\.)+\w\w\w?\s*$/)
    {
	1;
    }
    else
    {
	0;
    }
}


# avoid stupid warnings
if ($^W && 0)
{
    $cgi_lib'version = '';
    $aid_util'header_bg = '';
}

1;
