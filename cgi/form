#!/usr/local/bin/perl5 -w

#
#     FILE: form.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Alumni Internet Directory CGI form-submission interface
#      $Id: form,v 5.21 2000/04/25 01:43:55 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

require 'aid_util.pl';
use DB_File;
use CGI;
use CGI::Carp qw(fatalsToBrowser);

# configuration
$dbmfile = &aid_config('dbmfile');

$rcsid = '$Id: form,v 5.21 2000/04/25 01:43:55 mradwin Exp mradwin $'; #'fnt

$listing_upd_title = 'Modify Your Directory Listing';
$listing_upl_title = 'Select a Listing to Modify';
$listing_add_title = 'Join the Directory';
$listing_sub_title = 'Review and Confirm Your Listing';

die "$dbmfile: $!\n" unless -r $dbmfile;

@form_required = ('id', 'gn', 'sn', 'yr', 'e');

CGI::ReadParse();
%cgi = %in;
if (! keys %cgi)
{
    &send_upd_real(*aid_util::blank_entry,'');
    close(STDOUT);
    exit(0);
}

# look for special flags: version, update
#
# if any of these flags is set, we're sending back a dynamic page
# instead of processing a form request.
if (defined($cgi{'version'})) {
    print "Content-Type: text/plain\015\012\015\012$rcsid\015\012";
    print &aid_config('rcsid'), "\015\012";
    close(STDOUT);
    exit(0);

}
elsif (defined($cgi{'update'}) || defined($cgi{'upd'}))
{
    $key = defined($cgi{'update'}) ? $cgi{'update'} : $cgi{'upd'};

    if ($key =~ /^\d+$/)
    {
	tie(%DB, 'DB_File', $dbmfile, O_RDONLY, 0444, $DB_File::DB_HASH)
	    or die "$dbmfile: $!\n";
	if (defined $DB{$key})
	{
	    %updateme = &aid_db_unpack_rec($key,$DB{$key});
	    &send_upd_real(*updateme,'');
	}
	else
	{
	    &send_upd_real(*aid_util::blank_entry,'');
	}
	untie(%DB);

    }
    elsif ($key =~ /^\s*[^@]+@[^\.]+\./) 
    {
	$key =~ s/^\s*//;
	$key =~ s/\s*$//;
	$key = "\L$key\E";

	tie(%DB, 'DB_File', $dbmfile, O_RDONLY, 0444, $DB_File::DB_HASH)
	    or die "$dbmfile: $!\n";
	if (defined $DB{$key})
	{
	    $id = unpack("n",$DB{$key});
	    if ($id > 0)
	    {
		%updateme = &aid_db_unpack_rec($id,$DB{$id});
		untie(%DB);
		&send_upd_real(*updateme,'');
		close(STDOUT);
		exit(0);
	    }
	}
	&send_upd_notfound($key);
	untie(%DB);

    }
    elsif ($key =~ /^\s*$/)
    {
	&send_upd_list();
    }
    else
    {
	&send_upd_notfound($key);
    }

    close(STDOUT);
    exit(0);
}


# no special flags, so this should be a submission-processing request.
# did they access this with the right form?
foreach (@form_required) {
    &aid_cgi_die('Form Data Missing',
		 "The required form data was not present or something\n" .
		 "is awry. Please <a href=\"" . 
		 &aid_config('master_path') . "add/\">try again</a>.")
	unless defined($cgi{$_});
}


# okay, we've got the right form.  clean up the input.
foreach $key (keys(%cgi)) {
    $cgi{$key} =~ s/^\s*//;  # get rid of leading and trailing whitespace
    $cgi{$key} =~ s/\s*$//;

    $cgi{$key} = '' if $cgi{$key} =~ m|^n/a$|i;
    $cgi{$key} = '' if $cgi{$key} =~ m|^none$|i;
    $cgi{$key} = '' if $cgi{$key} =~ m|^\(none\)$|i;
    $cgi{$key} = '' if $cgi{$key} =~ m|^\(blank\)$|i;
}

foreach $key (keys(%cgi)) {
    next if $key eq 'n';
    $cgi{$key} =~ s/;/,/g;   # can't handle ; because it's field delim
}

# remove apostropies and add a leading year to gradyear field
$cgi{'yr'} =~ s/^class\s+of\s*//i;
$cgi{'yr'} =~ s/^\'(\d\d)$/$1/;
$cgi{'yr'} = '0' . $cgi{'yr'} if $cgi{'yr'} =~ /^\d$/;

# find the right century for a 2-digit year
if ($cgi{'yr'} =~ /^\d\d$/) {
    # localtime() returns number of years since 1900
    $this_year = (localtime(time))[5] + 1900;

    $fourdigit = substr($this_year,0,2) . $cgi{'yr'};
    $fourdigit = ((substr($this_year,0,2) - 1) . $cgi{'yr'})
	if ($fourdigit > $this_year + 4);

    $cgi{'yr'} = $fourdigit;
}

$cgi{'r'} = (defined $cgi{'r'} && 
	    ($cgi{'r'} eq 'on' || $cgi{'r'} == 1)) ? 1 : 0;

# uncapitalize those overzealous capslock names
$cgi{'gn'} = "\L$cgi{'gn'}\E"
    if ($cgi{'gn'} eq "\U$cgi{'gn'}\E") && $cgi{'gn'} !~ /\./;
$cgi{'sn'} = "\L$cgi{'sn'}\E"
    if ($cgi{'sn'} eq "\U$cgi{'sn'}\E");
$cgi{'mn'} = "\L$cgi{'mn'}\E"
    if ($cgi{'mn'} eq "\U$cgi{'mn'}\E");

# initial capitalize those lazy names
$cgi{'gn'} = "\u$cgi{'gn'}";
$cgi{'sn'} = "\u$cgi{'sn'}"
    unless $cgi{'sn'} =~ /^(van|d[ie]) /;
$cgi{'mn'} = "\u$cgi{'mn'}"
    unless $cgi{'mn'} =~ /^(van|d[ie]) /;

$cgi{'mi'} = "\u$cgi{'mi'}";

$cgi{'w'} = '' if $cgi{'w'} eq 'http://';
$cgi{'w'} = 'http://' . $cgi{'w'}
    if ($cgi{'w'} ne '' && $cgi{'w'} !~ m,^http://,i);

$cgi{'sn'} =~ s/^$cgi{'gn'}\s+//i;
$cgi{'mn'} =~ s/^$cgi{'gn'}\s+//i;
     
$cgi{'mn'} = '' if defined $cgi{'mn'} &&
    ($cgi{'mn'} =~ /\(?\s*same\s+as\s+last\s+name\s*\)?/i ||
     $cgi{'mn'} =~ /\(?\s*same\s*\)?/i ||
     $cgi{'mn'} eq $cgi{'sn'});

# did they have non-empty entries for all the required fields?
$empty_fields = '';
foreach (@form_required) 
{
    $empty_fields .= $_ . "\t"
	if ($cgi{$_} =~ /^\s*$/);
}

# lowercase the hostname portion of the email address
$mangled_e = $cgi{'e'};
$mangled_e =~ s/\s//g;
if (&is_email_okay($mangled_e))
{
    ($mail_user,$mail_addr) = split(/\@/, $mangled_e);
	
    # test for initial-cap, rest lower user
    $lower_user = "\L$mail_user\E";
    $mail_user = $lower_user if $mail_user eq "\u$lower_user";

    # test for all-caps user
    $mail_user = $lower_user if $mail_user eq "\U$mail_user\E";

    $cgi{'e'} = $mail_user . '@' . "\L$mail_addr\E";
}
elsif ($empty_fields !~ /\be\b/)
{
    $empty_fields .= "e\t";
}

if ($cgi{'yr'} =~ /^\d+$/ &&
    $cgi{'yr'} > &aid_config('max_gradyear'))
{
    $empty_fields .= "yr\t";
}

if ($empty_fields ne '')
{
    delete $cgi{'u'};
    &send_upd_real(*cgi,$empty_fields);
    close(STDOUT);
    exit(0);
}

# now that the input is cleaned up, decide whether we're going to enter
# the confirmation phase or the queueing phase.

if (defined($cgi{'revise'})) {
    delete $cgi{'u'};
    &send_upd_real(*cgi,'');
} elsif (defined($cgi{'confirmed'})) {
    &queue_submission();
} else {
    &confirm_submission();
}

close(STDOUT);
exit(0);


sub confirm_submission
{
    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(20,$listing_sub_title,1);

    print "<form method=\"post\" action=\"", &aid_config('confirm_cgi');
    print "/$cgi{'id'}" if $cgi{'id'} != -1;
    print "/new" if $cgi{'id'} == -1;
    print "\">\n";
    %newrec = &aid_html_entify_rec(*cgi);
    foreach (keys %newrec) {
	print "<input type=\"hidden\" name=\"$_\"";
	print "\n" if $_ eq 'n';
	print " value=\"$newrec{$_}\">\n";
    }

    print "
<table border=\"0\" cellspacing=\"7\" width=\"100%\">
<tr><td bgcolor=\"#$aid_util::header_bg\"><font color=\"#$aid_util::header_fg\"><big><strong>7.
Final Review</strong></big></font></td></tr></table>

Here is what your listing will look like:
<br><br>

<table border=\"1\" cellpadding=\"6\"><tr><td>";

    $cgi{'u'} = time unless defined $cgi{'u'};
    print &aid_verbose_entry(*cgi,1,1,1);

    print "</td></tr></table>
<p>Want to change something?
<input type=submit name=\"revise\" value=\"Edit Listing\">
<br><br>
Everything above is correct?
<input type=submit name=\"confirmed\" value=\"Submit Listing\">
</p>
</form>
";
    print &aid_common_html_ftr(20);
}

sub queue_submission {
    require 'ctime.pl';

    # set the times and then update the db.
    $cgi{'u'} = time unless defined $cgi{'u'};
    $cgi{'f'} = $cgi{'u'} unless defined $cgi{'f'};
    $cgi{'c'} = $cgi{'c'} ne '' ? $cgi{'c'} : $cgi{'u'};
    $cgi{'h'} = &remote_host() unless defined $cgi{'h'};
    $cgi{'b'} = 0 unless defined $cgi{'b'};
    $cgi{'n'} =~ s/\015\012/\n/g;
    $cgi{'n'} =~ s/\015/\n/g;

    if (($cgi{'id'} != -1) && ("\L$cgi{'pe'}\E" ne "\L$cgi{'e'}\E"))
    {
	$cgi{'eu'} = $cgi{'u'};
	$cgi{'eo'} = $cgi{'pe'};
    }
    else
    {
	$cgi{'eo'} = '';
    }

    $cgi{'browser'} = $ENV{'HTTP_USER_AGENT'};
    $date = &ctime($cgi{'u'});
    $mailto = &aid_config('mailto');
    $mailsubj = &aid_config('short_school') . "AID";
    $mailname = &aid_config('admin_name');

    $mailbody  = "Dear $mailname,\n\n";

    ($affil,$len) = &aid_affiliate(*cgi,0);
    $mailbody .= "Submission from userid $cgi{'id'}:\n  " .
	&aid_inorder_fullname(*cgi) . $affil . ' <' . $cgi{'e'} . ">\n";

    $mailbody .= "\n" . &aid_config('sub_beg_str') . "\n";

    while (($key,$val) = each(%cgi))
    {
	next if $key eq 'n' || $key eq 'confirmed';
	$mailbody .= $key . '=' . $val . "\n";
    }

    if ($cgi{'n'} ne '')
    {
	$mailbody .= &aid_config('note_beg_str') . "\n";
	$mailbody .= $cgi{'n'} . "\n";
	$mailbody .= &aid_config('note_end_str') . "\n";
    }
    
    $mailbody .= &aid_config('sub_end_str') . "

Love,
the Alumni Internet Directory form-submission script
$date";

    &aid_sendmail($mailto, &aid_config('short_school') . ' Alumni Robot',
		  "$mailsubj [$cgi{'id'} $cgi{'e'}]",
		  $mailbody,$mailname,$mailto)
	|| &aid_cgi_die('aid_sendmail failed',
			"Unable to process form submission.\n" .
			"Please <a href=\"mailto:" .
			&aid_config('admin_email') .
			"\">e-mail " . &aid_config('admin_name') . "</a>.");

    $fullname = &aid_inorder_fullname(*cgi);

    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(20,
			   (($cgi{'id'} == -1 ? 'Welcome, ' : 'Thank You, ') .
			    $fullname . '!'),
			   1);

    $fullname = &aid_html_entify_str($fullname);
    print "

<h3>Your submission has been received but is not yet published.</h3>

<p>The listing for <strong>$fullname</strong> has been added
to the submission queue, but it has <strong>not yet been published in
the Directory</strong>.  Processing your submission can take up to 48 hours.
If your submission was made Monday-Friday between 9am and 5pm Pacific
Time, your submission will probably be processed within an hour.</p>

<p>E-mail will be sent to <code><strong>$cgi{'e'}</strong></code>
confirming receipt of this submission when it it processed.
See \"<a href=\"" . &aid_config('master_path') . 
"etc/faq.html#submit\">What happens when I submit my listing?</a>\"
for behind-the-scenes details.</p>

";

    print &aid_config('html_ad');
    print &aid_common_html_ftr(20);
}


sub send_upd_real {
    local(*rec,$empty_fields) = @_;

    print "Content-Type: text/html\015\012\015\012";

    print &aid_common_html_hdr(20,
			   (($rec{'id'} == -1) ? 
			    $listing_add_title : 
			    'Modify listing for ' .
			    &aid_inorder_fullname(*rec)),
			   1,
			   defined $rec{'u'} ? $rec{'u'} : undef);

    print &aid_submit_body(*rec,$empty_fields);
    print &aid_common_html_ftr(20,
			       defined $rec{'u'} ? $rec{'u'} : undef);
}

sub send_upd_notfound {
    local($notfound) = @_;
    local($_);

    $notfound = &aid_html_entify_str($notfound);

    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(20,$listing_upd_title,1);
    print "\n";
    print "<p>Sorry, a listing with the address\n";
    print "<code><strong>$notfound</strong></code>\n";
    print "could not be found in the Directory.</p>\n";
    print "<p>Please check the spelling and <a href=\""
	. &aid_config('master_path') .  "add/\">try again</a>.</p>\n";

    print &aid_common_html_ftr(20);
}

sub send_upd_list {
    local($_);
    local(@alpha_ids,%DB);
    local($fullname,$affil,$len);
    local($initial,$anchor);
    local(%rec);

    tie(%DB, 'DB_File', $dbmfile, O_RDONLY, 0444, $DB_File::DB_HASH)
	or die "$dbmfile: $!\n";
    defined $DB{'_alpha'} || die "$dbmfile: missing _alpha\n";

    @alpha_ids = unpack("n*",$DB{'_alpha'});

    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(20,$listing_upl_title,1);
    print "\n";
    
    print "<p>Please select an alumnus to modify from the list below.\nThe list is quite long, so it may take a while to display all alumni.</p>\n";
    print "<p>\nLast Initial:\n", &jump_bar(), "</p>\n\n";
    print "<pre>";

    $initial = "z";
    foreach (@alpha_ids) {
	%rec = &aid_db_unpack_rec($_,$DB{$_});

	$cur_initial = substr($rec{'sn'}, 0, 1);
	$cur_initial = "\L${cur_initial}\E";
	if ("\L${initial}\E" ne $cur_initial) {
	    $initial = $cur_initial;
	    $anchor = " name=\"${initial}-last\"";
	} else {
	    $anchor = '';
	}

	$fullname = &aid_fullname(*rec);
	($affil,$len) = &aid_affiliate(*rec,0);

	print "<a$anchor href=\"", &aid_config('update_cgi'), 
  	  "/$rec{'id'}?upd=$rec{'id'}\">", $fullname, "</a>", $affil, "\n";
    }
    untie(%DB);

    print "</pre>\n\n";
    print &aid_common_html_ftr(20);

    1;
}

sub jump_bar {
    local($initial,$retval);
 
    $retval = '';
    $initial = 'a';
 
    while ($initial ne 'aa') {
        $retval .= "<a href=\"#${initial}-last\">\U${initial}\E</a>\n";
        $initial++;
    }
 
    $retval;
}

sub is_email_okay
{
    local($_) = @_;

    if (/^\s*[^\@\s\(\)\"]+\@([^\.\s\(\)\"]+\.)+\w\w\w?\s*$/)
    {
	1;
    }
    else
    {
	0;
    }
}

sub remote_host
{
    local($ip) = $ENV{'REMOTE_HOST'};

    if ($ip =~ /^\d+\.\d+\.\d+\.\d+$/)
    {
	local($ipnum) = pack('C4', split(/\./, $ip));
	local($host) = (gethostbyaddr($ipnum, 2))[0];

	$ip = $host if defined $host;
    }

    $ip;
}

# avoid stupid warnings
if ($^W && 0)
{
    $aid_util::header_bg = '';
    $aid_util::header_fg = '';
}

1;
