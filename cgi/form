#!/usr/local/bin/perl -w

#
#     FILE: form.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Alumni Directory CGI form-submission interface
#      $Id: form,v 7.5 2006/11/12 18:59:10 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
    if ($0 =~ m,(.*[/\\]),) {
	unshift @INC, $1;
    } else {
	unshift @INC, ".";
    }
}

use strict;
use CGI qw(-no_xhtml);
use CGI::Carp qw(fatalsToBrowser);
use Email::Valid;
use aid_util;
use aid_submit;
use DBI ();

# configuration
my $rcsid = '$Id: form,v 7.5 2006/11/12 18:59:10 mradwin Exp mradwin $'; #'fnt

my $listing_upd_title = "Modify Your Directory Listing";
my $listing_add_title = "Join the Directory";
my $listing_sub_title = "Review and Confirm Your Listing";

my %cgi;
my($q) = new CGI;
foreach my $key ($q->param())
{
    my($val) = $q->param($key);
    $val = "" unless defined $val;
    $cgi{$key} = $val;
}

if (! keys %cgi)
{
    send_upd_real(\%aid_util::blank_entry,"");
    close(STDOUT);
    exit(0);
}

# look for special flags: version, update
#
# if any of these flags is set, we're sending back a dynamic page
# instead of processing a form request.
if (defined($cgi{"version"})) {
    print "Content-Type: text/plain\015\012\015\012$rcsid\015\012";
    print aid_util::config("rcsid"), "\015\012";
    close(STDOUT);
    exit(0);

}

my $dbh = aid_util::db_connect();

if (defined($cgi{"update"}) || defined($cgi{"upd"}))
{
    my $key = defined($cgi{"update"}) ? $cgi{"update"} : $cgi{"upd"};

    if ($key =~ /^\d+$/)
    {
	my $DB = aid_util::load_records($dbh, "AND a.alumnus_id = $key");

	my @recs = values %{$DB};
	if (@recs)
	{
	    send_upd_real($recs[0],"");
	}
	else
	{
	    send_upd_real(\%aid_util::blank_entry,"");
	}
    }
    elsif ($key =~ /^\s*[^@]+@[^\.]+\./) 
    {
	$key =~ s/^\s*//;
	$key =~ s/\s*$//;
	$key = lc($key);

	my $qkey = $dbh->quote($key);
	my $DB = aid_util::load_records($dbh, "AND e.entry_email = $qkey");

	my @recs = values %{$DB};
	if (@recs)
	{
	    my $id = $recs[0]->{"id"};
	    if ($id > 0)
	    {
		$recs[0]->{"email_override"} = $recs[0]->{"e"};
		send_upd_real($recs[0],"");
		close(STDOUT);
		$dbh->disconnect;
		exit(0);
	    }
	}
	send_upd_notfound($key);
    }
    else
    {
	send_upd_notfound($key);
    }

    close(STDOUT);
    $dbh->disconnect;
    exit(0);
}


# no special flags, so this should be a submission-processing request.
# did they access this with the right form?
my @form_required = ("id", "gn", "sn", "yr", "e");
foreach (@form_required) {
    unless (defined($cgi{$_})) {
	$dbh->disconnect;
	aid_util::cgi_die("Form Data Missing",
			  "The required form data was not present or something\n" .
			  "is awry. Please <a href=\"" . 
			  aid_util::config("master_path") . "add/\">try again</a>.");
    }
}

# okay, we've got the right form.  clean up the input.
foreach my $key (keys(%cgi)) {
    $cgi{$key} =~ s/^\s*//;  # get rid of leading and trailing whitespace
    $cgi{$key} =~ s/\s*$//;

    $cgi{$key} = "" if $cgi{$key} =~ m|^n/a$|i;
    $cgi{$key} = "" if $cgi{$key} =~ m|^none$|i;
    $cgi{$key} = "" if $cgi{$key} =~ m|^\(none\)$|i;
    $cgi{$key} = "" if $cgi{$key} =~ m|^\(blank\)$|i;
}

foreach my $key (keys(%cgi)) {
    next if $key eq "n";
    $cgi{$key} =~ s/;/,/g;   # can't handle ; because it's field delim
}

# remove apostropies and add a leading year to gradyear field
$cgi{"yr"} =~ s/^class\s+of\s*//i;
$cgi{"yr"} =~ s/^\'(\d\d)$/$1/;
$cgi{"yr"} = "0" . $cgi{"yr"} if $cgi{"yr"} =~ /^\d$/;

# find the right century for a 2-digit year
if ($cgi{"yr"} =~ /^\d\d$/) {
    # localtime() returns number of years since 1900
    my $this_year = (localtime(time))[5] + 1900;

    my $fourdigit = substr($this_year,0,2) . $cgi{"yr"};
    $fourdigit = ((substr($this_year,0,2) - 1) . $cgi{"yr"})
	if ($fourdigit > $this_year + 4);

    $cgi{"yr"} = $fourdigit;
}

$cgi{"r"} = (defined $cgi{"r"} && 
	    ($cgi{"r"} eq "on" || $cgi{"r"} == 1)) ? 1 : 0;

# uncapitalize those overzealous capslock names
$cgi{"gn"} = lc($cgi{"gn"})
    if ($cgi{"gn"} eq uc($cgi{"gn"})) && $cgi{"gn"} !~ /\./;
$cgi{"sn"} = lc($cgi{"sn"})
    if ($cgi{"sn"} eq uc($cgi{"sn"}));
$cgi{"mn"} = lc($cgi{"mn"})
    if ($cgi{"mn"} eq uc($cgi{"mn"}));

# initial capitalize those lazy names
$cgi{"gn"} = "\u$cgi{'gn'}";
$cgi{"sn"} = "\u$cgi{'sn'}"
    unless $cgi{"sn"} =~ /^(van|d[ie]) /;
$cgi{"mn"} = "\u$cgi{'mn'}"
    unless $cgi{"mn"} =~ /^(van|d[ie]) /;

$cgi{"mi"} = "\u$cgi{'mi'}";

$cgi{"w"} = "" if $cgi{"w"} eq "http://";
$cgi{"w"} = "http://" . $cgi{"w"}
    if ($cgi{"w"} ne "" && $cgi{"w"} !~ m,^http://,i);

$cgi{"sn"} =~ s/^$cgi{"gn"}\s+//i;
$cgi{"mn"} =~ s/^$cgi{"gn"}\s+//i;
     
$cgi{"mn"} = "" if defined $cgi{"mn"} &&
    ($cgi{"mn"} =~ /\(?\s*same\s+as\s+last\s+name\s*\)?/i ||
     $cgi{"mn"} =~ /\(?\s*same\s*\)?/i ||
     $cgi{"mn"} eq $cgi{"sn"});

# did they have non-empty entries for all the required fields?
my $empty_fields = "";
foreach (@form_required) 
{
    $empty_fields .= $_ . "\t"
	if ($cgi{$_} =~ /^\s*$/);
}

# lowercase the hostname portion of the email address
my $mangled_e = $cgi{"e"};
$mangled_e =~ s/\s//g;
if (is_email_okay($mangled_e))
{
    my($mail_user,$mail_addr) = split(/\@/, $mangled_e);
	
    # test for initial-cap, rest lower user
    my $lower_user = lc($mail_user);
    $mail_user = $lower_user if $mail_user eq "\u$lower_user";

    # test for all-caps user
    $mail_user = $lower_user if $mail_user eq uc($mail_user);

    $cgi{"e"} = $mail_user . '@' . lc($mail_addr);
}
elsif ($empty_fields !~ /\be\b/)
{
    $empty_fields .= "e\t";
}

if ($cgi{"yr"} =~ /^\d+$/ &&
    $cgi{"yr"} > aid_util::config("max_gradyear"))
{
    $empty_fields .= "yr\t";
}

if ($empty_fields ne "")
{
    delete $cgi{"u"};
    $dbh->disconnect;
    send_upd_real(\%cgi,$empty_fields);
    close(STDOUT);
    exit(0);
}

if ($cgi{"n"} && length($cgi{"n"}) > 3600)
{
    $dbh->disconnect;
    send_upd_real(\%cgi,$empty_fields);
    close(STDOUT);
    exit(0);
}

# hack! lock this entry to prevent abuse
if ($cgi{"id"} && $cgi{"id"} eq "3066"
    && $cgi{"e"} ne 'torpgirl@yahoo.com') {
  aid_util::cgi_die("Bad email address",
		    "This entry's email address can not be changed.");
}

# now that the input is cleaned up, decide whether we're going to enter
# the confirmation phase or the queueing phase.

if (defined($cgi{"confirmed"})) {
    queue_submission();
} else {
    confirm_submission();
}

close(STDOUT);
$dbh->disconnect;
exit(0);


sub confirm_submission
{
    my $js = qq{<script language="JavaScript" type="text/javascript"><!--
var d=document;
function s1(){
d.f1.sub1.value='Please wait...';
d.f1.sub1.disabled=true;
d.f1.submit();
return false;
}
// --></script>
};

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,$listing_sub_title,1,
				    undef,undef,$js);

    print "<form name=\"f1\" id=\"f1\" method=\"post\" action=\"", aid_util::config("confirm_cgi");
    print "/$cgi{'id'}" if $cgi{"id"} != -1;
    print "/new" if $cgi{"id"} == -1;
    print "\">\n";
    my %newrec = aid_util::html_entify_rec(\%cgi);
    foreach (keys %newrec) {
	print "<input type=\"hidden\" name=\"$_\"";
	print "\n" if $_ eq "n";
	print " value=\"$newrec{$_}\">\n";
    }

    print "
Here is what your listing will look like:
<br><br>

<table border=\"1\" cellpadding=\"6\"><tr><td>";

    $cgi{"u"} = time unless defined $cgi{"u"};
    print aid_util::verbose_entry(\%cgi,1,1,1,0,1);

    print "</td></tr></table>
<p>Want to change something?
<input type=button value=\"Edit Listing\" onclick=\"history.go(-1)\">
<br><br>
Everything above is correct?
<input type=\"hidden\" name=\"confirmed\" value=\"1\">
<input type=\"submit\" name=\"sub1\" id=\"sub1\" value=\"Submit Listing\"
onclick=\"return s1()\">
</p>
</form>
";
    print aid_util::common_html_ftr(20);
}

sub queue_submission {
    # set the times and then update the db.
    $cgi{"f"} = $cgi{"u"} = time;
    $cgi{"c"} = $cgi{"u"}
	unless defined $cgi{"c"} && $cgi{"c"} =~ /^\d+$/;
    $cgi{"lm"} = $cgi{"b"} = 0;
    $cgi{"n"} =~ s/\015\012/\n/g;
    $cgi{"n"} =~ s/\015/\n/g;
    $cgi{"n"} =~ s/[ \t]+\n/\n/g;

    my $randkey = create_key();
    staging_store_rec($dbh, \%cgi, $randkey);

    my($return_path,$from,$subject,$body,@recip) =
	aid_util::verification_message($randkey, \%cgi);

    my $status = 0;
    for (my $i = 0; $status == 0 && $i < 3; $i++) {
	$status = aid_util::sendmail_v2($return_path,$from,$subject,$body,@recip);
    }

    aid_util::cgi_die("ERROR: Unable to send confirmation e-mail",
		      "We're sorry, we were unable to send e-mail to\n" .
		      "<b>$cgi{'e'}</b>.<p>This may be a problem with our\n" .
		      "server or perhaps with your e-mail address.\n" .
		      "Please try again in a few minutes.<p>If you continue\n" .
		      "to get this error, please send e-mail to <a\n" .
		      "href=\"mailto:" . aid_util::config("admin_email") .
		      "\">" . aid_util::config("admin_email") . "</a>\n" .
		      "with error code <b>$randkey</b>.")
	if $status == 0;

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,"Final Step: verify e-mail address",1);

    print "
<p>Our e-mail robot (<tt>", aid_util::config("admin_email"), "</tt>)
just sent a verification message to
<b>$cgi{'e'}</b>.
It may take 2 or 3 minutes for it to arrive.</p>

<p>Please check your e-mail and find the
verification URL that was sent to you by the ",
aid_util::config("short_school"), "
Alumni Robot and click on it to activate your account.</p>
";

    print aid_util::common_html_ftr(20);
}

sub send_upd_real {
    my($recp,$empty_fields) = @_;

    print "Content-Type: text/html\015\012\015\012";

    print aid_util::common_html_hdr(20,
			   (($recp->{"id"} == -1) ? 
			    $listing_add_title :
			    "Modify listing for " .
			    aid_util::inorder_fullname($recp)),
			   1,
			    defined $recp->{"u"} ? $recp->{"u"} : undef);

    print aid_submit::submit_body($recp,$empty_fields);
    print aid_util::common_html_ftr(20,
			       defined $recp->{"u"} ? $recp->{"u"} : undef);
}

sub send_upd_notfound {
    my($notfound) = @_;

    $notfound = aid_util::html_entify_str($notfound);

    print "Content-Type: text/html\015\012\015\012";
    print aid_util::common_html_hdr(20,$listing_upd_title,1);
    print "
<p><big><font color=\"red\">Sorry, a listing with the address</font>
<code><strong>$notfound</strong></code>
<font color=\"red\">could not be found in the Directory.</font></big></p>
<blockquote>
<dl>
  <dt><h3>I am currently listed in the Directory and want to
      modify my listing.</h3>
  <dd><br>
      <form method=\"get\" action=\"" . aid_util::config("update_cgi") . "\">
      <label for=\"upd\">My e-mail address is </label>
      <input type=\"text\" name=\"upd\" size=\"20\" id=\"upd\">
      <input type=\"submit\" value=\"Sign In\">
      </form>
  <dt><dd><strong>If you don't remember the e-mail address you used
  before, search for your listing:</strong>
  <dd><br>
      <form method=\"get\" action=\"" . aid_util::config("search_cgi") . "/upd\">
      <label for=\"q\">My last name is </label>
      <input type=\"text\" name=\"q\" size=\"20\" id=\"q\">
      <input type=\"hidden\" name=\"upd\" value=\"1\">
      <input type=\"submit\" value=\"Search\">
      </form>

  <dt><br><h3>I want to join the Directory.</h3>
  <dd><br><a
href=\"" . aid_util::config("master_path") . "add/new.html\">Fill
out this form with your contact information</a>.
      
</dl>
</blockquote>
";

    print aid_util::common_html_ftr(20);
}

sub is_email_okay
{
    my($e) = @_;
    
    return undef unless $e;

    chomp($e);
    if ($e =~ /^[^<]*<([^>]+)>/) {
	$e = $1;
    }

    Email::Valid->address($e);
}

sub create_key
{
    my $now = time();

    my $rand = pack("N", $now);

    if ($ENV{"REMOTE_ADDR"}) {
	$rand .= pack("CCCC", split(/\./, $ENV{"REMOTE_ADDR"}));
    }

    $rand .= pack("N", int(rand(0xFFFFFFFF)));

    unpack("H*", $rand);
}

sub val_or_null
{
    my($dbh,$rec,$key) = @_;

    if ($rec->{$key}) {
	$dbh->quote($rec->{$key});
    } else {
	"NULL";
    }
}

sub staging_store_rec
{
    my($dbh,$rec,$randkey) = @_;

    my $sn = $dbh->quote($rec->{"sn"});
    my $gn = $dbh->quote($rec->{"gn"});
    my $e = $dbh->quote($rec->{"e"});

    my $mn = val_or_null($dbh,$rec,"mn");
    my $mi = val_or_null($dbh,$rec,"mi");
    my $w = val_or_null($dbh,$rec,"w");
    my $l = val_or_null($dbh,$rec,"l");
    my $n = val_or_null($dbh,$rec,"n");

    my $gradclass;
    my $affil_other;
    if ($rec->{"yr"} =~ /^\d{4}$/) {
	$gradclass = $rec->{"yr"};
	$affil_other = "NULL";
    } else {
	$affil_other = $dbh->quote($rec->{"yr"});
	$gradclass = "NULL";
    }

    my $sql = qq{INSERT INTO aid_entry
		     (entry_name_surname,entry_name_married,
		      entry_name_given,entry_name_mi,
		      entry_email,entry_gradclass,entry_affil_other,
		      entry_web_page,entry_location,entry_note,entry_reunion)
		     VALUES ($sn,$mn,$gn,$mi,
			     $e,$gradclass,$affil_other,
			     $w,$l,$n,$rec->{r})
		 };

    $dbh->do($sql) or aid_util::cgi_die("Database Error", $dbh->errstr);
    my $entry_id = $dbh->last_insert_id(undef, undef, undef, undef);

    $sql = "INSERT INTO aid_verify"
	. " (verify_code,verify_staging_id,verify_alumnus_id,verify_created)"
	. " VALUES (?,?,?,NOW())";
    my $sth = $dbh->prepare($sql);
    $sth->execute($randkey, $entry_id,
		  ($rec->{"id"} && $rec->{"id"} > 0) ? $rec->{"id"} : undef)
	or aid_util::cgi_die("Database Error", $sth->errstr);
}
