#!/usr/bin/perl

#
#     FILE: mvhsaid.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: MVHS Alumni Internet Directory CGI interface
#      $Id: mvhsaid,v 3.31 1998/10/20 19:17:16 mradwin Exp mradwin $
#

require 'aid_util.pl';
require 'cgi-lib.pl';

# configuration
$mailprog = &aid_config('mailprog');
$dbfile = &aid_config('wwwdir') . "master.adr";

@required_headers = ('id', 'first', 'last', 'school', 'year', 'email');

&ReadParse();

# convert "cgi-bin/mvhsaid/vcard/123.vcf" to "cgi-bin/mvhsaid?vcard=123"
if (defined($ENV{'PATH_INFO'}) && $ENV{'PATH_INFO'} =~ m,^/vcard/,) {
    $in{'vcard'} = $ENV{'PATH_INFO'};
    $in{'vcard'} =~ s,^/vcard/(\d+).*$,$1,;
}

$rcsid = '$Id: mvhsaid,v 3.31 1998/10/20 19:17:16 mradwin Exp mradwin $'; #'fnt

# special flags: version, update, vcard, about
#
# if any of these flags is set, we're sending back a dynamic page
# instead of processing a form request.
if (defined($in{'version'})) {
    select(STDOUT);  $| = 1;
    print "Content-type: text/plain\n\n$rcsid\r\n";
    print &aid_config('rcsid'), "\r\n";
    exit(0);

} elsif (defined($in{'update'})) {
    if ($in{'update'} =~ /^\d+$/) {
	@db = &aid_create_db($dbfile);
	if (defined($db[$in{'update'}])) {
	    %updateme = &aid_split($db[$in{'update'}]);
	    $updateme{'message'} = &aid_get_usertext($in{'update'});
	    &send_upd_real(*updateme,'');

	} else {
	    &send_upd_real(*aid_util'blank_entry,'');  #'#
	}

    } elsif ($in{'update'} =~ /^\s*[^@]+@[^\.]+\./) {
	@db = &aid_create_db($dbfile);
	$in{'update'} =~ s/^\s*//;
	$in{'update'} =~ s/\s*$//;
	$in{'update'} = "\L$in{'update'}\E";
	for (@db) {
	    next unless defined($_) && $_ ne '';
	    %updateme = &aid_split($_);
	    if ("\L$updateme{'email'}\E" eq $in{'update'}) {
		$updateme{'message'} = &aid_get_usertext($updateme{'id'});
		&send_upd_real(*updateme,'');
		exit(0);
	    }
	}
	&send_upd_notfound($in{'update'});

    } elsif ($in{'update'} =~ /^\s*$/) {
	&send_upd_list();

    } else {
	&send_upd_notfound($in{'update'});

    }
    exit(0);

} elsif (defined($in{'vcard'})) {
    if ($in{'vcard'} =~ /^\d+$/) {
	@db = &aid_create_db($dbfile);
	if (defined($db[$in{'vcard'}])) {
	    &send_vcard($db[$in{'vcard'}]);
	} else {
	    &send_upd_real(*aid_util'blank_entry,'');
	}
    } else {
	&send_upd_real(*aid_util'blank_entry,'');
    }
    exit(0);

} elsif (defined($in{'about'}) && $in{'about'} =~ /^\d+$/) {
    @db = &aid_create_db($dbfile);
    if (defined($db[$in{'about'}])) {
	&send_about($db[$in{'about'}]);
    } else {
	&send_upd_real(*aid_util'blank_entry,'');
    }
    exit(0);

}


# no special flags, so this should be a submission-processing request.
# did they access this with the right form?
foreach (@required_headers) {
    if (!defined($in{$_})) {
	# wrong form
	&send_upd_real(*aid_util'blank_entry,'');
	exit(0);
    }
}


# okay, we've got the right form.  clean up the input.
foreach $key (keys(%in)) {
    $in{$key} =~ s/^\s*//;  # get rid of leading and trailing whitespace
    $in{$key} =~ s/\s*$//;

    $in{$key} = '' if $in{$key} =~ m|^n/a$|i;
    $in{$key} = '' if $in{$key} =~ m|^none$|i;
    $in{$key} = '' if $in{$key} =~ m|^\(none\)$|i;
}

foreach $key (keys(%in)) {
    next if $key eq 'message';
    $in{$key} =~ s/;/,/g;   # can't handle ; because it's field delim
}

# remove apostropies and add a leading year to gradyear field
$in{'year'} =~ s/^class\s+of\s*//i;
$in{'year'} =~ s/^\'(\d\d)$/$1/;

# Year 2000 stuff: make 2-digit year fields be 4 digits.
# either 20 years in the future, or 80 years in the past.
if ($in{'year'} =~ /^\d\d$/) {
    $year = (localtime(time))[5];
    $year += 1900;  # localtime() returns number of years since 1900
    if ((($year % 100) - $in{'year'}) <= 80) {
	$year = int($year / 100);
	$in{'year'} = $year . $in{'year'};
    } else {
	$year = int($year / 100);
	$in{'year'} = ++$year . $in{'year'};
    }
}

$in{'reunion'} = (defined $in{'reunion'} && 
		  ($in{'reunion'} eq 'on' || $in{'reunion'} == 1)) ? 1 : 0;
$in{'school'} = ($in{'school'} eq 'Other' && $in{'sch_other'} ne '') ? 
    $in{'sch_other'} : $in{'school'};

# lowercase the hostname portion of the email address
if ($in{'email'} =~ /\@/)
{
    ($mail_user, $mail_addr) = split(/\@/, $in{'email'});
	
    # test for initial-cap, rest lower user
    $lower_user = "\L$mail_user\E";
    $mail_user = $lower_user if $mail_user eq "\u$lower_user";

    # test for all-caps user
    $mail_user = $lower_user if $mail_user eq "\U$mail_user\E";

    $in{'email'} = $mail_user . '@' . "\L$mail_addr\E";
}

# uncapitalize those overzealous capslock names
$in{'first'} = "\L$in{'first'}\E"
    if ($in{'first'} eq "\U$in{'first'}\E");
$in{'last'} = "\L$in{'last'}\E"
    if ($in{'last'} eq "\U$in{'last'}\E");
$in{'married'} = "\L$in{'married'}\E"
    if ($in{'married'} eq "\U$in{'married'}\E");

# initial capitalize those lazy names
$in{'first'} = "\u$in{'first'}";
$in{'last'} = "\u$in{'last'}";
$in{'married'} = "\u$in{'married'}";

$in{'www'} = '' if $in{'www'} eq 'http://';


# did they have non-blank entries for all the required fields?
# did they check the "other" box for school, but not fill in any text?
@blank_fields = ();
foreach (@required_headers) {
    if (($in{$_} =~ /^\s*$/) ||
	($_ eq 'school' && $in{'school'} eq 'Other') ||
	($_ eq 'email' && $in{'email'} !~ /\@/))
    {
	push(@blank_fields, $_);
    }
}

if (@blank_fields)
{
    delete $in{'time'};
    &send_upd_real(*in,join(' ', @blank_fields));
    exit(0);
}

# now that the input is cleaned up, decide whether we're going to enter
# the confirmation phase or the queueing phase.

if (defined($in{'revise'})) {
    delete $in{'time'};
    &send_upd_real(*in,'');
} elsif (defined($in{'confirmed'})) {
    &queue_submission();
} else {
    &confirm_submission();
}

exit(0);


sub confirm_submission {
    local($cgi_path) = &aid_config('cgi_path');

    select(STDOUT);  $| = 1;
    print "Content-type: text/html\n\n";
    print &common_html_hdr(-1,'Please confirm your submission',1);
    print "\n<p>\n<strong><font color=\"#" . $aid_util'star_fg . "\">"; #'#
    print "Please confirm that all of the below information is
correct.</font></strong></p>

<p>If you have made any mistakes, select the <strong>&lt;&nbsp;Back</strong>
button to edit your entry.  If everything is correct, please hit the
<strong>Finish</strong> button.</p>\n";

    print "<form method=post action=\"$cgi_path/cnf\">\n";
    %newrec = &rec_html_entify(*in);
    foreach (keys %newrec) {
	print "<input type=hidden name=\"$_\" value=\"$newrec{$_}\">\n";
    }

    print "<table border=0>\n";
    print "<tr><td align=right>\n";
    print "<input type=submit name=\"revise\" value=\"&lt; Back\">\n";
    print "&nbsp;\n";
    print "<input type=submit name=\"confirmed\" value=\"Finish\">\n";
    print "</td></tr>\n";
    print "<tr><td>\n";
    print &about_text(*in,1,1,0), "\n";
    print "</td></tr>\n";
    print "<tr><td align=right>\n";
    print "<input type=submit name=\"revise\" value=\"&lt; Back\">\n";
    print "&nbsp;\n";
    print "<input type=submit name=\"confirmed\" value=\"Finish\">\n";
    print "</td></tr>\n";
    print "</table>\n</form>\n";
    print &common_html_ftr(-1);
}

sub queue_submission {
    require 'ctime.pl';

    # set the times and then update the db.
    $in{'time'} = time;
    $in{'fresh'} = $in{'time'};
    $in{'created'} = $in{'created'} ne '' ? $in{'created'} : $in{'time'};
    $in{'inethost'} = $ENV{'REMOTE_HOST'};
    $in{'bounces'} = 0;
    $date = &ctime($in{'time'});
    $mailto = &aid_config('mailto');
    $mailsubj = &aid_config('mailsubj');
    $mailname = &aid_config('admin_name');
    $record = &aid_join(*in);

    $message_top = "Dear $mailname,\n\n" .
	"_AID_BEGIN_SUBMISSION_\n\n$record\n";

    $message_mid =
	(($in{'message'} eq '') ? '' :
	 "_AID_BEGIN_MESSAGE_\n$in{'message'}\n_AID_END_MESSAGE_\n");
    
    $message_bot =
"Browser: $ENV{'HTTP_USER_AGENT'}
_AID_END_SUBMISSION_

Love,
the mvhsaid cgi-bin script
$date";

    system("$mailprog -s $mailsubj $mailto <<'EOM'
$message_top
$message_mid
$message_bot
EOM
");

    select(STDOUT);  $| = 1;
    print "Content-type: text/html\n\n";
    print &common_html_hdr(-1,'Your submission is confirmed and queued',1);

    $fullname = &inorder_fullname(*in);
    print "

<p>The entry for <strong>$fullname</strong> has been added
to the submission queue, but it has <em>not</em> yet been published in
the Directory.  Processing your submission can take up to 48 hours.</p>

<p>Email will be sent to <code><strong>$in{'email'}</strong></code>
confirming receipt of this submission when it it processed.
See \"<a href=\"" . &aid_config('master_path') . 
"etc/faq.html#submit\">What happens when I submit my entry?</a>\"
for behind-the-scenes details.</p>

<p>You might also be interested in joining the 
<a href=\"http://clubs.yahoo.com/clubs/mountainviewhighschool\">MVHS
Club on Yahoo!</a> The MVHS Club adds a Chat Room and Message Boards to
the services currently provided by this Directory.</p>

<p>Sign up for the 
<a href=\"http://www.planetall.com/registration/basic/recruit.asp?pcustomerid=1520098&Groupid=6602&Source=40\">MVHS
Group on PlanetAll</a> if you want to share more detailed address book
information (birthdays, phone numbers, etc.) with other alumni.  People
will only be allowed to access your information with your permission,
and you can share as much or as little as you want.</p>
";

    print &common_html_ftr(-1);
}


sub send_upd_real {
    local(*rec,$blank_entries) = @_;

    select(STDOUT);  $| = 1;
    print "Content-type: text/html\n\n";

    print &common_html_hdr(-1,
			   (($rec{'id'} == -1) ? 
			    'Add an Entry to the Directory' :
			    'Update Your Directory Entry'),
			   1);

    print &submit_body(*rec,$blank_entries);
    print &common_html_ftr(-1);
}

sub send_about {
    local($rawdata) = @_;
    local(%rec) = &aid_split($rawdata);
    local($fullname) = &inorder_fullname(*rec);

    $rec{'message'} = &aid_get_usertext($rec{'id'});

    select(STDOUT);  $| = 1;
    print "Content-type: text/html\n\n";
    print &common_html_hdr(-1,$fullname,1);
    print "<p>Here is more detailed information about $fullname.\n";
    print "To update this entry, please review the information and\n";
    print "click the button below.\n<p>\n\n";
    print &about_text(*rec,0,1,1), "\n";
    print &modify_button($rec{'id'}, &inorder_fullname(*rec));
    print &common_html_ftr(-1);
}

sub modify_button {
    local($id,$name) = @_;
    local($cgi_path) = &aid_config('cgi_path');

    "
<!-- borrowed from gamelan -->

<form method=get action=\"$cgi_path/upd\">
<input type=hidden name=\"update\" value=\"$id\">
<input type=submit value=\"Update $name\">
</form>

To avoid malicious modification by other people passing through, we
mail the original user about the change (plus the new user if the
email changes). The honor system has worked for us so far; please
don't abuse it and force us to install a password door.<p>
";
}

sub send_vcard {
    local($rawdata) = @_;
    local(%rec) = &aid_split($rawdata);

    select(STDOUT);  $| = 1;
    print "Content-type: text/x-vCard\n\n";
    print &aid_vcard_text(*rec);
}


sub send_upd_notfound {
    local($notfound) = @_;
    local($_);

    select(STDOUT);  $| = 1;
    print "Content-type: text/html\n\n";
    print &common_html_hdr(-1,'Update Your Directory Entry',1);
    print "\n";
    print "<p>Unable to find existing entry with email address\n";
    print "<code><strong>$notfound</strong></code>.</p>\n";
    print "<p>Please check the spelling and <a href=\""
	. &aid_config('master_path') .  "add/\">try again</a>.</p>\n";

    print &common_html_ftr(-1);
}

sub send_upd_list {
    local($_);
    local(@db) = &aid_alpha_db($dbfile);
    local($fullname,$affil,$len);
    local($initial,$last_initial,$anchor);
    local(%rec);

    select(STDOUT);  $| = 1;
    print "Content-type: text/html\n\n";
    print &common_html_hdr(-1,'Update Your Directory Entry',1);
    print "\n";
    
    print "<p>Please select an entry to update from the list below.</p>\n";
    print "<p>\n", &jump_bar(), "</p>\n\n";
    print "<pre>";
    print "Name and Graduation Year                  Email\n";
    print "---------------------------------------------------------------------------\n";

    $initial = "z";
    foreach (@db) {
	next if $_ eq '';
	%rec = &aid_split($_);

	$cur_initial = substr($rec{'last'}, 0, 1);
	$cur_initial = "\L${cur_initial}\E";
	if ("\L${initial}\E" ne $cur_initial) {
	    $initial = $cur_initial;
	    $anchor = " name=\"${initial}-last\"";
	} else {
	    $anchor = '';
	}

	$fullname = &fullname(*rec);
	($affil,$len) = &affiliate(*rec,0);

	print "<a$anchor href=\"", &aid_config('cgi_path'), "/upd?update=$rec{'id'}\">";
	print $fullname;
	print "</a>";
	print $affil;
	print ' ', ' ' x (41 - (length($fullname) + $len));
	print $rec{'email'};
	print "\n";
    }
    print "</pre>\n\n";
    print &common_html_ftr(-1);
}

sub jump_bar {
    local($initial,$retval);
 
    $retval = '';
    $initial = 'a';
 
    while ($initial ne 'aa') {
        $retval .= "<a href=\"#${initial}-last\">\U${initial}\E</a>\n";
        $initial++;
    }
 
    $retval;
}

sub panic {
    local($[) = 0;

    select(STDOUT);  $| = 1;
    print "Content-type: text/plain\n\n";
    print $_[0], "\r\n";

    exit;
}
