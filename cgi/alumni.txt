#!/usr/local/bin/perl5 -w

#
#     FILE: alumni.txt.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: Address Book/Nicknames Downloading module
#      $Id: alumni.txt,v 5.8 2000/05/30 17:26:41 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

require 'aid_util.pl';
use DB_File;
use Fcntl qw(:DEFAULT :flock);
use CGI;
use CGI::Carp qw(fatalsToBrowser);

$dbmfile = &aid_config('dbmfile');
die "$dbmfile: $!\n" unless -r $dbmfile;

CGI::ReadParse();
if (! keys %in)
{
    print "Status: 400 Bad Request\015\012";
    &aid_cgi_die("Bad Download Request",
	      "The download request could not be processed.\n" .
	      "Please <a href=\"" . &aid_config('master_path') .
	      "download/\">try again</a>.");
}

$plusminus_p = defined $in{'plusminus'} && 
    ($in{'plusminus'} eq 'on' || $in{'plusminus'} == 1) ? 1 : 0;

if (! &is_email_okay($in{'email'}))
{
    print "Content-Type: text/html\015\012\015\012";
    print &aid_common_html_hdr(-1, (($in{'email'} =~ /^\s*$/) ? 'Blank' :
				    'Invalid') . ' E-mail Address',1);
    print "\n";
    print "<p>You must submit a valid, non-blank e-mail address to ";
    print "download address books.\n";
    print "<p>Please <a href=\"" . &aid_config('master_path') .
	"download/\">try again</a>.</p>\n";
    print &aid_common_html_ftr(-1);
}
elsif (defined $in{'format'} && defined $in{'year'})
{
    &send_address_book($in{'format'},$in{'year'},$plusminus_p);
}
else
{
    print "Status: 400 Bad Request\015\012";
    &aid_cgi_die("Bad Download Request",
	      "The download request could not be processed.\n" .
	      "Please <a href=\"" . &aid_config('master_path') .
	      "download/\">try again</a>.");
}

close(STDOUT);
exit(0);


sub send_address_book {
    local($format,$year,$plusminus_p) = @_;
    local(@class_ids,%DB);
    local($_,%rec,$minyr,$maxyr);
    local($subtype) = 'plain';
    local($filename) = &aid_config('short_school');

    $filename =~ s/[^\w]/_/g;
    $filename = "\L$filename";
    $filename .= '_alumni_' . $year;

    if ($format eq 'o') {
	$subtype = 'x-csv';
	$filename .= '.csv';
    } elsif ($format eq 'v') {
	$subtype = 'directory';
	$filename .= '.vcf';
    } elsif ($format eq 'l') {
	$subtype = 'ldif';
	$filename .= '.ldif';
    } elsif ($format eq 'n') {
	$subtype = 'html;charset=ISO-8859-1';
	$filename .= '.html';
    } else {
	$filename .= '.txt';
    }

    if ($plusminus_p && $year =~ /^\d{4}$/) {
	$minyr = $year - 3;
	$maxyr = $year + 3;
    } else {
	$minyr = $maxyr = $year;
    }

    my($db) = tie(%DB, 'DB_File', $dbmfile, O_RDONLY, 0444, $DB_File::DB_HASH)
	or die "$dbmfile: $!\n";

    my($fd) = $db->fd;
    open(DB_FH, "<&=$fd") || die "dup $!";

    unless (flock (DB_FH, LOCK_SH | LOCK_NB)) {
	unless (flock (DB_FH, LOCK_SH)) { die "flock: $!" }
    }

    defined $DB{'_class'} || die "$dbmfile: missing _class\n";

    @class_ids = unpack("n*",$DB{'_class'});
    
    print "Content-Disposition: inline; ",
	"filename=$filename\015\012";
    print "Content-Type: text/$subtype; ",
	"filename=\"$filename\"\015\012\015\012";
    &aid_book_write_prefix(*STDOUT,$format);
    foreach (@class_ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});

	next unless $rec{'v'};
	if ($year =~ /^\d{4}$/)
	{
	    next unless ($rec{'yr'} <= $maxyr && $rec{'yr'} >= $minyr);
	}
	else
	{
	    next if $rec{'yr'} =~ /^\d{4}$/;
	}

	&aid_book_write_entry(*STDOUT,$format,*rec);
    }
    flock(DB_FH, LOCK_UN);
    undef $db;
    untie(%DB);
    close(DB_FH);

    &aid_book_write_suffix(*STDOUT,$format);
}

sub is_email_okay
{
    local($_) = @_;

    if (/^\s*[^\@\s\(\)\"]+\@([^\.\s\(\)\"]+\.)+\w\w\w?\s*$/)
    {
	1;
    }
    else
    {
	0;
    }
}

# avoid stupid warnings
if ($^W && 0)
{
    %in = ();
}

1;
