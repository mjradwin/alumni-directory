Alumni Internet Directory README file
$Id: README,v 5.5 1999/06/29 21:46:01 mradwin Exp mradwin $

========================================================================
 Copyright (c) 1995-1999  Michael John Radwin

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
========================================================================

DISCLAIMER: This is not very well packaged code.  It's not packaged at
all.  Don't come here expecting something you plop in a directory,
twiddle a few things, and you're off and using it.

To set up the Alumni Internet Directory, do the following:

1. Customize these files for your School/Unix/Apache setup
------------------------------------------------------------------------
bin/generic_config.pl:
  Copy this file to customize for your high school.  Change all GHS and
  Generic High School references to your own school name, all e-mail
  addresses, and pathnames for various web/source directory scripts,
  etc.  Make sure the pathnames match with the ones used in the
  Makefile.

bin/aid_util.pl:
  Change the "require 'generic_config.pl'" line near the top of the file to
  your particular school_config.pl file.

Makefile:
  Edit the SCHOOL, WWWROOT, WWWDIR, CGIDIR, and possibly other
  variables, making sure that they're consistent with the
  school_config.pl file.

data/*.include:
  Customize the HTML code for your school.  These files get a header and
  a footer attached to them, and then get copied verbatim out to the web
  directory.


2. Create a data/working.db file and put at least one entry in it
------------------------------------------------------------------------
  There's no script to do it automatically, so run these commands:
    $ perl -e 'dbmopen(%DB,"data/working",0666); dbmclose(%DB);'
    $ ./bin/aid_edit_entry data/working.db -1

  The first should create a valid, empty DBM file for your particular OS.
  The second will drop you into your favorite editor (vi by default)
  and let you create the first entry (probably your name!) by hand.
  Be sure to put non-blank values in the 4 required keys:
    * sn [surname]
    * gn [given name]
    * e [email address]
    * yr [graduation year]
  You also might put an URL the 'w' key (complete with leading "http://").


3. Install CGI scripts, .htaccess files, and default.css (style sheet)
------------------------------------------------------------------------
A simple 'make install' should do the trick, but check to make sure that
the permissions are set correctly.  You may need to chmod the files to
make them world-readable and possibly world-executable.

'make install' creates a .htaccess file in your cgi-bin directory to
tell apache that all of the scripts (form, go, vcard, etc.) are CGI
scripts and not content via the directive "SetHandler cgi-script". This
is ususally only relevant if you're using a "bin" subdirectory of the
public_html/school directory instead of a standard "cgi-bin" script.

If your Apache won't accept that configuration directive, or you're
using another web server, you'll probably need to rename all of the cgi
binaries with the extension .cgi, and be sure to update your
school_config.pl file appropriately.


4. Generate static HTML pages
------------------------------------------------------------------------
If all has gone well up to this point, 'make all' should copy your
data/working.db into the web directory's master.db location.  Then it
will use the various scripts in the bin dir to generate all of the
Graduating Class/Alphabetical listings and the index.html, FAQ, reunions
page, download page, etc.


5. You're up and running!
------------------------------------------------------------------------
As you get new submissions in your e-mail inbox, run ./bin/aid_addname
and then delete the submission e-mails.  aid_addname reads the spool
file and modifies data/working.db, invokes 'make all' to push out the
new static HTML pages, and then invokes aid_welcome to e-mail the new
members to tell them that their submission has been received.

aid_bounce will help you manage people who's email has been bouncing (I
usually let e-mail bounce for 6 months before I make their record
invalid).

In addition to notifying new/updated alumni that their submissions have
been processed, aid_welcome can also be used for sending out the
quarterly digests or bi-yearly verification messages.

For quarterly digests, you'll probably want to run: 
  make recent.txt
  ./bin/aid_welcome -a -r3 -m recent.txt data/working.db
  rm recent.txt

and:

  mkdir classonly
  ./bin/aid_multi_class_txt data/working.db classonly
  ./bin/aid_multi_class_welcome data/working.db classonly
  rm -rf classonly

========================================================================
Michael John Radwin
michael@radwin.org
http://www.radwin.org/michael/
