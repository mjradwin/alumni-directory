#!/usr/bin/perl -w

# $Id: aid_bounce,v 3.21 1999/05/19 01:36:09 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
push(@INC, $dirname);

require 'getopts.pl';
require 'aid_util.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hv] [-f <log>] [ids...]
    -h        Display usage information.
    -v        Invalidate ids (clear valid bit).
    -u        Revalidate ids (zero bounce field and set valid bit).
    -d        Display goners candidates.
    -f <log>  Set all freshness fields to value stored in <log> file
              unless an entry has non-zero bounce or freshness is
              later than time in <log> file.

Bumps up the bounce field for every id or e-mail address listed on the
command line.
";

&Getopts('hvf:du') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning

die "$usage\n" unless $opt_d || $opt_f || @ARGV;
die "$usage\n" if $opt_v && $opt_u;
die "$usage\n" if $opt_f && ($opt_d || $opt_u || $opt_v);

$cp   = &aid_config('cp');
-x $cp   || die "error: $cp is not executable!";

$dbFile = &aid_config('aiddir') . "data/master.adr";
@db = &aid_create_db($dbFile);

if ($opt_d)
{
    for (@db)
    {
	next unless defined($_) && $_ ne '';
	%rec = &aid_split($_);
	next unless $rec{'v'};
	next if $rec{'b'} eq '0';

	print "$rec{'id'} - $rec{'e'} - bounce ", &aid_caldate($rec{'b'});
	print " - fresh ", &aid_caldate($rec{'f'})
	    if $rec{'f'} > $rec{'b'};
	print "\n";
    }

    exit(0);
}
elsif ($opt_f)
{
    @freshness = &time_log($opt_f);
    &freshen(@freshness);
}
else
{
    # hash{email} = id
    for (@db)
    {
	next unless defined($_) && $_ ne '';
	%rec = &aid_split($_);
	$addrs{"\L$rec{'e'}\E"} = $rec{'id'};
    }

    &bounce_argv();
}

$tmpFile = "/tmp/aid_add.$$";
open(TMP, ">$tmpFile") || die "error: can't open $tmpFile: $!\n";
for (@db) {
    next unless defined($_) && $_ ne '';
    print TMP $_, "\n";
}
close(TMP);

system "$cp -f $tmpFile $dbFile"
    || die "error: failed to $cp -f $tmpFile $dbFile: $!\n";
unlink($tmpFile) || die "error: couldn't unlink $tmpFile: $!\n";

exit(0);

# returns array[id] = time
sub time_log
{
    local($log) = @_;
    local($_,@log,*LOG);

    @log = ();
    open(LOG,$log) || die "error: can't open $log: $!\n";
    while(<LOG>)
    {
	if (/^(\d+) - (\d+) - /)
	{
	    $log[$2] = $1;
	}
    }
    close(LOG);

    @log;
}



# freshen the user only if the bounce was non-zero and their
# freshness is less than the parameter.
sub freshen {
    local(@freshness) = @_;
    local($_);

    for (@db) {
	next unless defined($_) && $_ ne '';
	%rec = &aid_split($_);
	next unless $rec{'v'} == 1 && defined $freshness[$rec{'id'}] &&
	    $rec{'b'} == 0 && $rec{'f'} < $freshness[$rec{'id'}];

	$rec{'f'} = $freshness[$rec{'id'}];
	$db[$rec{'id'}] = &aid_join(*rec);
    }

    1;
}

# if the user has never bounced, set firstbounce to time.
# if the user has bounced, set freshness to time
sub bounce_argv
{
    local($time) = time;

    for (@ARGV) {
	if (/^\d+$/) {
	    if (defined $db[$_]) {
		%rec = &aid_split($db[$_]);
	    } else {
		warn "can't find id $_\n";
		next;
	    }
	} else {
	    $_ = "\L$_\E";
	    if (defined $addrs{$_}) {
		%rec = &aid_split(@db[$addrs{$_}]);
	    } else {
		warn "can't find e-mail addr $_\n";
		next;
	    }
	}

	print "$rec{'id'} - $rec{'e'} - bounce ";
	if ($rec{'b'} == 0) {
	    print "(none)";
	} else {
	    print &aid_caldate($rec{'b'});
	}

	if ($opt_u)
	{
	    $rec{'b'} = 0;
	    $rec{'v'} = 1;
	    print " - clear";
	}
	else
	{
	    if ($rec{'b'} != 0)
	    {
		$rec{'f'} = $time;
	    }
	    else
	    {
		$rec{'b'} = $time;
	    }

	    if ($opt_v)
	    {
		$rec{'v'} = 0;
		$rec{'q'} = $aid_util'blank_entry{'q'}; #'#
	    }
	}
	print "\n";

	$db[$rec{'id'}] = &aid_join(*rec);
    }

    1;
}

if ($^W && 0)
{
    %aid_util'blank_entry = (); #'#
}
