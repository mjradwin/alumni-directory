#!/usr/bin/perl -w

# $Id: aid_bounce,v 3.14 1998/08/08 02:39:46 mradwin Exp mradwin $

require 'ctime.pl';
require 'getopts.pl';
require 'aid_util.pl';

$usage = 'usage: aid_bounce [-hv] [-f <time>] [ids...]
    -h        Display usage information.
    -v        Invalidate ids.
    -u        Revalidate ids (zero bounce field).
    -d        Display goners candidates.
    -f <time> Set all freshness fields to <time> unless an entry
              has non-zero bounces, or freshness is later than <time>.

Bumps up the bounce field for every id or email address listed on the
command line.
';

&Getopts('hvf:du') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning

die "error: freshness date too small\n$usage\n"
    if (defined $opt_f) && ($opt_f < 815137658);

die "$usage\n" unless $opt_d || $opt_f || @ARGV;
die "$usage\n" if $opt_v && $opt_u;
die "$usage\n" if $opt_f && ($opt_d || $opt_u || $opt_v);

$cp   = &aid_config('cp');
-x $cp   || die "error: $cp is not executable!";

$dbFile = &aid_config('aiddir') . "data/master.adr";
@db = &aid_create_db($dbFile);

if ($opt_d)
{
    for (@db)
    {
	next unless defined($_) && $_ ne '';
	%rec = &aid_split($_);
	next unless $rec{'valid'};
	next if $rec{'bounce'} eq '0';

	print "$rec{'id'} - $rec{'email'} ", &aid_caldate($rec{'bounce'});
	print " ", &aid_caldate($rec{'fresh'}) if $rec{'fresh'} > $rec{'bounce'};
	print "\n";
    }

    exit(0);
}
elsif ($opt_f)
{
    &freshen();
}
else
{
    # hash{email} = id
    for (@db)
    {
	next unless defined($_) && $_ ne '';
	%rec = &aid_split($_);
	$addrs{"\L$rec{'email'}\E"} = $rec{'id'};
    }

    &bounce_argv();
}

$tmpFile = "/tmp/aid_add.$$";
open(TMP, ">$tmpFile") || die "error: can't open $tmpFile: $!\n";
for (@db) {
    next unless defined($_) && $_ ne '';
    print TMP $_, "\n";
}
close(TMP);

system "$cp -f $tmpFile $dbFile"
    || die "error: failed to $cp -f $tmpFile $dbFile: $!\n";
unlink($tmpFile) || die "error: couldn't unlink $tmpFile: $!\n";

exit(0);


# freshen the user only if the bounce was non-zero and their
# freshness is less than the parameter.
sub freshen {
    for (@db) {
	next unless defined($_) && $_ ne '';
	%rec = &aid_split($_);
	next unless $rec{'valid'} == 1 && 
	    $rec{'bounce'} == 0 && $rec{'fresh'} < $opt_f;

	$rec{'fresh'} = $opt_f;
	$db[$rec{'id'}] = &aid_join(*rec);
    }

    1;
}

# if the user has never bounced, set firstbounce to time.
# if the user has bounced, set freshness to time
sub bounce_argv
{
    local($time) = time;

    for (@ARGV) {
	if (/^\d+$/) {
	    if (defined @db[$_]) {
		%rec = &aid_split(@db[$_]);
	    } else {
		warn "can't find id $_\n";
		next;
	    }
	} else {
	    $_ = "\L$_\E";
	    if (defined $addrs{$_}) {
		%rec = &aid_split(@db[$addrs{$_}]);
	    } else {
		warn "can't find email addr $_\n";
		next;
	    }
	}

	print "$rec{'email'} ($rec{'id'}) was ";
	if ($rec{'bounce'} == 0) {
	    print "blank\n";
	} else {
	    print &ctime($rec{'bounce'});
	}

	if ($opt_u)
	{
	    $rec{'bounce'} = 0;
	}
	else
	{
	    if ($rec{'bounce'} != 0)
	    {
		$rec{'fresh'} = $time;
	    }
	    else
	    {
		$rec{'bounce'} = $time;
	    }

	    if ($opt_v)
	    {
		$rec{'valid'} = 0;
		$rec{'request'} = $aid_util'blank_entry{'request'}; #'#
	    }
	}

	$db[$rec{'id'}] = &aid_join(*rec);
    }

    1;
}
