#!/usr/local/bin/perl -w

# $Id: aid_bounce,v 6.3 2003/10/30 07:28:18 mradwin Exp mradwin $
#
# Copyright (c) 2003  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Internet Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, '.';
  }
}
use lib "/home/mradwin/local/share/perl";

use DB_File::Lock;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hvud] [-f <log>] inoutfile.db [ids...]
    -h        Display usage information.
    -v        Invalidate ids (clear valid bit).
    -u        Revalidate ids (zero bounce field and set valid bit).
    -d        Display goners candidates.
    -f <log>  Set all freshness fields to value stored in <log> file
              unless an entry has non-zero bounce or freshness is
              later than time in <log> file.

Unless -d or -f is specified, sets the bounce/updated field for every id
or e-mail address listed on the command line.  The valid bit is untouched
unless -v or -u is specified.";

getopts('hvf:du') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning

die "$0: Too many mutually-exclusive options\n$usage\n"
    if (($opt_d ? 1 : 0) + ($opt_f ? 1 : 0) +
	($opt_v ? 1 : 0) + ($opt_u ? 1 : 0)) > 1;
die "$0: No database file specified\n$usage\n" unless $ARGV[0];
die "$0: No target ids specified\n$usage\n"
    unless ($opt_d || $opt_f || $ARGV[1]);

$dbmfile = shift;

if ($opt_d)
{
    die "$dbmfile: $!\n" unless -r $dbmfile;

    $mode = (stat($dbmfile))[2];
    chmod 0444, $dbmfile;

    my(%DB);
    tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
	or die "$dbmfile: $!\n";

    while (my($key,$val) = each %DB)
    {
	next unless $key =~ /^\d+$/;
	%rec = aid_util::db_unpack_rec($key,$val);

	next unless $rec{'v'};
	next if $rec{'b'} eq '0';

	print "$rec{'id'} - $rec{'e'} - bounce ", aid_util::caldate($rec{'b'});
	print " - fresh ", aid_util::caldate($rec{'f'})
	    if $rec{'f'} > $rec{'b'};
	print "\n";
    }

    untie(%DB);

    chmod $mode, $dbmfile;
    exit(0);
}
elsif ($opt_f)
{
    my(%DB);
    tie(%DB, 'DB_File::Lock', $dbmfile, O_RDWR|O_CREAT, 0644, $DB_HASH, 'write')
	or die "$dbmfile: $!\n";

    my @freshness = time_log($opt_f);
    freshen(\%DB, @freshness);

    untie(%DB);
}
else
{
    my(%DB);
    tie(%DB, 'DB_File::Lock', $dbmfile, O_RDWR|O_CREAT, 0644, $DB_HASH, 'write')
	or die "$dbmfile: $!\n";

    bounce_args(\%DB, @ARGV);
    aid_util::rebuild_secondary_keys(\%DB, 0);

    untie(%DB);
}

exit(0);

# returns array[id] = time
sub time_log
{
    my($log) = @_;
    local($_,*LOG);

    my @log = ();
    open(LOG,$log) || die "error: can't open $log: $!\n";
    while(<LOG>)
    {
	if (/^(\d+) - (\d+) - /)
	{
	    $log[$2] = $1;
	}
    }
    close(LOG);

    @log;
}



# freshen the user only if the bounce was non-zero and their
# freshness is less than the parameter.
sub freshen
{
    my($DB, @freshness) = @_;

    while (my($key,$val) = each %{$DB})
    {
	next unless $key =~ /^\d+$/;
	my %rec = aid_util::db_unpack_rec($key,$val);

	next unless $rec{'v'} == 1 && defined $freshness[$rec{'id'}] &&
	    $rec{'b'} == 0 && $rec{'f'} < $freshness[$rec{'id'}];

	$rec{'f'} = $freshness[$rec{'id'}];
	$DB->{$rec{'id'}} = aid_util::db_pack_rec(\%rec);
    }

    1;
}

# if the user has never bounced, set firstbounce to time.
# if the user has bounced, set freshness to time
sub bounce_args
{
    my($DB, @args) = @_;
    my($time) = time;

    for (@args) {
	if (/^\d+$/) {
	    if (defined $DB->{$_}) {
		%rec = aid_util::db_unpack_rec($_,$DB->{$_});
	    } else {
		warn "can't find id $_\n";
		next;
	    }
	} else {
	    $_ = "\L$_\E";
	    if (defined $DB->{$_} && $DB->{$_} ne '') {
		$_ = unpack("n*", $DB->{$_});
		%rec = aid_util::db_unpack_rec($_,$DB->{$_});
	    } else {
		warn "can't find e-mail addr $_\n";
		next;
	    }
	}

	print "$rec{'id'} - $rec{'e'} - bounce ";
	if ($rec{'b'} == 0) {
	    print "(none)";
	} else {
	    print aid_util::caldate($rec{'b'});
	}

	if ($opt_u)
	{
	    $rec{'b'} = 0;
	    $rec{'v'} = 1;
	    print " - clear";
	}
	else
	{
	    if ($rec{'b'} != 0)
	    {
		$rec{'f'} = $time;
	    }
	    else
	    {
		$rec{'b'} = $time;
	    }

	    if ($opt_v)
	    {
		$rec{'v'} = 0;
		$rec{'q'} = $aid_util::blank_entry{'q'};
	    }
	}
	print "\n";

	$DB->{$rec{'id'}} = aid_util::db_pack_rec(\%rec);
    }

    1;
}

if ($^W && 0)
{
    %aid_util::blank_entry = ();
}
