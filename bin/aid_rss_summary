#!/usr/local/bin/perl -w

#
#     FILE: aid_rss_summary.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: creates an RDF Site Summary for the Directory
#      $Id: aid_rss_summary,v 6.1 2003/08/25 04:10:32 mradwin Exp mradwin $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use FindBin;
use lib $FindBin::Bin;
use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";

use DB_File::Lock;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-h] infile.db outfile.rdf
    -h        Display usage information.
";

getopts('h') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$ARGV[1] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning

my $dbmfile = shift;
my %DB;
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

die "corrupt/missing _t key!" unless defined $DB{'_t'} && $DB{'_t'} ne '';
my $time = unpack("N",$DB{'_t'});

die "corrupt/missing _nextid key!"
    unless defined $DB{'_nextid'} && $DB{'_nextid'} ne '';

my %id_by_ts;
for (my $i = $DB{'_nextid'} - 1; $i > 0; $i--)
{
    if (defined $DB{$i})
    {
	my %rec = aid_util::db_unpack_rec($i,$DB{$i});
	next unless $rec{'v'};
	$id_by_ts{$i} = $rec{'u'};
    }
}

my $outfile = shift;
open(FMTOUT,">$outfile") || die "Can't open $outfile: $!\n";

print FMTOUT
"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>
<rss version=\"0.91\">
<channel>

<title>" . aid_util::config('short_school') . " Alumni Internet Directory</title>
<link>http://" . aid_util::config('master_srv') . aid_util::config('master_path') .
    "recent.html</link>
<description>" . aid_util::config('descr_long') . "</description>
<language>en-us</language>

";

my @ids;
foreach my $i (sort {$id_by_ts{$b} <=> $id_by_ts{$a}} keys %id_by_ts)
{
    push(@ids, $i);
    last if scalar(@ids) == 10;
}

foreach my $i (@ids) {
    my %rec = aid_util::db_unpack_rec($i,$DB{$i});
    my($affil) = aid_util::affiliate(\%rec, 0);
    print FMTOUT
"<item>
<title>" .  aid_util::html_entify_str(aid_util::inorder_fullname(\%rec)) .
" $affil</title>
<link>http://" . aid_util::config('master_srv') .
    aid_util::about_path(\%rec,0) . "</link>
<description>Updated " . aid_util::caldate($rec{'u'}), ".";

    if ($rec{'n'}) {
	print FMTOUT " ", aid_util::html_entify_str($rec{'n'});
    }

    print FMTOUT "</description>\n</item>\n\n";
}

print FMTOUT
"</channel>
</rss>
";

untie(%DB);

close(FMTOUT);
utime $time, $time, $outfile;

# touch timestamp
my $now = time;
my $ts = $outfile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;
exit(0);
