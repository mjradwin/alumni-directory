#!/usr/local/bin/perl -w

#
#     FILE: aid_rss_summary.pl
#   AUTHOR: Michael J. Radwin
#    DESCR: creates an RDF Site Summary for the Directory
#      $Id: aid_rss_summary,v 6.3 2003/10/30 07:28:18 mradwin Exp mradwin $
#
# Copyright (c) 2003  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Internet Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, '.';
  }
}
use lib "/home/mradwin/local/share/perl";

use DB_File::Lock;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-h] infile.db outfile.rdf
    -h        Display usage information.
";

getopts('h') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$ARGV[1] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning

my $dbmfile = shift;
my %DB;
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

die "corrupt/missing _t key!" unless defined $DB{'_t'} && $DB{'_t'} ne '';
my $time = unpack("N",$DB{'_t'});

die "corrupt/missing _nextid key!"
    unless defined $DB{'_nextid'} && $DB{'_nextid'} ne '';

my %id_by_ts;
for (my $i = $DB{'_nextid'} - 1; $i > 0; $i--)
{
    if (defined $DB{$i})
    {
	my %rec = aid_util::db_unpack_rec($i,$DB{$i});
	next unless $rec{'v'};
	$id_by_ts{$i} = $rec{'u'};
    }
}

my $outfile = shift;
open(FMTOUT,">$outfile") || die "Can't open $outfile: $!\n";

print FMTOUT
"<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>
<rss version=\"0.91\">
<channel>

<title>" . aid_util::config('short_school') . " Alumni Internet Directory</title>
<link>http://" . aid_util::config('master_srv') . aid_util::config('master_path') .
    "recent.html</link>
<description>" . aid_util::config('descr_long') . "</description>
<language>en-us</language>

";

my @ids;
foreach my $i (sort {$id_by_ts{$b} <=> $id_by_ts{$a}} keys %id_by_ts)
{
    push(@ids, $i);
    last if scalar(@ids) == 10;
}

foreach my $i (@ids) {
    my %rec = aid_util::db_unpack_rec($i,$DB{$i});
    my($affil) = aid_util::affiliate(\%rec, 0);
    print FMTOUT
"<item>
<title>" .  aid_util::html_entify_str(aid_util::inorder_fullname(\%rec)) .
" $affil</title>
<link>http://" . aid_util::config('master_srv') .
    aid_util::about_path(\%rec,0) . "</link>
<description>Updated " . aid_util::caldate($rec{'u'}), ".";

    if ($rec{'n'}) {
	print FMTOUT " ", aid_util::html_entify_str($rec{'n'});
    }

    print FMTOUT "</description>\n</item>\n\n";
}

print FMTOUT
"</channel>
</rss>
";

untie(%DB);

close(FMTOUT);
utime $time, $time, $outfile;

# touch timestamp
my $now = time;
my $ts = $outfile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;
exit(0);
