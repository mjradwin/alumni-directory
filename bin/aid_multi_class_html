#!/usr/local/bin/perl5 -w

#
# does the html multi_class pages
# $Id: aid_multi_class_html,v 5.16 2000/05/25 00:29:05 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

use DB_File;
use Time::Local;

require 'aid_util.pl';
require 'getopts.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hq] [-i <keys>] infile.db [reunions.db]
    -h        Display usage information.
    -q        Quiet.
    -i <keys> Incremental update only for list of keys.
";

&Getopts('hi:q') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning

@incremental = ($opt_i ? split(/[,\s]+/, $opt_i) : ());

$dbmfile = shift;
tie(%DB, 'DB_File', $dbmfile, O_RDONLY, 0444, $DB_File::DB_HASH)
    or die "$dbmfile: $!\n";

my(%RDB);
if ($ARGV[0])
{
    $r_dbmfile = shift;
    tie(%RDB, 'DB_File', $r_dbmfile, O_RDONLY, 0444, $DB_File::DB_HASH)
	or die "$r_dbmfile: $!\n";
}

die "corrupt/missing _years key!"
    unless defined $DB{'_years'} && $DB{'_years'} ne '';

@years = unpack("n*",$DB{'_years'});
push(@years, 'other') if defined $DB{'_other'} && $DB{'_other'} ne '';

%class_prev = ();
%class_next = ();
$prev = '';
foreach $year (@years)
{
    if ($prev ne '')
    {
	$class_next{$prev} = $year;
	$class_prev{$year} = $prev;
    }
    $prev = $year;
}

select(STDOUT); $| = 1;
foreach $year (@years)
{
    $key = "_t_${year}";
    if (@incremental)
    {
	next unless grep(/$key/, @incremental);
	print STDOUT "$year "
	    unless $opt_q;
    }
    else
    {
	print STDOUT "."
	    unless $opt_q;
    }

    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    $time = unpack("N",$DB{$key});

    $key = "_${year}";
    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    @ids = unpack("n*",$DB{$key});

    $title = ($year =~ /^\d+$/) ? "Class of $year" : "Faculty and Staff";
    $outFile = &aid_config('wwwdir') . "class/${year}.html";
    open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

    if ($#ids + 1 == 1)
    {
	$subtitle = '1 alumnus';
    }
    else
    {
	$subtitle = sprintf("%d alumni", $#ids + 1);
    }

    $extra_meta  = "\n<link rel=\"contents\" href=\"./\" title=\"Graduating Classes\">";
    $extra_meta .= "\n<link rel=\"prev\" href=\"$class_prev{$year}.html\" title=\"Class of $class_prev{$year}\">"
	if defined $class_prev{$year};

    if (defined $class_next{$year})
    {
	$extra_meta .=
	    "\n<link rel=\"next\" href=\"$class_next{$year}.html\" title=\"";
	$extra_meta .= (($class_next{$year} =~ /^\d+$/) ? 
			"Class of $class_next{$year}" : "Faculty and Staff");
	$extra_meta .= "\">";
    }

    print FMTOUT &aid_common_html_hdr(2,$title,1,$time,$subtitle,$extra_meta);
    print FMTOUT &aid_common_intro_para(0);
    print FMTOUT &aid_class_jump_bar('', '.html', *years, 1, $year);
    print FMTOUT "<hr noshade=\"noshade\" size=\"1\">\n\n";

    if (defined $RDB{$year})
    {
	my($date,$html) = split(/\0/, $RDB{$year}, 2);
	my($yr,$mon,$mday) = split(/\//, $date, 3);
	my($t) = &Time::Local::timelocal(59,59,23,$mday,$mon-1,$yr-1900,0,0,0);

	if ($t > time)
	{
	    my(%r) = ();
	    $r{$year} = $RDB{$year};
	    print FMTOUT "<h2>Reunion Info</h2>\n";
	    &aid_write_reunion_hash(*FMTOUT, \%r);
	    print FMTOUT "<hr noshade=\"noshade\" size=\"1\">\n\n";
	}
    }

    foreach $id (@ids)
    {
	%rec = &aid_db_unpack_rec($id,$DB{$id});
	next unless $rec{'v'};

	print FMTOUT &aid_verbose_entry(*rec);
    }

    print FMTOUT "<hr noshade=\"noshade\" size=\"1\">

<center>
<form method=\"post\" action=\"http://minder.netmind.com/mindit.shtml\">
<input type=\"submit\"
 value=\"Receive e-mail when $title changes (courtesy of NetMind)\">
<input type=\"hidden\" name=\"UPDATE_PERIOD\" value=\"7\">
<input type=\"hidden\" name=\"EMAIL\" value=\"\">
<input type=\"hidden\" name=\"URL\"
 value=\"http://" .  &aid_config('master_srv') . &aid_config('master_path') . 
"class/${year}.html\">
</form>
</center>
";

    print FMTOUT &aid_common_html_ftr(2,$time);
    close(FMTOUT);
    utime $time, $time, $outFile;
}

die "corrupt/missing _t key!" unless defined $DB{'_t'} && $DB{'_t'} ne '';
$time = unpack("N",$DB{'_t'});
untie(%DB);
print STDOUT "\n"
    unless $opt_q;

# index page
$outFile = &aid_config('wwwdir') . "class/index.html";
open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

print FMTOUT &aid_common_html_hdr(-2,'Graduating Classes',0,$time);

print FMTOUT "<p align=\"center\"><big>\n";
print FMTOUT &aid_class_jump_bar('', '.html', *years, 0);
print FMTOUT "</big></p>\n\n";

print FMTOUT &aid_common_html_ftr(-2,$time);
close(FMTOUT);
utime $time, $time, $outFile;

# touch timestamp
$now = time;
$ts = $outFile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

untie(%RDB) if defined $r_dbmfile;
exit(0);
