#!/usr/local/bin/perl -w

#
# does the html multi_class pages
# $Id: aid_multi_class_html,v 6.8 2004/10/25 19:41:07 mradwin Exp mradwin $
#
# Copyright (c) 2003  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Internet Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, '.';
  }
}
use lib "/home/mradwin/local/share/perl";

use DB_File::Lock;
use Time::Local;
use POSIX qw(strftime);
use Getopt::Std;
use Digest::MD5  qw(md5_hex);
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hq] [-i <keys>] infile.db [reunions.db]
    -h        Display usage information.
    -q        Quiet.
    -d        Generate 'detail' pages for each individual.
    -i <keys> Incremental update only for list of keys.
";

getopts('hi:qd') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning
$opt_d = $opt_d;		# avoid warning

@incremental = ($opt_i ? split(/[,\s]+/, $opt_i) : ());

$dbmfile = shift;
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

my(%RDB);
if ($ARGV[0])
{
    $r_dbmfile = shift;
    tie(%RDB, 'DB_File::Lock', $r_dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
	or die "$r_dbmfile: $!\n";
}

die "corrupt/missing _years key!"
    unless defined $DB{'_years'} && $DB{'_years'} ne '';

@years = unpack("n*",$DB{'_years'});
push(@years, 'other') if defined $DB{'_other'} && $DB{'_other'} ne '';

%class_prev = ();
%class_next = ();
$prev = '';
foreach $year (@years)
{
    if ($prev ne '')
    {
	$class_next{$prev} = $year;
	$class_prev{$year} = $prev;
    }
    $prev = $year;
}

select(STDOUT); $| = 1;
foreach $year (@years)
{
    $key = "_t_${year}";
    if (@incremental)
    {
	next unless grep(/$key/, @incremental);
	print STDOUT "$year "
	    unless $opt_q;
    }
    else
    {
	print STDOUT "."
	    unless $opt_q;
    }

    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    $time = unpack("N",$DB{$key});

    $key = "_${year}";
    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    @ids = unpack("n*",$DB{$key});

    $title = ($year =~ /^\d+$/) ? "Class of $year" : "Faculty and Staff";
    $outFile = aid_util::config('wwwdir') . "class/${year}.html";
    open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

    if ($#ids + 1 == 1)
    {
	$subtitle = '1 alumnus';
    }
    else
    {
	$subtitle = sprintf("%d alumni", $#ids + 1);
    }

    $extra_meta  = "\n<link rel=\"contents\" href=\"./\" title=\"Graduating Classes\">";
    $extra_meta .= "\n<link rel=\"prev\" href=\"$class_prev{$year}.html\" title=\"Class of $class_prev{$year}\">"
	if defined $class_prev{$year};

    if (defined $class_next{$year})
    {
	$extra_meta .=
	    "\n<link rel=\"next\" href=\"$class_next{$year}.html\" title=\"";
	$extra_meta .= (($class_next{$year} =~ /^\d+$/) ? 
			"Class of $class_next{$year}" : "Faculty and Staff");
	$extra_meta .= "\">";
    }

    print FMTOUT aid_util::common_html_hdr(2,$title,1,$time,$subtitle,$extra_meta);
    print FMTOUT aid_util::common_intro_para(0);
    print FMTOUT aid_util::class_jump_bar('', '.html', \@years, 1, $year);
    print FMTOUT "<hr noshade=\"noshade\" size=\"1\">\n\n";

    my(%r);
    my($key,$val);
    while (my($key,$val) = each(%RDB))
    {
	next if $key =~ /^_/;

	if ($key =~ /^\d{4}$/ || $key eq 'other')
	{
	    next unless $key eq $year;
	}

#	my($date,$html) = split(/\0/, $val, 2);
#	my($yr,$mon,$mday) = split(/\//, $date, 3);
#	my($t) = &Time::Local::timelocal(59,59,23,$mday,$mon-1,$yr-1900,0,0,0);

#	if ($t > time)
#	{
	    $r{$key} = $val;
#	}
    }

    if (keys %r)
    {
	print FMTOUT "<h3>Reunion Info</h3>\n<ul>\n";
	foreach $key (sort keys %r)
	{
	    my($refname,$title);

	    my($date,$html) = split(/\0/, $r{$key}, 2);

	    if ($key =~ /^\d+$/)
	    {
		$refname = "r$key";
		$title = "Class of $key";
	    }
	    else
	    {
		$refname = lc($key);
		$refname =~ s/[^\w]/_/g;
		$refname =~ s/_+/_/g;
		$refname =~ s/^_//;
		$refname =~ s/_$//;

		$title = $key;
	    }

	    my($long_date);
	    my($prefix) = 'Past';
	    if ($date eq "TBA")
	    {
		$prefix = "Upcoming";
		$long_date = "Date To Be Announced";
	    }
	    else
	    {
		my($yr,$mon,$mday) = split(/\//, $date, 3);
		my $t = Time::Local::timelocal(59,59,23,$mday,$mon-1,$yr-1900);
		$long_date = POSIX::strftime("%A, %B %e, %Y", localtime($t));
		$prefix = 'Upcoming' if ($t > time);
	    }

	    print FMTOUT "<li>$prefix:\n",
	    "<a href=\"", aid_util::config('master_path'),
	    "etc/reunions.html#$refname\">$title</a>\n($long_date)</li>\n";
	}
	print FMTOUT "</ul>\n<hr noshade=\"noshade\" size=\"1\">\n\n";
    }

    my @recent;
    foreach $id (@ids)
    {
	my %rec = aid_util::db_unpack_rec($id,$DB{$id});
	next unless $rec{'v'};

	if (aid_util::is_new($rec{'u'}))
	{
	    push(@recent, $id);
	}
    }
    if (@recent)
    {
	print FMTOUT "<h3>New and Updated</h3>\n<ul>\n";
	foreach $id (@recent)
	{
	    my %rec = aid_util::db_unpack_rec($id,$DB{$id});
	    print FMTOUT "<li><a href=\"#id-$id\">", 
	    	aid_util::inorder_fullname(\%rec), "</a> ",
	    	aid_util::is_new_html(\%rec), " ",
	    	aid_util::caldate($rec{'u'}), "\n";
	}
	print FMTOUT "</ul>\n<hr noshade=\"noshade\" size=\"1\">\n\n";
    }

    foreach $id (@ids)
    {
	my %rec = aid_util::db_unpack_rec($id,$DB{$id});
	next unless $rec{'v'};

	print FMTOUT aid_util::verbose_entry(\%rec);

	if ($opt_d) {
	my $out2 = sprintf("%s%s/%06d.html",
			   aid_util::config('wwwdir'), "detail", $id);
	open(FMTOUT2,">$out2") || die "Can't open $out2: $!\n";

	my($affil,$len) = aid_util::affiliate(\%rec,0);
	my $name = aid_util::inorder_fullname(\%rec);

	print FMTOUT2 aid_util::common_html_hdr(-2, $name . $affil, 1, $rec{'u'});
	print FMTOUT2 aid_util::verbose_entry(\%rec,1,0,0,1);

	my $action = aid_util::config('message_cgi');
	my $hash = md5_hex($rec{'e'});
	my $e = email_name(\%rec);
	$e .= " &lt;" . aid_util::protect_email($rec{'e'}) . "&gt;";
	my $subject = aid_util::config('short_school') . " Alumni";

	print FMTOUT2 <<_EOHTML_;
<p>&nbsp;</p>
<hr>
<a name="msg"></a>
<h2>Send a message to $name$affil</h2>
<p>
<form method="post" action="$action/post">
<input type="hidden" name="id" value="$id">
<input type="hidden" name="hash" value="$hash">
<table border="0" cellspacing="1" cellpadding="2" >
<tr><td align="right"><b>From:</b></td>
<td><input type="text" name="from" size="60" 
maxlength="128" value=""></td></tr>
<tr><td align="right"><b>To:</b></td>
<td>$e</td></tr>
<tr><td align="right"><b>Subject:</b></td>
<td><input type="text" name="subject" size="60" 
maxlength="80" value="$subject"></td></tr>
</table>
<textarea name="message" rows="20" cols="70"
wrap="hard"></textarea>
<br><input type="submit" name="send" value="Send">
</form>
_EOHTML_
;

	print FMTOUT2 aid_util::common_html_ftr(-2,$rec{'u'});
	close(FMTOUT2);
	utime $rec{'u'}, $rec{'u'}, $out2;
    	}
    }

    print FMTOUT aid_util::common_html_ftr(2,$time);
    close(FMTOUT);
#    utime $time, $time, $outFile;
}

if ($opt_d && !$opt_i)
{
    print STDOUT "\nRemoving deleted entries..."
	unless $opt_q;

    my $max = $DB{'_nextid'};
    foreach my $id (1 .. $max)
    {
	my $out2 = sprintf("%s%s/%06d.html",
			   aid_util::config('wwwdir'), "detail", $id);
	next unless -e $out2;
	my $remove = 0;

	if (defined $DB{$id})
	{
	    my %rec = aid_util::db_unpack_rec($id,$DB{$id});
	    $remove = 1 unless $rec{'v'};
	}
	else
	{
	    $remove = 1;
	}

	if ($remove)
	{
	    print STDOUT " $id" unless $opt_q;
	    unlink($out2);
	}
    }
}

die "corrupt/missing _t key!" unless defined $DB{'_t'} && $DB{'_t'} ne '';
$time = unpack("N",$DB{'_t'});
untie(%DB);
print STDOUT "\n"
    unless $opt_q;

# index page
$outFile = aid_util::config('wwwdir') . "class/index.html";
open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

print FMTOUT aid_util::common_html_hdr(-2,'Graduating Classes',0,$time);

print FMTOUT "<p align=\"center\"><big>\n";
print FMTOUT aid_util::class_jump_bar('', '.html', \@years, 0);
print FMTOUT "</big></p>\n\n";

print FMTOUT aid_util::common_html_ftr(-2,$time);
close(FMTOUT);
utime $time, $time, $outFile;

# touch timestamp
$now = time;
$ts = $outFile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

untie(%RDB) if defined $r_dbmfile;
exit(0);

sub email_name
{
    my($recp) = @_;
    my $name = $recp->{'gn'};
    $name .= " $recp->{'mi'}."
	if defined $recp->{'mi'} && $recp->{'mi'} ne '';
    $name .= " $recp->{'sn'}";
    $name .= " $recp->{'mn'}"
	if defined $recp->{'mn'} && $recp->{'mn'} ne '';
    $name =~ s/\"/\'/g;

    $name;
}
