#!/usr/local/bin/perl -w

#
# does the html multi_class pages
# $Id: aid_multi_class_html,v 7.7 2006/03/21 16:57:21 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, ".";
  }
}

use strict;
use Time::Local;
use POSIX qw(strftime);
use Getopt::Std;
use Digest::MD5  qw(md5_hex);
use aid_util;
use DBI ();

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hq] [-i <keys>]
    -h        Display usage information.
    -q        Quiet.
    -d        Generate 'detail' pages for each individual.
    -i <keys> Incremental update only for list of keys.
";

my %opts;
getopts("hi:qd", \%opts) || die "$usage\n";
$opts{"h"} && die "$usage\n";
@ARGV == 0 || die "$usage\n";

my @incremental = ($opts{"i"} ? split(/[,\s]+/, $opts{"i"}) : ());

my $dbh = aid_util::db_connect();
my @years = aid_util::load_years($dbh);

my %class_prev;
my %class_next;
my $prev = "";
foreach my $year (@years)
{
    if ($prev ne "")
    {
	$class_next{$prev} = $year;
	$class_prev{$year} = $prev;
    }
    $prev = $year;
}


# fake reunion DB
my %RDB;
my $sql = <<EOSQL
SELECT reunion_gradclass,
    reunion_date,
    reunion_text
FROM aid_reunion
EOSQL
;

my $sth = $dbh->prepare($sql);
$sth->execute or die $sth->errstr;
while (my($class,$date,$html) = $sth->fetchrow_array) {
    if (!$date) {
	my $val = "TBA\0" . $html; 
	$RDB{$class} = $val;
    } else {
	$date =~ s/-/\//g;
	my $val = $date . "\0" . $html;
	$RDB{$class} = $val;
    }
}


### main loop
select(STDOUT); $| = 1;

my $DB = aid_util::load_records($dbh, "");
$dbh->disconnect;

foreach my $year (@years)
{
    print STDOUT "$year " unless $opts{"q"};

    my $time = 0;
    my $count = 0;
    my @class_ids;
    foreach my $recp (values %{$DB})
    {
#	next unless $recp->{"v"};
	if ($year =~ /^\d+$/) {
	    next unless $recp->{"yr"} eq $year;
	} else {
	    next if $recp->{"yr"} =~ /^\d+$/;
	}
	$time = $recp->{"u"} if $recp->{"u"} > $time;
	push(@class_ids, $recp->{"id"});
	$count++;
    }

    my @ids = sort { lc($DB->{$a}->{"sn"}) cmp lc($DB->{$b}->{"sn"})
		     || lc($DB->{$a}->{"gn"}) cmp lc($DB->{$b}->{"gn"})
		 } @class_ids;

    my $title = ($year =~ /^\d+$/) ? "Class of $year" : "Faculty and Staff";
    my $outFile = aid_util::config("wwwdir") . "class/${year}.html";
    open(FMTOUT,">$outFile.$$") || die "Can't open $outFile.$$: $!\n";

    my $subtitle;
    if ($count == 1)
    {
	$subtitle = "1 alumnus";
    }
    else
    {
	$subtitle = sprintf("%d alumni", $count);
    }

    my $extra_meta = "\n<link rel=\"contents\" href=\"./\" title=\"Graduating Classes\">";
    $extra_meta .= "\n<link rel=\"prev\" href=\"$class_prev{$year}.html\" title=\"Class of $class_prev{$year}\">"
	if defined $class_prev{$year};

    if (defined $class_next{$year})
    {
	$extra_meta .=
	    "\n<link rel=\"next\" href=\"$class_next{$year}.html\" title=\"";
	$extra_meta .= (($class_next{$year} =~ /^\d+$/) ? 
			"Class of $class_next{$year}" : "Faculty and Staff");
	$extra_meta .= "\">";
    }

    my $master_path = aid_util::config("master_path");
    my $rsslink = "http://" . aid_util::config('master_srv') 
	. "${master_path}class/${year}.xml";
    my $rsslinku = aid_util::url_escape($rsslink);
    my $rsstitle = aid_util::url_escape(aid_util::config("short_school") 
					. " Alumni: Class of $year");

    $extra_meta .= "\n<link rel=\"alternate\" type=\"application/rss+xml\" "
    . "title=\"RSS\" href=\"$rsslink\">\n";

    print FMTOUT aid_util::common_html_hdr(2,$title,1,$time,$subtitle,$extra_meta);

    print FMTOUT aid_util::common_intro_para(0);
    print FMTOUT aid_util::class_jump_bar("", ".html", \@years, 1, $year);

    print FMTOUT qq{<p>
<a href="$rsslink"><img
alt="View the raw XML source" src="${master_path}etc/xml.gif"
width="36" height="14" border="0"></a>

<a href="http://add.my.yahoo.com/rss?url=$rsslinku"><img
alt="addtomyyahoo4" src="http://us.i1.yimg.com/us.yimg.com/i/us/my/addtomyyahoo4.gif"
height="17" width="91" border="0"></a>

<a href="http://www.newsgator.com/ngs/subscriber/subext.aspx?url=$rsslinku"><img
alt="Subscribe in NewsGator Online" src="http://www.newsgator.com/images/ngsub1.gif"
height="17" width="91" border="0"></a>

<a href="http://client.pluck.com/pluckit/prompt.aspx?GCID=C12286x053&amp;a=$rsslinku&amp;t=$rsstitle"><img
alt="Subscribe with Pluck RSS reader" src="http://www.pluck.com/images/rss-pluck.gif"
height="17" width="91" border="0"></a>

<a href="http://www.rojo.com/add-subscription?resource=$rsslinku"><img
alt="Subscribe in Rojo" src="http://www.rojo.com/skins/static/images/add-to-rojo.gif"
height="17" width="52" border="0"></a>

<a href="http://www.bloglines.com/sub/$rsslink"><img
alt="Subscribe with Bloglines" src="http://www.bloglines.com/images/sub_modern5.gif"
height="15" width="80" border="0"></a>

<a href="http://fusion.google.com/add?feedurl=$rsslinku"><img
alt="Add to Google" src="http://buttons.googlesyndication.com/fusion/add.gif"
height="17" width="104" border="0"></a>
</p>
};

    print FMTOUT "<hr noshade=\"noshade\" size=\"1\">\n\n";

    my %r;
    while (my($key,$val) = each(%RDB))
    {
	next if $key =~ /^_/;

	if ($key =~ /^\d{4}$/ || $key eq "other")
	{
	    next unless $key eq $year;
	}

	$r{$key} = $val;
    }

    if (keys %r)
    {
	print FMTOUT "<h3>Reunion Info</h3>\n<ul>\n";
	foreach my $key (sort keys %r)
	{
	    my($refname,$title);

	    my($date,$html) = split(/\0/, $r{$key}, 2);

	    if ($key =~ /^\d+$/)
	    {
		$refname = "r$key";
		$title = "Class of $key";
	    }
	    else
	    {
		$refname = lc($key);
		$refname =~ s/[^\w]/_/g;
		$refname =~ s/_+/_/g;
		$refname =~ s/^_//;
		$refname =~ s/_$//;

		$title = $key;
	    }

	    my($long_date);
	    my($prefix) = "Past";
	    if ($date eq "TBA")
	    {
		$prefix = "Upcoming";
		$long_date = "Date To Be Announced";
	    }
	    else
	    {
		my($yr,$mon,$mday) = split(/\//, $date, 3);
		my $t = Time::Local::timelocal(59,59,23,$mday,$mon-1,$yr-1900);
		$long_date = POSIX::strftime("%A, %B %e, %Y", localtime($t));
		$prefix = "Upcoming" if ($t > time);
	    }

	    print FMTOUT "<li>$prefix:\n",
	    "<a href=\"", aid_util::config("master_path"),
	    "etc/reunions.html#$refname\">$title</a>\n($long_date)</li>\n";
	}
	print FMTOUT "</ul>\n<hr noshade=\"noshade\" size=\"1\">\n\n";
    }

    my @recent;
    foreach my $id (@ids)
    {
	my $recp = $DB->{$id};
#	next unless $recp->{"v"};

	if (aid_util::is_new($recp->{"u"}))
	{
	    push(@recent, $id);
	}
    }

    if (@recent)
    {
	print FMTOUT "<h3>New and Updated</h3>\n<ul>\n";
	foreach my $id (@recent)
	{
	    my $recp = $DB->{$id};
	    print FMTOUT "<li><a href=\"#id-$id\">", 
	    	aid_util::inorder_fullname($recp), "</a> ",
	    	aid_util::is_new_html($recp), " ",
	    	aid_util::caldate($recp->{"u"}), "\n";
	}
	print FMTOUT "</ul>\n<hr noshade=\"noshade\" size=\"1\">\n\n";
    }

    foreach my $id (@ids)
    {
	my $recp = $DB->{$id};
#	next unless $recp->{"v"};

	print FMTOUT aid_util::verbose_entry($recp);

	if ($opts{"d"})
	{
	    my $out2 = sprintf("%s%s/%06d.html",
			       aid_util::config("wwwdir"), "detail", $id);
	    my @st = stat($out2);
	    if (@st && $st[9] == $recp->{"u"}) {
		next;
	    }

	    open(FMTOUT2,">$out2.$$") || die "Can't open $out2.$$: $!\n";

	    my($affil,$len) = aid_util::affiliate($recp,0);
	    my $name = aid_util::inorder_fullname($recp);

	    print FMTOUT2 aid_util::common_html_hdr(-2, $name . $affil,
						    1, $recp->{"u"});
	    print FMTOUT2 aid_util::verbose_entry($recp,1,0,0,1);

	    if ($recp->{"v"})
	    {
		my $action = aid_util::config("message_cgi");
		my $hash = md5_hex($recp->{"e"});
		my $e = email_name($recp);
		$e .= " &lt;" . aid_util::protect_email($recp->{"e"}) . "&gt;";
		my $subject = aid_util::config("short_school") . " Alumni";
		my $name_affil = aid_util::html_entify_str($name . $affil);

		print FMTOUT2 <<_EOHTML_;
<p>&nbsp;</p>
<hr>
<a name="msg"></a>
<h2>Send a message to $name_affil</h2>
<p>
<form method="post" action="$action/post">
<input type="hidden" name="id" value="$id">
<input type="hidden" name="hash" value="$hash">
<table border="0" cellspacing="1" cellpadding="2" >
<tr><td align="right"><b>From:</b></td>
<td><input type="text" name="from" size="60" 
maxlength="128" value=""></td></tr>
<tr><td align="right"><b>To:</b></td>
<td>$e</td></tr>
<tr><td align="right"><b>Subject:</b></td>
<td><input type="text" name="subject" size="60" 
maxlength="80" value="$subject"></td></tr>
</table>
<textarea name="message" rows="20" cols="70">
</textarea>
<br><input type="submit" name="send" value="Send">
</form>
_EOHTML_
;
	    }

	    print FMTOUT2 aid_util::common_html_ftr(-2,$recp->{"u"});
	    close(FMTOUT2);
	    utime $recp->{"u"}, $recp->{"u"}, "$out2.$$";
	    rename("$out2.$$", $out2);
    	}
    }

    print FMTOUT aid_util::common_html_ftr(2,$time);
    close(FMTOUT);
    utime $time, $time, "$outFile.$$";
    rename("$outFile.$$", $outFile);

    my $fh = Symbol::gensym();
    $outFile = aid_util::config("wwwdir") . "class/${year}.xml";
    open($fh,">$outFile.$$") || die "Can't open $outFile.$$: $!\n";
    aid_util::print_rss_head($fh,$time,
			     aid_util::config("short_school")
			     . " Alumni: Class of $year",
			     "http://"
			     . aid_util::config("master_srv")
			     . aid_util::config("master_path")
			     . "class/${year}.html");

    my $n = 0;
    foreach my $id (sort { $DB->{$b}->{"u"} <=> $DB->{$a}->{"u"} } @ids)
    {
	last if ++$n > 10;
	my $recp = $DB->{$id};
	aid_util::print_rss_item($fh,$recp);
    }

    print $fh "</channel>\n</rss>\n";
    close($fh);
    utime $time, $time, "$outFile.$$";
    rename("$outFile.$$", $outFile);
}

print STDOUT "\n"
    unless $opts{"q"};

# index page
my $outFile = aid_util::config("wwwdir") . "class/index.html";
open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

my $time = time(); # TODO fix this
print FMTOUT aid_util::common_html_hdr(-2,"Graduating Classes",0,$time);

print FMTOUT "<p align=\"center\"><big>\n";
print FMTOUT aid_util::class_jump_bar("", ".html", \@years, 0);
print FMTOUT "</big></p>\n\n";

print FMTOUT aid_util::common_html_ftr(-2,$time);
close(FMTOUT);
utime $time, $time, $outFile;

# touch timestamp
my $now = time;
my $ts = $outFile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

exit(0);

sub email_name
{
    my($recp) = @_;
    my $name = $recp->{"gn"};
    $name .= " $recp->{'mi'}."
	if defined $recp->{"mi"} && $recp->{"mi"} ne "";
    $name .= " $recp->{'sn'}";
    $name .= " $recp->{'mn'}"
	if defined $recp->{"mn"} && $recp->{"mn"} ne "";
    $name =~ s/\"/\'/g;

    aid_util::html_entify_str($name);
}
