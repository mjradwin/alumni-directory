#!/usr/local/bin/perl -w

#
# does the html multi_class pages
# $Id: aid_multi_class_html,v 5.33 2003/07/14 15:32:47 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";
use DB_File::Lock;
use Time::Local;
use POSIX qw(strftime);

require 'aid_util.pl';
use Getopt::Std;

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hq] [-i <keys>] infile.db [reunions.db]
    -h        Display usage information.
    -q        Quiet.
    -d        Generate 'detail' pages for each individual.
    -i <keys> Incremental update only for list of keys.
";

getopts('hi:qd') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning
$opt_d = $opt_d;		# avoid warning

@incremental = ($opt_i ? split(/[,\s]+/, $opt_i) : ());

$dbmfile = shift;
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

my(%RDB);
if ($ARGV[0])
{
    $r_dbmfile = shift;
    tie(%RDB, 'DB_File::Lock', $r_dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
	or die "$r_dbmfile: $!\n";
}

die "corrupt/missing _years key!"
    unless defined $DB{'_years'} && $DB{'_years'} ne '';

@years = unpack("n*",$DB{'_years'});
push(@years, 'other') if defined $DB{'_other'} && $DB{'_other'} ne '';

%class_prev = ();
%class_next = ();
$prev = '';
foreach $year (@years)
{
    if ($prev ne '')
    {
	$class_next{$prev} = $year;
	$class_prev{$year} = $prev;
    }
    $prev = $year;
}

select(STDOUT); $| = 1;
foreach $year (@years)
{
    $key = "_t_${year}";
    if (@incremental)
    {
	next unless grep(/$key/, @incremental);
	print STDOUT "$year "
	    unless $opt_q;
    }
    else
    {
	print STDOUT "."
	    unless $opt_q;
    }

    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    $time = unpack("N",$DB{$key});

    $key = "_${year}";
    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    @ids = unpack("n*",$DB{$key});

    $title = ($year =~ /^\d+$/) ? "Class of $year" : "Faculty and Staff";
    $outFile = &aid_config('wwwdir') . "class/${year}.html";
    open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

    if ($#ids + 1 == 1)
    {
	$subtitle = '1 alumnus';
    }
    else
    {
	$subtitle = sprintf("%d alumni", $#ids + 1);
    }

    $extra_meta  = "\n<link rel=\"contents\" href=\"./\" title=\"Graduating Classes\">";
    $extra_meta .= "\n<link rel=\"prev\" href=\"$class_prev{$year}.html\" title=\"Class of $class_prev{$year}\">"
	if defined $class_prev{$year};

    if (defined $class_next{$year})
    {
	$extra_meta .=
	    "\n<link rel=\"next\" href=\"$class_next{$year}.html\" title=\"";
	$extra_meta .= (($class_next{$year} =~ /^\d+$/) ? 
			"Class of $class_next{$year}" : "Faculty and Staff");
	$extra_meta .= "\">";
    }

    print FMTOUT &aid_common_html_hdr(2,$title,1,$time,$subtitle,$extra_meta);
    print FMTOUT &aid_common_intro_para(0);
    print FMTOUT &aid_class_jump_bar('', '.html', *years, 1, $year);
    print FMTOUT "<hr noshade=\"noshade\" size=\"1\">\n\n";

    my(%r);
    my($key,$val);
    while (($key,$val) = each(%RDB))
    {
	next if $key =~ /^_/;

	if ($key =~ /^\d{4}$/ || $key eq 'other')
	{
	    next unless $key eq $year;
	}

#	my($date,$html) = split(/\0/, $val, 2);
#	my($yr,$mon,$mday) = split(/\//, $date, 3);
#	my($t) = &Time::Local::timelocal(59,59,23,$mday,$mon-1,$yr-1900,0,0,0);

#	if ($t > time)
#	{
	    $r{$key} = $val;
#	}
    }

    if (keys %r)
    {
	print FMTOUT "<h3>Reunion Info</h3>\n<ul>\n";
	foreach $key (sort keys %r)
	{
	    my($refname,$title);

	    my($date,$html) = split(/\0/, $r{$key}, 2);

	    if ($key =~ /^\d+$/)
	    {
		$refname = "r$key";
		$title = "Class of $key";
	    }
	    else
	    {
		$refname = lc($key);
		$refname =~ s/[^\w]/_/g;
		$refname =~ s/_+/_/g;
		$refname =~ s/^_//;
		$refname =~ s/_$//;

		$title = $key;
	    }

	    my($long_date);
	    my($prefix) = 'Past';
	    if ($date eq "TBA")
	    {
		$prefix = "Upcoming";
		$long_date = "Date To Be Announced";
	    }
	    else
	    {
		my($yr,$mon,$mday) = split(/\//, $date, 3);
		my $t = Time::Local::timelocal(59,59,23,$mday,$mon-1,$yr-1900);
		$long_date = POSIX::strftime("%A, %B %e, %Y", localtime($t));
		$prefix = 'Upcoming' if ($t > time);
	    }

	    print FMTOUT "<li>$prefix:\n",
	    "<a href=\"",  &main::aid_config('master_path'),
	    "etc/reunions.html#$refname\">$title</a>\n($long_date)</li>\n";
	}
	print FMTOUT "</ul>\n<hr noshade=\"noshade\" size=\"1\">\n\n";
    }

    my @recent;
    foreach $id (@ids)
    {
	%rec = &aid_db_unpack_rec($id,$DB{$id});
	next unless $rec{'v'};

	if (&aid_is_new($rec{'u'}))
	{
	    push(@recent, $id);
	}
    }
    if (@recent)
    {
	print FMTOUT "<h3>New and Updated</h3>\n<ul>\n";
	foreach $id (@recent)
	{
	    %rec = &aid_db_unpack_rec($id,$DB{$id});
	    print FMTOUT "<li><a href=\"#id-$id\">", 
	    	&aid_inorder_fullname(*rec), "</a> ",
	    	&aid_is_new_html(*rec), " ",
	    	&aid_caldate($rec{'u'}), "\n";
	}
	print FMTOUT "</ul>\n<hr noshade=\"noshade\" size=\"1\">\n\n";
    }

    foreach $id (@ids)
    {
	%rec = &aid_db_unpack_rec($id,$DB{$id});
	next unless $rec{'v'};

	print FMTOUT &aid_verbose_entry(*rec);

	if ($opt_d) {
	my $out2 = sprintf("%s%s/%06d.html",
			   &aid_config('wwwdir'), "detail", $id);
	open(FMTOUT2,">$out2") || die "Can't open $out2: $!\n";

	print FMTOUT2 &aid_common_html_hdr(-2,
					   &aid_inorder_fullname(*rec),
					   1,$rec{'u'},$title);
	print FMTOUT2 &aid_verbose_entry(*rec,1);
	print FMTOUT2 &aid_common_html_ftr(-2,$rec{'u'});
	close(FMTOUT2);
	utime $rec{'u'}, $rec{'u'}, $out2;
    	}
    }

    print FMTOUT &aid_common_html_ftr(2,$time);
    close(FMTOUT);
    utime $time, $time, $outFile;
}

die "corrupt/missing _t key!" unless defined $DB{'_t'} && $DB{'_t'} ne '';
$time = unpack("N",$DB{'_t'});
untie(%DB);
print STDOUT "\n"
    unless $opt_q;

# index page
$outFile = &aid_config('wwwdir') . "class/index.html";
open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

print FMTOUT &aid_common_html_hdr(-2,'Graduating Classes',0,$time);

print FMTOUT "<p align=\"center\"><big>\n";
print FMTOUT &aid_class_jump_bar('', '.html', *years, 0);
print FMTOUT "</big></p>\n\n";

print FMTOUT &aid_common_html_ftr(-2,$time);
close(FMTOUT);
utime $time, $time, $outFile;

# touch timestamp
$now = time;
$ts = $outFile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

untie(%RDB) if defined $r_dbmfile;
exit(0);
