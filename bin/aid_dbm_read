#!/usr/bin/perl -w

# $Id: aid_dbm_read,v 1.22 1999/05/19 01:36:09 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
push(@INC, $dirname);

require 'aid_util.pl';
require 'getopts.pl';
require 'ctime.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hofac] [-t adr | -u file | -d year] infile.db [key]
    -h        Display usage information.
    -o        Display old users (fresh < 6 months ago).
    -f        Display users whose upd time is within 2 weeks of creation time.
    -a        Display all valid, sorted by alpha.
    -c        Display all valid, sorted by class.
    -t adr    Write text address file to <adr>.
    -u file   Write url file to <file>.
    -d year   Display alumni from <year> that don't want reunion email.
";

&Getopts('hofact:u:d:') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning
$opt_c = $opt_c;		# avoid warning
$opt_a = $opt_a;		# avoid warning
$opt_f = $opt_f;		# avoid warning
$opt_o = $opt_o;		# avoid warning

$ARGV[0] =~ s/\.db$//;
die "can't open $ARGV[0].db\n" unless -r "$ARGV[0].db";

dbmopen(%DB, $ARGV[0], 0444);

if ($opt_t)
{
    open(DATA,">$opt_t") || die "can't open $opt_t: $!\n";

    # sort the numeric keys by id
    @ids = ();
    while (($key,$val) = each %DB)
    {
	push(@ids,$key) if $key =~ /^\d+$/;
    }

    foreach (sort { $a <=> $b } @ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});
	print DATA &aid_join(*rec);
	print DATA ';', &old_encode_base64($rec{'n'},'')
	    if ($rec{'n'} ne '');
	print DATA "\n";
    } 
    close(DATA);
}
elsif ($opt_u)
{
    open(DATA,">$opt_u") || die "can't open $opt_u: $!\n";

    # sort the numeric keys by id
    @ids = ();
    while (($key,$val) = each %DB)
    {
	push(@ids,$key) if $key =~ /^\d+$/;
    }

    foreach (sort { $a <=> $b } @ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});
	print DATA "http://", &aid_config('master_srv'),
	    &aid_config('confirm_cgi'), '?confirmed=1';
	while (($key,$val) = each %rec)
	{
	    print DATA '&', $key, '=', &aid_url_escape($val);
	}
	print DATA '&pe=', &aid_url_escape($rec{'e'}), "\n";
    } 
    close(DATA);
}
elsif ($opt_d)
{
    die "no _$opt_d key in $ARGV[0].db\n" unless defined $DB{"_$opt_d"};
    @ids = unpack("n*", $DB{"_$opt_d"});
    for (@ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'} == 1 && $rec{'r'} == 0;
	($affil,$i) = &aid_affiliate(*rec,0);
	print $rec{'id'}, ' - ', $rec{'sn'}, ', ', $rec{'gn'}, $affil, "\n";
    }
}
elsif (defined $ARGV[1])
{
    &display_key_val("\L$ARGV[1]\E",$DB{"\L$ARGV[1]\E"});
}
elsif ($opt_o)
{
    die "no _class key in $ARGV[0].db\n" unless defined $DB{'_class'};
    @ids = unpack("n*", $DB{'_class'});
    for (@ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'} == 1 &&
	    $rec{'q'} == 0 && $rec{'b'} == 0;
	next unless &aid_is_old($rec{'f'});
	($affil,$i) = &aid_affiliate(*rec,0);
	print $rec{'id'}, ' - ', $rec{'sn'}, ', ', $rec{'gn'}, $affil, "\n";
    }
}
elsif ($opt_f)
{
    die "no _class key in $ARGV[0].db\n" unless defined $DB{'_class'};
    @ids = unpack("n*", $DB{'_class'});
    for (@ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'};
	next if $rec{'u'} == $rec{'c'};
	next unless &aid_is_new($rec{'u'}) && &aid_is_new($rec{'c'});
	($affil,$i) = &aid_affiliate(*rec,0);
	print $rec{'id'}, ' - ', $rec{'sn'}, ', ', $rec{'gn'}, $affil, "\n";
    }
}
elsif ($opt_a)
{
    die "no _alpha key in $ARGV[0].db\n" unless defined $DB{'_alpha'};
    @ids = unpack("n*", $DB{'_alpha'});
    for (@ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'};
	($affil,$i) = &aid_affiliate(*rec,0);
	print $rec{'id'}, ' - ', $rec{'sn'}, ', ', $rec{'gn'}, $affil, "\n";
    }
}
elsif ($opt_c)
{
    die "no _class key in $ARGV[0].db\n" unless defined $DB{'_class'};
    @ids = unpack("n*", $DB{'_class'});
    for (@ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'};
	($affil,$i) = &aid_affiliate(*rec,0);
	print $rec{'id'}, ' - ', $rec{'sn'}, ', ', $rec{'gn'}, $affil, "\n";
    }
}
else
{
    while (($key,$val) = each %DB)
    {
	&display_key_val($key,$val);
    }
}

dbmclose(%DB);
exit 0;

sub display_key_val
{
    local($key,$val) = @_;
    local(*rec);

    if (! defined $val)
    {
	print "undefined key $key!\n";
	return 0;
    }

    if ($key =~ /^\d+$/)
    {
	%rec = &aid_db_unpack_rec($key,$val);
	print "record $key = ", &aid_join(*rec), "\n";
    }

    elsif ($key =~ /^_(www_)?(\d\d\d\d)$/)
    {
	print "year ", (defined $1 ? $1 : ''), $2,
	      " = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_(www_)?other$/)
    {
	print "year ", (defined $1 ? $1 : ''), 'other',
	      " = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_(www_)?years$/)
    {
	print "list ", (defined $1 ? $1 : ''), 'years',
	      " = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_class$/)
    {
	print "list class = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_alpha$/)
    {
	print "list alpha = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_a_(\w)$/)
    {
	print "list alpha $1 = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_created$/)
    {
	print "created = ", &ctime(unpack("N", $val));
    }

    elsif ($key =~ /^_t(_[^_]+)?$/)
    {
	print "time", (defined $1 ? $1 : ''), 
	  " = ", &ctime(unpack("N", $val));
    }

    elsif ($key =~ /\@/)
    {
	print "email $key = ", unpack("n*", $val), "\n";
    }

    else
    {
	print "don't know how to interpret key $key!\n";
    }

    1;
}
