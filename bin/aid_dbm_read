#!/usr/local/bin/perl -w

# $Id: aid_dbm_read,v 6.1 2003/08/25 04:10:32 mradwin Exp mradwin $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use FindBin;
use lib $FindBin::Bin;
use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";

use DB_File::Lock;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hofacgi] [-u file | -I file | -d year] infile.db [key]
    -h        Display usage information.
    -i        Just print userids (no extra info).
    -g        Display goners candidates (bounces >= 6 months ago).
    -o        Display old users (last mailing > 6 months ago).
    -f        Display users whose upd time is within 2 weeks of creation time.
    -a        Display all valid, sorted by alpha.
    -c        Display all valid, sorted by class.
    -u file   Write url file to <file>.
    -I file   Write .ini file to <file>.
    -d year   Display alumni from <year> that don't want reunion email.
";

getopts('hofacu:d:giI:') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";

die "$0: Too many mutually-exclusive options\n$usage\n"
    if (($opt_c ? 1 : 0) + ($opt_a ? 1 : 0) + ($opt_u ? 1 : 0) +
	($opt_d ? 1 : 0) + ($opt_g ? 1 : 0) + ($opt_I ? 1 : 0) +
	($opt_f ? 1 : 0) + ($opt_o ? 1 : 0)) > 1;

$dbmfile = shift;
my(%DB);
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

if ($opt_u)
{
    open(DATA,">$opt_u") || die "can't open $opt_u: $!\n";

    # sort the numeric keys by id
    @ids = ();
    while (my($key,$val) = each %DB)
    {
	push(@ids,$key) if $key =~ /^\d+$/;
    }

    foreach (sort { $a <=> $b } @ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});
	print DATA
	    "http://", aid_util::config('master_srv'),
	    aid_util::config('confirm_cgi'), '?confirmed=1&', 
 	    aid_util::ampersand_join(\%rec),
	    '&pe=', aid_util::url_escape($rec{'eo'}), "\n";
    } 
    close(DATA);
}
elsif ($opt_I)
{
    open(DATA,">$opt_I") || die "can't open $opt_I: $!\n";

    # sort the numeric keys by id
    @ids = ();
    while (my($key,$val) = each %DB)
    {
	push(@ids,$key) if $key =~ /^\d+$/;
    }

    foreach (sort { $a <=> $b } @ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});
	printf DATA "[id%06d]\n", $rec{'id'};

	foreach (@aid_edit_field_names)
	{
	    print DATA $_, '=', $rec{$_}, "\n";
	}

	print DATA 'n=', aid_util::url_escape($rec{'n'}), "\n\n";
    } 
    close(DATA);
}
elsif ($opt_d)
{
    die "corrupt/missing _$opt_d key in $dbmfile\n"
	unless defined $DB{"_$opt_d"} && $DB{"_$opt_d"} ne '';
    @ids = unpack("n*", $DB{"_$opt_d"});
    for (@ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'} == 1 && $rec{'r'} == 0;

	print $rec{'id'}, ' ';
	next if $opt_i;
	print "- $rec{'e'} - no email\n";
    }
}
elsif (defined $ARGV[0])
{
    $keyname = shift;
    $keyname = lc($keyname);
    &display_key_val($keyname,$DB{$keyname});
}
elsif ($opt_o)
{
    die "corrupt/missing _class key in $dbmfile\n"
	unless defined $DB{'_class'} && $DB{'_class'} ne '';
    @ids = unpack("n*", $DB{'_class'});
    for (@ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'} == 1 && $rec{'q'} == 0;
	next unless aid_util::is_old($rec{'lm'});

	print $rec{'id'}, ' ';
	next if $opt_i;
	print "- $rec{'e'} - last_mail ", aid_util::caldate($rec{'lm'});
	print " - bounce ", aid_util::caldate($rec{'b'}) if $rec{'b'} ne '0';
	print "\n";
    }
}
elsif ($opt_g)
{
    while (my($key,$val) = each(%DB))
    {
	next unless $key =~ /^\d+$/;
	my %rec = aid_util::db_unpack_rec($key,$val);

	next unless $rec{'v'};
	next if $rec{'b'} eq '0';
	next unless $rec{'b'} < (time - (177 * 24 * 60 * 60));
	next unless $rec{'f'} > $rec{'b'};

	print $rec{'id'}, ' ';
	next if $opt_i;
	print "- $rec{'e'} - bounce ", aid_util::caldate($rec{'b'}),
   	      " - fresh ", aid_util::caldate($rec{'f'}), "\n";
    }
}
elsif ($opt_f)
{
    die "corrupt/missing _class key in $dbmfile\n"
	unless defined $DB{'_class'} && $DB{'_class'} ne '';
    @ids = unpack("n*", $DB{'_class'});
    for (@ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'};
	next if $rec{'u'} == $rec{'c'};
	next unless aid_util::is_new($rec{'u'}) && aid_util::is_new($rec{'c'});

	print $rec{'id'}, ' ';
	next if $opt_i;
	print "- $rec{'e'} - create ", aid_util::caldate($rec{'c'}),
   	      " - update ", aid_util::caldate($rec{'u'}), "\n";
    }
}
elsif ($opt_a)
{
    die "corrupt/missing _alpha key in $dbmfile\n"
	unless defined $DB{'_alpha'} && $DB{'_alpha'} ne '';
    @ids = unpack("n*", $DB{'_alpha'});
    for (@ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'};

	($affil,$i) = aid_util::affiliate(\%rec,0);
	print $rec{'id'}, ' ';
	next if $opt_i;
	print "- $rec{'e'} - ", $rec{'sn'}, ', ', $rec{'gn'}, $affil, "\n";
    }
}
elsif ($opt_c)
{
    die "corrupt/missing _class key in $dbmfile\n"
	unless defined $DB{'_class'} && $DB{'_class'} ne '';
    @ids = unpack("n*", $DB{'_class'});
    for (@ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});
	next unless $rec{'v'};

	($affil,$i) = aid_util::affiliate(\%rec,0);
	print $rec{'id'}, ' ';
	next if $opt_i;
	print "- $rec{'e'} - ", $rec{'sn'}, ', ', $rec{'gn'}, $affil, "\n";
    }
}
else
{
    while (my($key,$val) = each %DB)
    {
	&display_key_val($key,$val);
    }
}

print "\n" if $opt_i;

untie(%DB);

exit 0;

sub display_key_val
{
    my($key,$val) = @_;
    my %rec;

    if (! defined $val)
    {
	print "undefined key $key!\n";
	return 0;
    }

    if ($key =~ /^\d+$/)
    {
	%rec = aid_util::db_unpack_rec($key,$val);
	print "record $key = ", aid_util::ampersand_join(\%rec), "\n";
    }

    elsif ($key =~ /^_(www_)?(\d\d\d\d)$/)
    {
	print "year ", (defined $1 ? $1 : ''), $2,
	      " = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_(www_)?other$/)
    {
	print "year ", (defined $1 ? $1 : ''), 'other',
	      " = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_(www_)?years$/)
    {
	print "list ", (defined $1 ? $1 : ''), 'years',
	      " = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_class$/)
    {
	print "list class = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_alpha$/)
    {
	print "list alpha = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_a_(\w)$/)
    {
	print "list alpha $1 = ", join(',', unpack("n*", $val)), "\n";
    }

    elsif ($key =~ /^_created$/)
    {
	print "created = ", scalar(localtime(unpack("N", $val)));
    }

    elsif ($key =~ /^_nextid$/)
    {
	print "nextid = ", $val, "\n";
    }

    elsif ($key =~ /^_t(_[^_]+)?$/)
    {
	$val = unpack("N", $val);
	print "time", (defined $1 ? $1 : ''), " = ", 
	  $val ? scalar(localtime($val)) : "0\n";
    }

    elsif ($key =~ /\@/)
    {
	print "email $key = ", unpack("n*", $val), "\n";
    }

    else
    {
	print "don't know how to interpret key $key!\n";
    }

    1;
}

# avoid warnings
if ($^W && 0)
{
    $a = $b;
    $opt_h = $opt_h;		# avoid warning
    $aid_edit_field_names[0] = '';
}
