#!/usr/local/bin/perl -w

# $Id: aid_reunion_create,v 7.1 2006/02/24 00:13:15 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,^(.+)/[^/]+,) {
    unshift @INC, $1;
  } else {
    unshift @INC, '.';
  }
}

use strict;
use Getopt::Std;
use aid_util ();
use DBI ();

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-h] reunions.dat
    -h        Display usage information.
    -v        Verbose
";

my %opts;
getopts("hv", \%opts) || die "$usage\n";
$opts{"h"} && die "$usage\n";
@ARGV == 1 || die "$usage\n";

my $infile = shift;
open(R,$infile) || die "$0: $infile: $!\n";

my $connected = 0;
my $dbname = aid_util::config("dbname");
my $dbhost = aid_util::config("dbhost");
my $dsn = "DBI:mysql:database=$dbname;host=$dbhost";
my $dbh;

while(<R>)
{
    next unless /^begin:\s*(.+)\s*$/i;

    my $class = $1;
    my $date = "";
    my $html = "";
    REUNION: while(<R>)
    {
	if (/^end:?\s*$/i)
	{
	    db_store($class, $date, $html);
	    last REUNION;
	}

	if (/^date:\s*(.+)\s*$/i)
	{
	    $date = $1;
	    die "$infile:$.: bad date $date; aborting\n"
		if ($date !~ m,^\d{4}/\d{2}/\d{2}$, && $date ne "TBA");
	}
	elsif (/^html:/i)
	{
	    s/^html://i;
	    $html .= $_;
	    while(<R>)
	    {
		if (/^end:?\s*$/i)
		{
		    db_store($class, $date, $html);
		    last REUNION;
		}

		$html .= $_;
	    }
	}
    }
}

$dbh->disconnect if $connected;
close(R);
exit(0);

sub db_store {
    my($class,$date,$html) = @_;

    return 0 if $date eq "" || $html eq "";

    if (!$connected) {
	db_connect();
	my $sql = qq{TRUNCATE TABLE $dbname.aid_reunion};
	print $sql, "\n" if $opts{"v"};
	$dbh->do($sql) or die $dbh->errstr;
    }

    if ($date eq "TBA") {
	$date = "NULL";
    } else {
	$date =~ s,/,-,g;
	$date = $dbh->quote($date);
    }

    $class = $dbh->quote($class);
    $html = $dbh->quote($html);

    my $sql = qq{REPLACE INTO $dbname.aid_reunion
		 (reunion_gradclass,reunion_date,reunion_text)
		 VALUES ($class,$date,$html)};

    print $sql, "\n" if $opts{"v"};

    $dbh->do($sql) or die $dbh->errstr;
}

sub db_connect {
    $dbh = DBI->connect($dsn,
			aid_util::config("dbuser"),
			aid_util::config("dbpass"))
	or die $DBI::errstr;
    $connected = 1;
}
