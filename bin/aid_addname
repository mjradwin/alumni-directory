#!/usr/bin/perl -w

# $Id: aid_addname,v 5.5 1999/06/02 16:46:12 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
push(@INC, $dirname);

require 'getopts.pl';
require 'aid_util.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hwm] [mailspoolfile]
    -h        Display usage information.
    -w        Don't mail welcome messages.
    -m        Manual operation (don't rebuild or mail welcome messages).
";

&Getopts('hmw') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning
$opt_w = $opt_w;                # avoid warning

$sub_beg_str = &aid_config('sub_beg_str');
$sub_end_str = &aid_config('sub_end_str');
$note_beg_str = &aid_config('note_beg_str');
$note_end_str = &aid_config('note_end_str');

$dbmfile = &aid_config('aiddir') . "data/working.db";
$dbmfile =~ s/\.db$//;

$make = &aid_config('make');
-x $make || die "$0: $make is not executable!";

@new_ids = ();
@upd_ids = ();
@mod_keys = ();

&readspool(($ARGV[0]) ? $ARGV[0] : &aid_config('spoolfile'));
&rebuild() unless $opt_m;
&mail_welcome() unless $opt_m || $opt_w;

print STDOUT "done!\n";
exit(0);

sub readspool
{
    local($spoolFile) = @_;
    local($_);
    local($logFile,*SPOOL,$newsp,$browserLog,$success,$state);

    $success = 0;
    $browserLog = &aid_config('aiddir') . "logs/browsers.log";
    open(SPOOL, $spoolFile) || die "$0: can't open $spoolFile: $!\n";
    print STDOUT "reading spool...\n";
    while(<SPOOL>)
    {
	$state = 0;
	next unless /^$sub_beg_str/o;

	$state = 1;
	%rec = ();
	$newsp = 0;
	while(<SPOOL>)
	{
	    if (/^$sub_end_str/o)
	    {
		$state = 2;
		last;
	    }

	    if (/^$note_beg_str/o)
	    {
		$note = '';
		$maxlen = 0;
		while(<SPOOL>)
		{
		    last if /^$note_end_str/o;
		    $maxlen = length($_) if (length($_) > $maxlen);
		    $note .= $_;
		}
		$newsp = 1;	# they had a What's New? note
	    }
	    else
	    {
		chop;
		warn "$0: bad spool line $_\n" unless /^.+=.*$/;
		($key,$val) = split(/=/, $_, 2);
		$rec{$key} = $val;
	    }
	}

	if ($state != 2)
	{
	    warn "corrupt mailspool!  attempting to recover...\n";
	    next;
	}

	if ($newsp)
	{
	    $rec{'n'} = $note;
	}
	else
	{
	    $rec{'n'} = '';
	}
	$rec{'s'} = '';		# temporary hack

	&addname(*rec) || die "$0: can't add $rec{'id'} $rec{'e'}!\n";
	print STDOUT $note if $newsp;

	if ($rec{'browser'} !~ /^\s*$/)
	{
	    open(BROWSERLOG,">>$browserLog") || die "$0: $browserLog: $!\n";
	    print BROWSERLOG time, " - $rec{'id'} - $rec{'browser'}\n";
	    close(BROWSERLOG);
	}

	$success = 1;
    }
    close(SPOOL);

    if ($success)
    {
	local(%DB);
	die "can't open ${dbmfile}.db for reading/writing\n"
	    unless -r "${dbmfile}.db" && -w "${dbmfile}.db";

	dbmopen(%DB,$dbmfile,0644);
	@mod_keys = &aid_rebuild_secondary_keys(*DB,0);
	dbmclose(%DB);
    }

    1;
}


sub rebuild
{
    local($cmd);

    chdir &aid_config('aiddir') || die "$0: can't chdir: $!\n";

    $cmd = $make . ' MOD_IDS="' . join(' ', @new_ids, @upd_ids) . '"' .
	' MOD_KEYS="' . join(' ', @mod_keys) . '"';
    print STDOUT "cd ", &aid_config('aiddir'), "; $cmd\n";

    system $cmd || die "$0: failed to run $cmd: $!\n";
}

sub mail_welcome
{
    local($cmd);

    chdir &aid_config('aiddir') || die "$0: can't chdir: $!\n";

    print STDERR "mailing...";
    if (@new_ids)
    {
	print STDERR ' new(', join(' ', @new_ids), ')';
	$cmd = "./bin/aid_welcome ${dbmfile}.db " . join(' ', @new_ids);
	system $cmd || die "$0: failed to run $cmd: $!\n";
    }

    if (@upd_ids)
    {
	print STDERR ' upd(', join(' ', @upd_ids), ')';
	$cmd = "./bin/aid_welcome -u ${dbmfile}.db " . join(' ', @upd_ids);
	system $cmd || die "$0: failed to run $cmd: $!\n";
    }

    print STDERR "\n";
}


sub addname
{
    local(*rec) = @_;
    local(%DB,$logFile,%oldrec,*LOG);
    local($key_name,$key_email,%id_by_email,%id_by_name,$email);

    %aid_util'aid_aliases = ();   #'# reset global alias hash repository 

    $logFile = &aid_config('aiddir') . "logs/additions.log";

    die "can't open ${dbmfile}.db for reading/writing\n"
	unless -r "${dbmfile}.db" && -w "${dbmfile}.db";
    dbmopen(%DB,$dbmfile,0644);

    while (($key,$val) = each %DB)
    {
	next unless $key =~ /^\d+$/;
	%oldrec = &aid_db_unpack_rec($key,$val);

	$key_email = "\L$oldrec{'e'}\E" .
	    &aid_mangle("\L$oldrec{'sn'}\E") .
	    &aid_mangle("\L$oldrec{'gn'}\E");
	$key_name = &aid_mangle("\L$oldrec{'sn'}\E") .
	    &aid_mangle("\L$oldrec{'gn'}\E") . $oldrec{'yr'};
	$id_by_email{$key_email} = $oldrec{'id'};
	$id_by_name{$key_name} = $oldrec{'id'};

	&aid_generate_alias(*oldrec);
    }
    undef(%oldrec);

    open(LOG, ">>$logFile") || die "$0: can't open $logFile: $!\n";
    select(LOG); $| = 1; select(STDOUT);

    # assign the double-submit newbies the same id if we've seen their
    # email address before
    if ($rec{'id'} == -1)
    {
	$key_email = "\L$rec{'e'}\E" .
	    &aid_mangle("\L$rec{'sn'}\E") . &aid_mangle("\L$rec{'gn'}\E");
	$key_name = &aid_mangle("\L$rec{'sn'}\E") .
	    &aid_mangle("\L$rec{'gn'}\E") . $rec{'yr'};

	if (defined $id_by_email{$key_email})
	{
	    $rec{'id'} = $id_by_email{$key_email};
	    %oldrec = &aid_db_unpack_rec($rec{'id'}, $DB{$rec{'id'}});

	    $rec{'c'} = $oldrec{'c'};
	}
	elsif (defined $id_by_name{$key_name})
	{
	    $rec{'id'} = $id_by_name{$key_name};
	    %oldrec = &aid_db_unpack_rec($rec{'id'}, $DB{$rec{'id'}});

	    $rec{'c'} = $oldrec{'c'};
	    $rec{'eu'} = $rec{'u'} if
		$oldrec{'e'} ne $rec{'e'};
	    $rec{'eo'} = $oldrec{'e'} if
		$oldrec{'e'} ne $rec{'e'};
	}
	undef(%oldrec);
    }

    if ($rec{'id'} == -1)
    {
	$rec{'id'} = $DB{'_nextid'};
	$DB{'_nextid'} = $DB{'_nextid'} + 1;

	push(@new_ids, $rec{'id'});
	print     "new - ";
	print LOG "new - ";
    }
    elsif (defined $DB{$rec{'id'}})
    {
	%oldrec = &aid_db_unpack_rec($rec{'id'},$DB{$rec{'id'}});

	push(@upd_ids, $rec{'id'})
	     unless ((grep(/$rec{'id'}/, @new_ids)) ||
		     (grep(/$rec{'id'}/, @upd_ids)));

	if ($rec{'e'} ne $oldrec{'e'})
	{
	    $email = $oldrec{'e'};
	    delete $DB{"\L$email\E"};
	}

	print     "upd ", $oldrec{'e'}, " ";
	print LOG "upd ", $oldrec{'e'}, " ";
	undef(%oldrec);
    }
    else
    {
	warn "$rec{'id'} doesn't appear to be new, but not in DB.\n";
	push(@new_ids, $rec{'id'});
	print     "new - ";
	print LOG "new - ";
    }

    $rec{'a'} = &aid_generate_alias(*rec)
	unless defined $rec{'a'} && $rec{'a'} ne '';

    $DB{$rec{'id'}} = &aid_db_pack_rec(*rec);
    $email = $rec{'e'};
    $DB{"\L$email\E"} = pack('n', $rec{'id'});
    dbmclose(%DB);

    local($joined) = &aid_ampersand_join(*rec);
    print     $joined, "\n";
    print LOG $joined, "\n";
    close(LOG);

    $rec{'id'};
}


if ($^W && 0)
{
    %aid_util'aid_aliases = ();   #'# reset global alias hash repository 
}
