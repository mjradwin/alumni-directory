#!/usr/local/bin/perl -w

# $Id: aid_addname,v 7.3 2006/03/21 16:57:21 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, ".";
  }
}

use strict;
use Getopt::Std ();
use aid_util;
use DBI ();

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hwm]
    -h        Display usage information.
    -w        Don't mail welcome messages.
    -m        Manual operation (don't rebuild or mail welcome messages).
    -q        Quiet mode (no error messages).
";

my %opts;
Getopt::Std::getopts("hmwq", \%opts) || die "$usage\n";
$opts{"h"} && die "$usage\n";

my $make = aid_util::config("make");
-x $make || die "$0: $make is not executable!";
$make .= " -s QUIET=-q" if $opts{"q"};

select(STDOUT); $| = 1;

my %new_ids;
my %upd_ids;

my %verified;
my $timestamp = 0;
my $dbh = aid_util::db_connect();
if (!$dbh) {
    if ($opts{"q"}) {
	exit(1);
    } else {
	die $DBI::errstr;
    }
}
my $DB;

my $status = readspool();
if (!$opts{"m"} && $status)
{
    if ($timestamp) {
	my $ts = aid_util::config("aiddir") . "data/db.timestamp";
	open(TS,">$ts") && close(TS);
	utime $timestamp, $timestamp, $ts;
    }

    rebuild();
    mail_welcome() unless $opts{"w"};
}

$dbh->disconnect;
exit(0);

sub readspool
{
    my $sql = qq{
SELECT
verify_code,verify_alumnus_id,UNIX_TIMESTAMP(verify_confirmed)
FROM aid_verify
WHERE verify_confirmed IS NOT NULL
AND verify_published IS NULL
};
    my $sth = $dbh->prepare($sql);
    $sth->execute or die $sth->errstr;
    my $count = 0;
    while (my($code,$id,$time) = $sth->fetchrow_array) {
	$verified{$id} = $code;
	$timestamp = $time if $time > $timestamp;
	$count++;
    }

    return 0 if $count == 0;

    # set global var
    $DB = aid_util::load_records($dbh, "");

    foreach my $id (keys %verified)
    {
	my $recp = $DB->{$id};
	if ($recp)
	{
	    print STDOUT "addname - ", aid_util::inorder_fullname($recp), "\n"
		unless $opts{"q"};

	    addname($recp)
		|| die "$0: can't add $recp->{'id'} $recp->{'e'}";

	    print STDOUT "OK $verified{$id} - ",
	    aid_util::inorder_fullname($recp), "\n"
		unless $opts{"q"};
	}
	else
	{
	    warn "key $verified{$id} was verified, but $id is missing from aid_alumnus table";
#	    last;
	}
    }

    $count;
}


sub rebuild
{
    sleep(5);	# dreamhost has problems with filesystem sync

    chdir aid_util::config("aiddir") || die "$0: can't chdir: $!\n";

    my $cmd = $make .
	' MOD_IDS="' . join(" ", keys %new_ids, keys %upd_ids) . '"';
    print STDOUT "cd ", aid_util::config("aiddir"), "; $cmd\n"
	unless $opts{"q"};

    system $cmd;
    aid_util::die_if_failure();

    my $sql = "UPDATE aid_verify SET verify_published = NOW()"
	. " WHERE verify_code = ?";
    my $sth = $dbh->prepare($sql);

    foreach my $id (keys %new_ids, keys %upd_ids)
    {
	my $code = $verified{$id};
	next unless $code;
	$sth->execute($code) or die $sth->errstr;
    }
}

sub mail_welcome
{
    my $cmd;

    chdir aid_util::config("aiddir") || die "$0: can't chdir: $!\n";

    if (keys %new_ids)
    {
	$cmd = "./bin/aid_welcome " . join(" ", keys %new_ids);
	print STDOUT $cmd, "\n"
	    unless $opts{"q"};
	system $cmd;
	aid_util::die_if_failure();
    }

    if (keys %upd_ids)
    {
	$cmd = "./bin/aid_welcome -u " . join(" ", keys %upd_ids);
	print STDOUT $cmd, "\n"
	    unless $opts{"q"};
	system $cmd;
	aid_util::die_if_failure();
    }
}


sub addname
{
    my($recp) = @_;

    my $logFile = aid_util::config("aiddir") . "logs/additions.log";
    my $LOG;
    open($LOG, ">>$logFile") || die "$0: can't open $logFile: $!\n";
    select($LOG); $| = 1; select(STDOUT);

    my $sql = "SELECT alumnus_old_id FROM aid_alumnus WHERE alumnus_id = ?";
    my $sth = $dbh->prepare($sql);
    $sth->execute($recp->{"id"}) or die $sth->errstr;
    my($old_id) = $sth->fetchrow_array;

    if (defined $old_id)
    {
	$upd_ids{$recp->{"id"}} = 1;
	print     "upd ", $recp->{"e"}, " "
	    unless $opts{"q"};
	print $LOG "upd ", $recp->{"e"}, " ";
    }
    else
    {
	$new_ids{$recp->{"id"}} = 1;
	print     "new - "
	    unless $opts{"q"};
	print $LOG "new - ";
    }

    my $joined = aid_util::ampersand_join($recp);
    print     $joined, "\n"
	unless $opts{"q"};
    print $LOG $joined, "\n";
    close($LOG);

    $recp->{"id"};
}
