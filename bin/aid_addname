#!/usr/local/bin/perl -w

# $Id: aid_addname,v 5.33 2003/03/14 23:30:26 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

use Getopt::Std;
use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";
use DB_File::Lock;
require 'aid_util.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hwm]
    -h        Display usage information.
    -w        Don't mail welcome messages.
    -m        Manual operation (don't rebuild or mail welcome messages).
    -q        Quiet mode (no error messages).
";

getopts('hmwq') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning
$opt_w = $opt_w;                # avoid warning
$opt_m = $opt_m;                # avoid warning

$dbmfile = &aid_config('aiddir') . "data/working.db";

$make = &aid_config('make');
-x $make || die "$0: $make is not executable!";
$make .= " -s QUIET=-q" if $opt_q;

my @new_ids = ();
my @upd_ids = ();
my @mod_keys = ();

select(STDOUT); $| = 1;
$status = readspool();
if (!$opt_m && $status)
{
    rebuild();
    mail_welcome() unless $opt_w;
}

exit(0);

sub readspool
{
    my($success) = 0;

    my($staging) = &aid_config('staging');
    die "$staging: $!\n" unless -r $staging;

    my(%DBS);
    tie(%DBS, 'DB_File::Lock', $staging, O_CREAT|O_RDWR, 0644,
	$DB_HASH, 'write')
	or die "$staging: $!\n";

    my(@vals) = ();
    if (defined $DBS{'_verified'})
    {
	my(@key8s) = split(/\0/, $DBS{'_verified'});

	foreach $key8 (@key8s)
	{
	    print STDOUT "checking key8 $key8\n"
		unless $opt_q;

	    if (defined $DBS{$key8} && $DBS{$key8} =~ /^-?\d+\0/)
	    {
		my($id,$packed) = split(/\0/, $DBS{$key8}, 2);

		push(@vals, $DBS{$key8});
		$DBS{$key8} = "p\0";

		%rec = &aid_db_unpack_rec($id,$packed);

		print STDOUT "OK key8 $key8 - ",
		&aid_inorder_fullname(*rec), "\n"
		    unless $opt_q;

		if ($id != -1 && defined $DBS{$id})
		{
		    delete $DBS{$id};
		}
		elsif ($id == -1 && defined $DBS{"\L$rec{'e'}\E"})
		{
		    delete $DBS{"\L$rec{'e'}\E"};
		}

		undef(%rec);
	    }
	    else
	    {
		warn "key8 $key8 was _verified, but invalid in staging.db\n";
	    }
	}

	delete $DBS{'_verified'};
    }

    untie(%DBS);

    my($val);
    foreach $val (@vals)
    {
	my($id,$packed) = split(/\0/, $val, 2);
	%rec = &aid_db_unpack_rec($id,$packed);
	$rec{'f'} = $rec{'u'} = time;

	print STDOUT "addname - ", &aid_inorder_fullname(*rec), "\n"
	    unless $opt_q;

	addname(*rec) || die "$0: can't add $rec{'id'} $rec{'e'}!\n";
	$success = 1;
    }

    if ($success)
    {
	my(%DB);
	tie(%DB, 'DB_File::Lock', $dbmfile, O_CREAT|O_RDWR, 0644,
	    $DB_HASH, 'write')
	    or die "$dbmfile: $!\n";

	@mod_keys = aid_rebuild_secondary_keys(\%DB,$opt_q,0,1);

	untie(%DB);
    }

    $success;
}


sub rebuild
{
    local($cmd);

    chdir &aid_config('aiddir') || die "$0: can't chdir: $!\n";

    $cmd = $make . ' MOD_IDS="' . join(' ', @new_ids, @upd_ids) . '"' .
	' MOD_KEYS="' . join(' ', @mod_keys) . '"';
    print STDOUT "cd ", &aid_config('aiddir'), "; $cmd\n"
	unless $opt_q;

    system $cmd;
    &aid_die_if_failure();
}

sub mail_welcome
{
    local($cmd);

    chdir &aid_config('aiddir') || die "$0: can't chdir: $!\n";

    if (@new_ids)
    {
	$cmd = "./bin/aid_welcome $dbmfile " . join(' ', @new_ids);
	print STDOUT $cmd, "\n"
	    unless $opt_q;
	system $cmd;
	&aid_die_if_failure();
    }

    if (@upd_ids)
    {
	$cmd = "./bin/aid_welcome -u $dbmfile " . join(' ', @upd_ids);
	print STDOUT $cmd, "\n"
	    unless $opt_q;
	system $cmd;
	&aid_die_if_failure();
    }
}


sub addname
{
    local(*rec) = @_;

    local(*LOG,%oldrec);
    my($logFile,$key_name,$key_email,%id_by_email,%id_by_name,$email);

    %aid_util::aid_aliases = ();   # reset global alias hash repository 

    $logFile = &aid_config('aiddir') . "logs/additions.log";

    my(%DB);
    tie(%DB, 'DB_File::Lock', $dbmfile, O_CREAT|O_RDWR, 0644, $DB_HASH, 'write')
	or die "$dbmfile: $!\n";

    while (($key,$val) = each %DB)
    {
	next unless $key =~ /^\d+$/;
	%oldrec = &aid_db_unpack_rec($key,$val);

	$key_email = "\L$oldrec{'e'}\E" .
	    &aid_mangle("\L$oldrec{'sn'}\E") .
	    &aid_mangle("\L$oldrec{'gn'}\E");
	$key_name = &aid_mangle("\L$oldrec{'sn'}\E") .
	    &aid_mangle("\L$oldrec{'gn'}\E") . $oldrec{'yr'};
	$id_by_email{$key_email} = $oldrec{'id'};
	$id_by_name{$key_name} = $oldrec{'id'};

	&aid_generate_alias(*oldrec);
    }
    undef(%oldrec);

    open(LOG, ">>$logFile") || die "$0: can't open $logFile: $!\n";
    select(LOG); $| = 1; select(STDOUT);

    # assign the double-submit newbies the same id if we've seen their
    # email address before
    if ($rec{'id'} == -1)
    {
	$key_email = "\L$rec{'e'}\E" .
	    &aid_mangle("\L$rec{'sn'}\E") . &aid_mangle("\L$rec{'gn'}\E");
	$key_name = &aid_mangle("\L$rec{'sn'}\E") .
	    &aid_mangle("\L$rec{'gn'}\E") . $rec{'yr'};

	if (defined $id_by_email{$key_email})
	{
	    $rec{'id'} = $id_by_email{$key_email};
	    %oldrec = &aid_db_unpack_rec($rec{'id'}, $DB{$rec{'id'}});

	    $rec{'c'} = $oldrec{'c'};
	}
	elsif (defined $id_by_name{$key_name})
	{
	    $rec{'id'} = $id_by_name{$key_name};
	    %oldrec = &aid_db_unpack_rec($rec{'id'}, $DB{$rec{'id'}});

	    $rec{'c'} = $oldrec{'c'};
	    $rec{'eu'} = $rec{'u'} if
		$oldrec{'e'} ne $rec{'e'};
	    $rec{'eo'} = $oldrec{'e'} if
		$oldrec{'e'} ne $rec{'e'};
	}
	undef(%oldrec);
    }

    if ($rec{'id'} == -1)
    {
	$rec{'id'} = $DB{'_nextid'};
	$DB{'_nextid'} = $DB{'_nextid'} + 1;

	push(@new_ids, $rec{'id'});
	print     "new - "
	    unless $opt_q;
	print LOG "new - ";
    }
    elsif (defined $DB{$rec{'id'}})
    {
	%oldrec = &aid_db_unpack_rec($rec{'id'},$DB{$rec{'id'}});

	push(@upd_ids, $rec{'id'})
	     unless ((grep(/\b$rec{'id'}\b/, @new_ids)) ||
		     (grep(/\b$rec{'id'}\b/, @upd_ids)));

	if ($rec{'e'} ne $oldrec{'e'})
	{
	    $email = $oldrec{'e'};
	    delete $DB{"\L$email\E"};
	}

	print     "upd ", $oldrec{'e'}, " "
	    unless $opt_q;
	print LOG "upd ", $oldrec{'e'}, " ";
	undef(%oldrec);
    }
    else
    {
	warn "$rec{'id'} doesn't appear to be new, but not in DB.\n";
	push(@new_ids, $rec{'id'});
	print     "new - "
	    unless $opt_q;
	print LOG "new - ";
    }

    $rec{'a'} = &aid_generate_alias(*rec)
	unless defined $rec{'a'} && $rec{'a'} ne '';

    $DB{$rec{'id'}} = &aid_db_pack_rec(*rec);
    $email = $rec{'e'};
    $DB{"\L$email\E"} = pack('n', $rec{'id'});

    untie(%DB);

    local($joined) = &aid_ampersand_join(*rec);
    print     $joined, "\n"
	unless $opt_q;
    print LOG $joined, "\n";
    close(LOG);

    $rec{'id'};
}


if ($^W && 0)
{
    %aid_util::aid_aliases = ();   # reset global alias hash repository 
}
