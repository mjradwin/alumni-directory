#!/usr/bin/perl -w

# $Id: aid_addname,v 3.18 1999/02/24 20:37:19 mradwin Exp mradwin $

require 'getopts.pl';
require 'aid_util.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hwm] [mailspoolfile]
    -h        Display usage information.
    -w        Don't mail welcome messages.
    -m        Manual operation (don't rebuild or mail welcome messages).
";

&Getopts('hmw') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning
$opt_w = $opt_w;                # avoid warning

$cp   = &aid_config('cp');
$make = &aid_config('make');

-x $cp   || die "$cp   is not executable!";
-x $make || die "$make is not executable!";

$adr_newmail = &aid_config('aiddir') . 'data/newmail.adr';
$adr_update  = &aid_config('aiddir') . 'data/update.adr';

&readspool(($ARGV[0]) ? $ARGV[0] : &aid_config('spoolfile'));
&rebuild() unless $opt_m;
&mail_welcome() unless $opt_m || $opt_w;

print "done!\n";
exit(0);

sub readspool {
    local($spoolFile) = @_;
    local($_);
    local($id,$logFile,$newsFile,*SPOOL);
    local($newsp,$browserLog,$time);

    $browserLog = &aid_config('aiddir') . "logs/browsers.log";
    open(SPOOL, $spoolFile) || die "can't open $spoolFile: $!\n";
    print "reading spool...\n";
    while(<SPOOL>) {
	next unless /^_AID_BEGIN_SUBMISSION_/;

	$_ = <SPOOL>;  # grab blank line
	$_ = <SPOOL>;  # here it is!
	chop;

	$id = &addname($_);
	$newsp = 0;

	while(<SPOOL>) {
	    if (/^Browser: (.*)$/) {
		$time = time;
		open(BROWSERLOG,">>$browserLog") || die "$browserLog: $!\n";
		print BROWSERLOG "$time - $id - $1\n";
		close(BROWSERLOG);
	    }
	    last if /^_AID_END_SUBMISSION_/;
	    if (/^_AID_BEGIN_MESSAGE_/) {
		$newsFile = &aid_newsfile($id);
		open(NEWSOUT, ">$newsFile") ||
		    die "Can't open $newsFile: $!\n";
		print "MESSAGE $newsFile\n";
		while(<SPOOL>) {
		    last if /^_AID_END_MESSAGE_/;
		    print STDOUT $_;
		    print NEWSOUT $_;
		}
		close(NEWSOUT);
		$newsp = 1;	# they had a What's New? message
	    }
	}

	if (!$newsp) {
	    $newsFile = &aid_newsfile($id);
	    if (-e $newsFile) {
		print "No news, but newsFile exists.\nREMOVING $newsFile\n";
		unlink($newsFile);
	    }
	}

    }
    close(SPOOL);

    1;
}


sub rebuild {
    chdir &aid_config('aiddir') || die "can't chdir: $!\n";

    print "rebuilding...\n";
    system "$make" || die "failed to $make: $!\n";
}

sub mail_welcome {
    chdir &aid_config('aiddir') || die "can't chdir: $!\n";

    print "mailing...";
    if (-e $adr_newmail) {
	print ' new';
	system "./bin/aid_welcome $adr_newmail"
	    || die "failed to ./bin/aid_welcome $adr_newmail: $!\n";
	unlink($adr_newmail)
	    || die "couldn't unlink $adr_newmail: $!\n";
    }

    if (-e $adr_update) {
	print ' update';
	system "./bin/aid_welcome -u $adr_update"
	    || die "failed to ./bin/aid_welcome -u $adr_update: $!\n";
	unlink($adr_update)
	    || die "couldn't unlink $adr_update: $!\n";
    }

    print "\n";
}


sub addname {
    local($rawdata) = @_;
    local($[) = 0;
    local($_);
    local($dbFile,$logFile,@db,%oldrec,%id_by_email);
    local(%rec) = &aid_split($rawdata);
    local($addme,$tmpFile,*LOG,*TMP,*ADR);

    $dbFile = &aid_config('aiddir') . "data/master.adr";
    $logFile = &aid_config('aiddir') . "logs/additions.log";
    @db = &aid_create_db($dbFile);

    for (@db) {
	next unless defined($_) && $_ ne '';
	%oldrec = &aid_split($_);
	$id_by_email{"\L$oldrec{'email'}$oldrec{'last'}$oldrec{'first'}\E"} =
	    $oldrec{'id'};
    }

    open(LOG, ">>$logFile") || die "Can't open $logFile: $!\n";
    select(LOG); $| = 1; select(STDOUT);

    # assign the double-submit newbies the same id if we've seen their
    # email address before
    if (($rec{'id'} == -1) &&
	(defined $id_by_email{"\L$rec{'email'}$rec{'last'}$rec{'first'}\E"}))
    {
	$rec{'id'} = $id_by_email{"\L$rec{'email'}\E"};
	$rawdata = &aid_join(*rec);
    }

    if ($rec{'id'} == -1) {
	$rec{'id'} = ($#db + 1);
	$addme = &aid_join(*rec);

	open(ADR,">>$adr_newmail") || die "$adr_newmail: $!\n";
	print ADR $addme, "\n";
	close(ADR);

	print     "new - ";
	print LOG "new - ";

    } else {
	%oldrec = &aid_split($db[$rec{'id'}]);
	$addme = $rawdata;

	open(ADR,">>$adr_update") || die "$adr_update: $!\n";
	print ADR $addme, "\n";
	close(ADR);

	print     "upd ", $oldrec{'email'}, " ";
	print LOG "upd ", $oldrec{'email'}, " ";
    }

    $db[$rec{'id'}] = $addme;
    print $addme, "\n";
    print LOG $addme, "\n";
    close(LOG);

    $tmpFile = "/tmp/aid_add.$$";
    open(TMP, ">$tmpFile") || die "Can't open $tmpFile: $!\n";
    for (@db) {
	next unless defined($_) && $_ ne '';
	print TMP $_, "\n";
    }
    close(TMP);

    system "$cp -f $tmpFile $dbFile"
	|| die "failed to $cp -f $tmpFile $dbFile: $!\n";
    unlink($tmpFile) || die "couldn't unlink $tmpFile: $!\n";

    $rec{'id'};
}
