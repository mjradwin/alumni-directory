#!/usr/bin/perl -w

# $Id: aid_addname,v 3.28 1999/03/26 03:07:49 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

require 'getopts.pl';
require 'aid_util.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hwm] [mailspoolfile]
    -h        Display usage information.
    -w        Don't mail welcome messages.
    -m        Manual operation (don't rebuild or mail welcome messages).
";

&Getopts('hmw') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning
$opt_w = $opt_w;                # avoid warning

$cp   = &aid_config('cp');
$make = &aid_config('make');

-x $cp   || die "$cp   is not executable!";
-x $make || die "$make is not executable!";

@new_ids = ();
@upd_ids = ();

&readspool(($ARGV[0]) ? $ARGV[0] : &aid_config('spoolfile'));
&rebuild() unless $opt_m;
&mail_welcome() unless $opt_m || $opt_w;

print STDERR "done!\n";
exit(0);

# make the "what's new" text fit in 55 columns.
format NEWSOUT =
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~
$message
.

format STDOUT =
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~
$message
.

sub readspool {
    local($spoolFile) = @_;
    local($_);
    local($id,$logFile,$newsFile,*SPOOL);
    local($newsp,$browserLog,$time);

    $browserLog = &aid_config('aiddir') . "logs/browsers.log";
    open(SPOOL, $spoolFile) || die "can't open $spoolFile: $!\n";
    print STDERR "reading spool...\n";
    while(<SPOOL>) {
	next unless /^_AID_BEGIN_SUBMISSION_/;

	$_ = <SPOOL>;  # grab blank line
	$_ = <SPOOL>;  # here it is!
	chop;

	$id = &addname($_);
	$newsp = 0;

	while(<SPOOL>) {
	    if (/^Browser: (.*)$/) {
		$time = time;
		open(BROWSERLOG,">>$browserLog") || die "$browserLog: $!\n";
		print BROWSERLOG "$time - $id - $1\n";
		close(BROWSERLOG);
	    }
	    last if /^_AID_END_SUBMISSION_/;
	    if (/^_AID_BEGIN_MESSAGE_/) {
		$newsFile = &aid_newsfile($id);
		open(NEWSOUT, ">$newsFile") ||
		    die "Can't open $newsFile: $!\n";
		print "MESSAGE $newsFile\n";

		$message = '';
		$maxlen = 0;
		while(<SPOOL>)
		{
		    last if /^_AID_END_MESSAGE_/;
		    $maxlen = length($_) if (length($_) > $maxlen);
		    $message .= $_;
		}
		if ($maxlen <= 60)
		{
		    print STDOUT  $message;
		    print NEWSOUT $message;
		}
		else
		{
		    $message_bak = $message;
		    write(NEWSOUT);	# destructively modifies message
		    $message = $message_bak;
		    print "(reformatted)\n";
		    write(STDOUT);
		}
		close(NEWSOUT);

#		while(<SPOOL>) {
#		    last if /^_AID_END_MESSAGE_/;
#		    print STDOUT $_;
#		    print NEWSOUT $_;
#		}
#		close(NEWSOUT);

		$newsp = 1;	# they had a What's New? message
	    }
	}

	if (!$newsp) {
	    $newsFile = &aid_newsfile($id);
	    if (-e $newsFile) {
		print "No news, but newsFile exists.\nREMOVING $newsFile\n";
		unlink($newsFile);
	    }
	}

    }
    close(SPOOL);

    1;
}


sub rebuild
{
    chdir &aid_config('aiddir') || die "can't chdir: $!\n";

    print STDERR "rebuilding...\n";
    system $make || die "failed to run $make: $!\n";
}

sub mail_welcome
{
    local($cmd);
    local($dbfile) = &aid_config('wwwdir') . 'master.db';

    chdir &aid_config('aiddir') || die "can't chdir: $!\n";

    print STDERR "mailing...";
    if (@new_ids)
    {
	print STDERR ' new(', join(' ', @new_ids), ')';
	$cmd = "./bin/aid_welcome $dbfile " . join(' ', @new_ids);
	system $cmd || die "failed to run $cmd: $!\n";
    }

    if (@upd_ids)
    {
	print STDERR ' upd(', join(' ', @upd_ids), ')';
	$cmd = "./bin/aid_welcome -u $dbfile " . join(' ', @upd_ids);
	system $cmd || die "failed to run $cmd: $!\n";
    }

    print STDERR "\n";
}


sub addname
{
    local($rawdata) = @_;
    local($[) = 0;
    local($_);
    local($dbFile,$logFile,@db,%oldrec);
    local(%rec) = &aid_split($rawdata);
    local($addme,$tmpFile,*LOG,*TMP);
    local($key_name,$key_email,%id_by_email,%id_by_name);
    local($cmd);

    $dbFile = &aid_config('aiddir') . "data/master.adr";
    $logFile = &aid_config('aiddir') . "logs/additions.log";
    @db = &aid_create_db($dbFile);

    for (@db) {
	next unless defined($_) && $_ ne '';
	%oldrec = &aid_split($_);

	$key_email = "\L$oldrec{'email'}\E" .
	    &mangle("\L$oldrec{'last'}\E") . &mangle("\L$oldrec{'first'}\E");
	$key_name = &mangle("\L$oldrec{'last'}\E") .
	    &mangle("\L$oldrec{'first'}\E") . $oldrec{'year'};
	$id_by_email{$key_email} = $oldrec{'id'};
	$id_by_name{$key_name} = $oldrec{'id'};
    }
    undef(%oldrec);

    open(LOG, ">>$logFile") || die "Can't open $logFile: $!\n";
    select(LOG); $| = 1; select(STDOUT);

    # assign the double-submit newbies the same id if we've seen their
    # email address before
    if ($rec{'id'} == -1)
    {
	$key_email = "\L$rec{'email'}\E" .
	    &mangle("\L$rec{'last'}\E") . &mangle("\L$rec{'first'}\E");
	$key_name = &mangle("\L$rec{'last'}\E") .
	    &mangle("\L$rec{'first'}\E") . $rec{'year'};

	if (defined $id_by_email{$key_email})
	{
	    $rec{'id'} = $id_by_email{$key_email};
	    %oldrec = &aid_split($db[$rec{'id'}]);

	    $rec{'created'} = $oldrec{'created'};
	    $rawdata = &aid_join(*rec);
	}
	elsif (defined $id_by_name{$key_name})
	{
	    $rec{'id'} = $id_by_name{$key_name};
	    %oldrec = &aid_split($db[$rec{'id'}]);

	    $rec{'created'} = $oldrec{'created'};
	    $rec{'email_upd'} = $rec{'time'} if
		$oldrec{'email'} ne $rec{'email'};
	    $rec{'email_old'} = $oldrec{'email'} if
		$oldrec{'email'} ne $rec{'email'};
	    $rawdata = &aid_join(*rec);
	}
    }

    if ($rec{'id'} == -1) {
	$rec{'id'} = ($#db + 1);
	$addme = &aid_join(*rec);

	push(@new_ids, $rec{'id'});
	print     "new - ";
	print LOG "new - ";

    } else {
	%oldrec = &aid_split($db[$rec{'id'}]);
	$addme = $rawdata;

	push(@upd_ids, $rec{'id'});
	print     "upd ", $oldrec{'email'}, " ";
	print LOG "upd ", $oldrec{'email'}, " ";
    }

    $db[$rec{'id'}] = $addme;
    print $addme, "\n";
    print LOG $addme, "\n";
    close(LOG);

    $tmpFile = "/tmp/aid_add.$$";
    open(TMP, ">$tmpFile") || die "Can't open $tmpFile: $!\n";
    for (@db) {
	next unless defined($_) && $_ ne '';
	print TMP $_, "\n";
    }
    close(TMP);

    $cmd = "$cp -f $tmpFile $dbFile";
    system $cmd || die "failed to run $cmd: $!\n";
    unlink($tmpFile) || die "couldn't unlink $tmpFile: $!\n";

    $rec{'id'};
}
