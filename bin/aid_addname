#!/usr/local/bin/perl

# $Id: aid_addname,v 1.7 1997/12/31 18:11:36 mjr Exp mjr $

require 'getopts.pl';
require 'aid_util.pl';

$usage = 'usage: aid_addname [-hmw] [mailspoolfile]
    -h        Display usage information.
    -m        Manual operation (don\'t rebuild).
    -w        Don\'t mail welcome messages.
';

&Getopts('hmw') || die "$usage\n";
$opt_h && die "$usage\n";

&readspool(($ARGV[0]) ? $ARGV[0] : &aid_config('spoolfile'));
&rebuild() unless $opt_m;
&mail_welcome() unless $opt_w;

print "done!\n";
exit(0);

# make the "what's new" text fit in 55 columns.
format NEWSOUT =
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~
$message
.

format STDOUT =
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~
$message
.

sub readspool {
    local($spoolFile) = @_;
    local($[) = 0;
    local($_);
    local($id,$newsFile,*SPOOL);

    open(SPOOL, $spoolFile) || die "can't open $spoolFile: $!\n";
    print "reading spool...\n";
    while(<SPOOL>) {
	next unless /^This was submitted to the MVHS address database/;

	$_ = <SPOOL>;  # grab blank line
	$_ = <SPOOL>;  # here it is!
	chop;

	$id = &addname($_);

	while(<SPOOL>) {
	    last if /^The kind soul who submitted it/;
	    if (/^_MVHSAID_BEGIN_MESSAGE_/) {
		$newsFile = &aid_config('newsdir') . "${id}.txt";
		open(NEWSOUT, ">$newsFile") ||
		    die "Can't open $newsFile: $!\n";
		print "MESSAGE $newsFile\n";
		$message = '';
		while(<SPOOL>) {
		    last if /^_MVHSAID_END_MESSAGE_/;
		    $message .= $_;
		}
		$message_bak = $message;
		write(NEWSOUT);	# destructively modifies message
		$message = $message_bak;
		write(STDOUT);
		close(NEWSOUT);
	    }
	}
    }
    close(SPOOL);

    1;
}


sub rebuild {
    chdir &aid_config('mvhsdir') || die "can't chdir: $!\n";

    print "rebuilding...\n";
    system 'make';
}

sub mail_welcome {
    chdir &aid_config('mvhsdir') || die "can't chdir: $!\n";

    print "mailing...";
    if (-e 'data/newmail.adr') {
	print ' new';
	system 'bin/aid_welcome data/newmail.adr';
	unlink('data/newmail.adr');
    }

    if (-e 'data/update.adr') {
	print ' update';
	system 'bin/aid_welcome -u data/update.adr';
	unlink('data/update.adr');
    }

    print "\n";
}


sub addname {
    local($rawdata) = @_;
    local($[) = 0;
    local($_);
    local($dbFile,$newmailFile,$updFile,$logFile,@db);
    local($time,$id,$req,$last,$first,$married,
	  $school,$year,$email,$homepage,$location);
    local($addme,$tmpFile,*LOG,*TMP);

    $dbFile = &aid_config('mvhsdir') . "data/mvhs.adr";
    $newmailFile = &aid_config('mvhsdir') . "data/newmail.adr";
    $updFile = &aid_config('mvhsdir') . "data/update.adr";
    $logFile = &aid_config('mvhsdir') . "logs/additions.log";
    @db = &aid_create_db($dbFile);

    ($time,$id,$req,$last,$first,$married,
     $school,$year,$email,$homepage,$location)  = split(/;/, $rawdata);

    open(LOG, ">>$logFile") || die "Can't open $logFile: $!\n";
    select(LOG); $| = 1; select(STDOUT);

    if ($id == -1) {
	$id = ($#db + 1);
	$addme = join(';', ($time,$id,$req,$last,$first,$married,
			    $school,$year,$email,$homepage,$location));
	system("echo '$addme' >> $newmailFile");
    } else {
	print     "==> UPDATE ", $db[$id], "\n";
	print LOG "==> UPDATE ", $db[$id], "\n";
	$addme = $rawdata;
	system("echo '$addme' >> $updFile");
    }

    $db[$id] = $addme;
    print $addme, "\n";
    print LOG $addme, "\n";
    close(LOG);

    $tmpFile = "/tmp/aid_add.$$";
    open(TMP, ">$tmpFile") || die "Can't open $tmpFile: $!\n";
    for (@db) {
	next if $_ eq '';
	print TMP $_, "\n";
    }
    close(TMP);

    system "/usr/local/gnu/bin/cp -f $tmpFile $dbFile";
    unlink($tmpFile) || die "couldn't unlink $tmpFile: $!\n";

    return $id;
}
