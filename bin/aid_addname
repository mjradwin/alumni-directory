#!/usr/bin/perl -w

# $Id: aid_addname,v 3.12 1998/05/17 05:30:36 mradwin Exp mradwin $

require 'getopts.pl';
require 'aid_util.pl';

$usage = 'usage: aid_addname [-hwm] [mailspoolfile]
    -h        Display usage information.
    -w        Don\'t mail welcome messages.
    -m        Manual operation (don\'t rebuild or mail welcome messages).
';

&Getopts('hmw') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;                # avoid warning
$opt_m = $opt_m;                # avoid warning
$opt_w = $opt_w;                # avoid warning

$echo = &aid_config('echo');
$cat  = &aid_config('cat');
$cp   = &aid_config('cp');
$make = &aid_config('make');

-x $echo || die "$echo is not executable!";
-x $cat  || die "$cat  is not executable!";
-x $cp   || die "$cp   is not executable!";
-x $make || die "$make is not executable!";

&readspool(($ARGV[0]) ? $ARGV[0] : &aid_config('spoolfile'));
&rebuild() unless $opt_m;
&mail_welcome() unless $opt_m || $opt_w;

print "done!\n";
exit(0);

# make the "what's new" text fit in 55 columns.
format NEWSOUT =
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~
$message
.

format STDOUT =
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<~~
$message
.

sub readspool {
    local($spoolFile) = @_;
    local($[) = 0;
    local($_);
    local($id,$logFile,$newsFile,*SPOOL);
    local($newsp,$browserLog,$time);

    $browserLog = &aid_config('aiddir') . "logs/browsers.log";
    $time = time;
    open(SPOOL, $spoolFile) || die "can't open $spoolFile: $!\n";
    print "reading spool...\n";
    while(<SPOOL>) {
	next unless /^_AID_BEGIN_SUBMISSION_/;

	$_ = <SPOOL>;  # grab blank line
	$_ = <SPOOL>;  # here it is!
	chop;

	$id = &addname($_);
	$newsp = 0;

	while(<SPOOL>) {
	    if (/^Browser: (.*)$/) {
		system "$echo '$id - $time - $1' >> $browserLog"
		    || die "failed to $echo '$id - $time - $1' >> $browserLog: $!\n";
	    }
	    last if /^_AID_END_SUBMISSION_/;
	    if (/^_AID_BEGIN_MESSAGE_/) {
		$newsFile = &aid_newsfile($id);
		open(NEWSOUT, ">$newsFile") ||
		    die "Can't open $newsFile: $!\n";
		print "MESSAGE $newsFile\n";
		$message = '';
		while(<SPOOL>) {
		    last if /^_AID_END_MESSAGE_/;
		    $message .= $_;
		}
		$message_bak = $message;
		write(NEWSOUT);	# destructively modifies message
		$message = $message_bak;
		write(STDOUT);
		close(NEWSOUT);

		$logFile = &aid_config('aiddir') . "logs/additions.log";
		system "$echo 'MESSAGE $newsFile' >> $logFile"
		    || die "failed to $echo 'MESSAGE $newsFile' >> $logFile: $!\n";
		system "$cat $newsFile >> $logFile"
		    || die "failed to $cat $newsFile >> $logFile: $!\n";

		$newsp = 1;	# they had a What's New? message
	    }
	}

	if (!$newsp) {
	    $newsFile = &aid_newsfile($id);
	    if (-e $newsFile) {
		print "No news, but newsFile exists.\nREMOVING $newsFile\n";
		unlink($newsFile);
	    }
	}

    }
    close(SPOOL);

    1;
}


sub rebuild {
    chdir &aid_config('aiddir') || die "can't chdir: $!\n";

    print "rebuilding...\n";
    system "$make" || die "failed to $make: $!\n";
}

sub mail_welcome {
    chdir &aid_config('aiddir') || die "can't chdir: $!\n";

    print "mailing...";
    if (-e 'data/newmail.adr') {
	print ' new';
	system "./bin/aid_welcome data/newmail.adr"
	    || die "failed to ./bin/aid_welcome data/newmail.adr: $!\n";
	unlink('data/newmail.adr')
	    || die "couldn't unlink data/newmail.adr: $!\n";
    }

    if (-e 'data/update.adr') {
	print ' update';
	system "./bin/aid_welcome -u data/update.adr"
	    || die "failed to ./bin/aid_welcome -u data/update.adr: $!\n";
	unlink('data/update.adr')
	    || die "couldn't unlink data/update.adr: $!\n";
    }

    print "\n";
}


sub addname {
    local($rawdata) = @_;
    local($[) = 0;
    local($_);
    local($dbFile,$newmailFile,$updFile,$logFile,@db);
    local(%rec) = &aid_split($rawdata);
    local($addme,$tmpFile,*LOG,*TMP);

    $dbFile = &aid_config('aiddir') . "data/master.adr";
    $newmailFile = &aid_config('aiddir') . "data/newmail.adr";
    $updFile = &aid_config('aiddir') . "data/update.adr";
    $logFile = &aid_config('aiddir') . "logs/additions.log";
    @db = &aid_create_db($dbFile);

    open(LOG, ">>$logFile") || die "Can't open $logFile: $!\n";
    select(LOG); $| = 1; select(STDOUT);

    if ($rec{'id'} == -1) {
	$rec{'id'} = ($#db + 1);
	$addme = &aid_join(*rec);
	system "$echo '$addme' >> $newmailFile"
	    || die "failed to $echo '$addme' >> $newmailFile: $!\n";
    } else {
	print     "==> UPDATE ", $db[$rec{'id'}], "\n";
	print LOG "==> UPDATE ", $db[$rec{'id'}], "\n";
	$addme = $rawdata;
	system "$echo '$addme' >> $updFile"
	    || die "failed to $echo '$addme' >> $updFile: $!\n";
    }

    $db[$rec{'id'}] = $addme;
    print $addme, "\n";
    print LOG $addme, "\n";
    close(LOG);

    $tmpFile = "/tmp/aid_add.$$";
    open(TMP, ">$tmpFile") || die "Can't open $tmpFile: $!\n";
    for (@db) {
	next unless defined($_) && $_ ne '';
	print TMP $_, "\n";
    }
    close(TMP);

    system "$cp -f $tmpFile $dbFile"
	|| die "failed to $cp -f $tmpFile $dbFile: $!\n";
    unlink($tmpFile) || die "couldn't unlink $tmpFile: $!\n";

    $rec{'id'};
}
