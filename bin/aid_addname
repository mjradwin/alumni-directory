#!/usr/local/bin/perl -w

# $Id: aid_addname,v 6.1 2003/08/25 04:10:32 mradwin Exp mradwin $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use FindBin;
use lib $FindBin::Bin;
use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";

use Getopt::Std;
use DB_File::Lock;
use aid_util;
use strict;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hwm]
    -h        Display usage information.
    -w        Don't mail welcome messages.
    -m        Manual operation (don't rebuild or mail welcome messages).
    -q        Quiet mode (no error messages).
";

my(%opts);
getopts('hmwq', \%opts) || die "$usage\n";
$opts{'h'} && die "$usage\n";

my $dbmfile = aid_util::config('aiddir') . "data/working.db";

my $make = aid_util::config('make');
-x $make || die "$0: $make is not executable!";
$make .= " -s QUIET=-q" if $opts{'q'};

my @new_ids = ();
my @upd_ids = ();
my @mod_keys = ();

select(STDOUT); $| = 1;
my $status = readspool();
if (!$opts{'m'} && $status)
{
    rebuild();
    mail_welcome() unless $opts{'w'};
}

exit(0);

sub readspool
{
    my($success) = 0;

    my($staging) = aid_util::config('staging');
    die "$staging: $!\n" unless -r $staging;

    my(%DBS);
    tie(%DBS, 'DB_File::Lock', $staging, O_CREAT|O_RDWR, 0644,
	$DB_HASH, 'write')
	or die "$staging: $!\n";

    my(@vals) = ();
    if (defined $DBS{'_verified'})
    {
	my(@key8s) = split(/\0/, $DBS{'_verified'});

	foreach my $key8 (@key8s)
	{
	    print STDOUT "checking key8 $key8\n"
		unless $opts{'q'};

	    if (defined $DBS{$key8} && $DBS{$key8} =~ /^-?\d+\0/)
	    {
		my($id,$packed) = split(/\0/, $DBS{$key8}, 2);

		push(@vals, $DBS{$key8});
		$DBS{$key8} = "p\0";

		my %rec = aid_util::db_unpack_rec($id,$packed);

		print STDOUT "OK key8 $key8 - ",
		aid_util::inorder_fullname(\%rec), "\n"
		    unless $opts{'q'};

		if ($id != -1 && defined $DBS{$id})
		{
		    delete $DBS{$id};
		}
		elsif ($id == -1 && defined $DBS{lc($rec{'e'})})
		{
		    delete $DBS{lc($rec{'e'})};
		}

		undef(%rec);
	    }
	    else
	    {
		warn "key8 $key8 was _verified, but invalid in staging.db\n";
	    }
	}

	delete $DBS{'_verified'};
    }

    untie(%DBS);

    my($val);
    foreach $val (@vals)
    {
	my($id,$packed) = split(/\0/, $val, 2);
	my %rec = aid_util::db_unpack_rec($id,$packed);
	$rec{'f'} = $rec{'u'} = time;

	print STDOUT "addname - ", aid_util::inorder_fullname(\%rec), "\n"
	    unless $opts{'q'};

	addname(\%rec) || die "$0: can't add $rec{'id'} $rec{'e'}!\n";
	$success = 1;
    }

    if ($success)
    {
	my(%DB);
	tie(%DB, 'DB_File::Lock', $dbmfile, O_CREAT|O_RDWR, 0644,
	    $DB_HASH, 'write')
	    or die "$dbmfile: $!\n";

	@mod_keys = aid_util::rebuild_secondary_keys(\%DB,$opts{'q'},0,1);

	untie(%DB);
    }

    $success;
}


sub rebuild
{
    chdir aid_util::config('aiddir') || die "$0: can't chdir: $!\n";

    my $cmd = $make . ' MOD_IDS="' . join(' ', @new_ids, @upd_ids) . '"' .
	' MOD_KEYS="' . join(' ', @mod_keys) . '"';
    print STDOUT "cd ", aid_util::config('aiddir'), "; $cmd\n"
	unless $opts{'q'};

    system $cmd;
    aid_util::die_if_failure();
}

sub mail_welcome
{
    my $cmd;

    chdir aid_util::config('aiddir') || die "$0: can't chdir: $!\n";

    if (@new_ids)
    {
	$cmd = "./bin/aid_welcome $dbmfile " . join(' ', @new_ids);
	print STDOUT $cmd, "\n"
	    unless $opts{'q'};
	system $cmd;
	aid_util::die_if_failure();
    }

    if (@upd_ids)
    {
	$cmd = "./bin/aid_welcome -u $dbmfile " . join(' ', @upd_ids);
	print STDOUT $cmd, "\n"
	    unless $opts{'q'};
	system $cmd;
	aid_util::die_if_failure();
    }
}


sub addname
{
    my($recp) = @_;

    my(%oldrec);
    my($logFile,$key_name,$key_email,%id_by_email,%id_by_name,$email);

    %aid_util::aliases = ();   # reset global alias hash repository 

    $logFile = aid_util::config('aiddir') . "logs/additions.log";

    my(%DB);
    tie(%DB, 'DB_File::Lock', $dbmfile, O_CREAT|O_RDWR, 0644, $DB_HASH, 'write')
	or die "$dbmfile: $!\n";

    while (my($key,$val) = each %DB)
    {
	next unless $key =~ /^\d+$/;
	%oldrec = aid_util::db_unpack_rec($key,$val);

	$key_email = lc($oldrec{'e'}) .
	    aid_util::mangle(lc($oldrec{'sn'})) .
	    aid_util::mangle(lc($oldrec{'gn'}));
	$key_name = aid_util::mangle(lc($oldrec{'sn'})) .
	    aid_util::mangle(lc($oldrec{'gn'})) . $oldrec{'yr'};
	$id_by_email{$key_email} = $oldrec{'id'};
	$id_by_name{$key_name} = $oldrec{'id'};

	aid_util::generate_alias(\%oldrec);
    }
    undef(%oldrec);

    my $LOG;
    open($LOG, ">>$logFile") || die "$0: can't open $logFile: $!\n";
    select($LOG); $| = 1; select(STDOUT);

    # assign the double-submit newbies the same id if we've seen their
    # email address before
    if ($recp->{'id'} == -1)
    {
	$key_email = lc($recp->{'e'}) .
	    aid_util::mangle(lc($recp->{'sn'})) .
	    aid_util::mangle(lc($recp->{'gn'}));
	$key_name = aid_util::mangle(lc($recp->{'sn'})) .
	    aid_util::mangle(lc($recp->{'gn'})) . $recp->{'yr'};

	if (defined $id_by_email{$key_email})
	{
	    $recp->{'id'} = $id_by_email{$key_email};
	    %oldrec = aid_util::db_unpack_rec($recp->{'id'}, $DB{$recp->{'id'}});

	    $recp->{'c'} = $oldrec{'c'};
	}
	elsif (defined $id_by_name{$key_name})
	{
	    $recp->{'id'} = $id_by_name{$key_name};
	    %oldrec = aid_util::db_unpack_rec($recp->{'id'}, $DB{$recp->{'id'}});

	    $recp->{'c'} = $oldrec{'c'};
	    $recp->{'eu'} = $recp->{'u'} if
		$oldrec{'e'} ne $recp->{'e'};
	    $recp->{'eo'} = $oldrec{'e'} if
		$oldrec{'e'} ne $recp->{'e'};
	}
	undef(%oldrec);
    }

    if ($recp->{'id'} == -1)
    {
	$recp->{'id'} = $DB{'_nextid'};
	$DB{'_nextid'} = $DB{'_nextid'} + 1;

	push(@new_ids, $recp->{'id'});
	print     "new - "
	    unless $opts{'q'};
	print $LOG "new - ";
    }
    elsif (defined $DB{$recp->{'id'}})
    {
	%oldrec = aid_util::db_unpack_rec($recp->{'id'},$DB{$recp->{'id'}});

	push(@upd_ids, $recp->{'id'})
	     unless ((grep(/\b$recp->{'id'}\b/, @new_ids)) ||
		     (grep(/\b$recp->{'id'}\b/, @upd_ids)));

	if ($recp->{'e'} ne $oldrec{'e'})
	{
	    $email = $oldrec{'e'};
	    delete $DB{lc($email)};
	}

	print     "upd ", $oldrec{'e'}, " "
	    unless $opts{'q'};
	print $LOG "upd ", $oldrec{'e'}, " ";
	undef(%oldrec);
    }
    else
    {
	warn "$recp->{'id'} doesn't appear to be new, but not in DB.\n";
	push(@new_ids, $recp->{'id'});
	print     "new - "
	    unless $opts{'q'};
	print $LOG "new - ";
    }

    $recp->{'a'} = aid_util::generate_alias($recp)
	unless defined $recp->{'a'} && $recp->{'a'} ne '';

    $DB{$recp->{'id'}} = aid_util::db_pack_rec($recp);
    $email = $recp->{'e'};
    $DB{lc($email)} = pack('n', $recp->{'id'});

    untie(%DB);

    my $joined = aid_util::ampersand_join($recp);
    print     $joined, "\n"
	unless $opts{'q'};
    print $LOG $joined, "\n";
    close($LOG);

    $recp->{'id'};
}


if ($^W && 0)
{
    %aid_util::aliases = ();   # reset global alias hash repository 
}
