#!/usr/local/bin/perl -w

#
# generates address books in several formats
# $Id: aid_book,v 5.8 2003/05/15 00:30:45 mradwin Exp $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";
use DB_File::Lock;

use aid_util;
use Getopt::Std;
use strict;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-h] infile.db -{p,e,b,w,m,n,l,v,o} outfile
    -h        Display usage information.

    -p        Pine address book
    -e        Elm aliases
    -b        Berkeley Mail aliases
    -w        Eudora 2 nicknames
    -m        Eudora 3/4 nicknames
    -n        Netscape3 address book
    -l        Netscape4 .ldif address book
    -v        vCard book
    -o        Outlook Express .csv
";

# get the command-line options and die if there is a bad option or
# there are no filenames
my(%opts);
getopts('hp:e:b:w:m:n:l:v:o:', \%opts) || die "$usage\n";
$opts{'h'} && die "$usage\n";
$ARGV[0] || die "$usage\n";

# must have at least 1 option
die "$usage\n" unless
    $opts{'p'} || $opts{'e'} || $opts{'b'} || $opts{'w'} || 
    $opts{'m'} || $opts{'n'} || $opts{'l'} || $opts{'v'} || $opts{'o'};

my $dbmfile = shift;
my %DB;
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

die "no _alpha key!" unless defined $DB{'_alpha'};

my($BOOKp,$BOOKe,$BOOKb,$BOOKw,$BOOKm,$BOOKn,$BOOKl,$BOOKv,$BOOKo);

if ($opts{'p'}) {
    open($BOOKp,">$opts{'p'}") || die "Can't open $opts{'p'}: $!\n"; }
if ($opts{'e'}) {
    open($BOOKe,">$opts{'e'}") || die "Can't open $opts{'e'}: $!\n"; }
if ($opts{'b'}) { 
    open($BOOKb,">$opts{'b'}") || die "Can't open $opts{'b'}: $!\n"; }
if ($opts{'w'}) {
    open($BOOKw,">$opts{'w'}") || die "Can't open $opts{'w'}: $!\n"; }
if ($opts{'m'}) {
    open($BOOKm,">$opts{'m'}") || die "Can't open $opts{'m'}: $!\n"; }
if ($opts{'n'}) {
    open($BOOKn,">$opts{'n'}") || die "Can't open $opts{'n'}: $!\n"; }
if ($opts{'l'}) {
    open($BOOKl,">$opts{'l'}") || die "Can't open $opts{'l'}: $!\n"; }
if ($opts{'v'}) {
    open($BOOKv,">$opts{'v'}") || die "Can't open $opts{'v'}: $!\n"; }
if ($opts{'o'}) {
    open($BOOKo,">$opts{'o'}") || die "Can't open $opts{'o'}: $!\n"; }

$opts{'p'} && aid_util::book_write_prefix($BOOKp,'p');
$opts{'e'} && aid_util::book_write_prefix($BOOKe,'e');
$opts{'b'} && aid_util::book_write_prefix($BOOKb,'b');
$opts{'w'} && aid_util::book_write_prefix($BOOKw,'w');
$opts{'m'} && aid_util::book_write_prefix($BOOKm,'m');
$opts{'n'} && aid_util::book_write_prefix($BOOKn,'n');
$opts{'l'} && aid_util::book_write_prefix($BOOKl,'l');
$opts{'v'} && aid_util::book_write_prefix($BOOKv,'v');
$opts{'o'} && aid_util::book_write_prefix($BOOKo,'o');

my @alpha_ids = unpack("n*",$DB{'_alpha'});
foreach my $id (@alpha_ids)
{
    my %rec = aid_util::db_unpack_rec($id,$DB{$id});
    next unless $rec{'v'};

    $opts{'p'} && aid_util::book_write_entry($BOOKp,'p',\%rec);
    $opts{'e'} && aid_util::book_write_entry($BOOKe,'e',\%rec);
    $opts{'b'} && aid_util::book_write_entry($BOOKb,'b',\%rec);
    $opts{'w'} && aid_util::book_write_entry($BOOKw,'w',\%rec);
    $opts{'m'} && aid_util::book_write_entry($BOOKm,'m',\%rec);
    $opts{'n'} && aid_util::book_write_entry($BOOKn,'n',\%rec);
    $opts{'l'} && aid_util::book_write_entry($BOOKl,'l',\%rec);
    $opts{'v'} && aid_util::book_write_entry($BOOKv,'v',\%rec);
    $opts{'o'} && aid_util::book_write_entry($BOOKo,'o',\%rec);
}

untie(%DB);

$opts{'p'} && aid_util::book_write_suffix($BOOKp,'p');
$opts{'e'} && aid_util::book_write_suffix($BOOKe,'e');
$opts{'b'} && aid_util::book_write_suffix($BOOKb,'b');
$opts{'w'} && aid_util::book_write_suffix($BOOKw,'w');
$opts{'m'} && aid_util::book_write_suffix($BOOKm,'m');
$opts{'n'} && aid_util::book_write_suffix($BOOKn,'n');
$opts{'l'} && aid_util::book_write_suffix($BOOKl,'l');
$opts{'v'} && aid_util::book_write_suffix($BOOKv,'v');
$opts{'o'} && aid_util::book_write_suffix($BOOKo,'o');

$opts{'p'} && close($BOOKp);
$opts{'e'} && close($BOOKe);
$opts{'b'} && close($BOOKb);
$opts{'w'} && close($BOOKw);
$opts{'m'} && close($BOOKm);
$opts{'n'} && close($BOOKn);
$opts{'l'} && close($BOOKl);
$opts{'v'} && close($BOOKv);
$opts{'o'} && close($BOOKo);

exit(0);
