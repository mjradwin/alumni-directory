#!/usr/bin/perl -w

#
# generates address books in several formats
# $Id: aid_book,v 3.24 1999/04/05 16:26:17 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
push(@INC, $dirname);

require 'aid_util.pl';
require 'getopts.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-h] infile.db -{p,e,b,w,m,n,l,v,o} outfile
    -h        Display usage information.

    -p        Pine address book
    -e        Elm aliases
    -b        Berkeley Mail aliases
    -w        Eudora 2 nicknames
    -m        Eudora 3/4 nicknames
    -n        Netscape3 address book
    -l        Netscape4 .ldif address book
    -v        vCard book
    -o        Outlook Express .csv
";

# get the command-line options and die if there is a bad option or
# there are no filenames
&Getopts('hp:e:b:w:m:n:l:v:o:') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning

# must have at least 1 option
die "$usage\n" unless
    $opt_p || $opt_e || $opt_b || $opt_w || 
    $opt_m || $opt_n || $opt_l || $opt_v || $opt_o;

$ARGV[0] =~ s/\.db$//;
die "can't open $ARGV[0].db\n" unless -r "$ARGV[0].db";
dbmopen(%DB,$ARGV[0],0444);

die "no _alpha key!\n" unless defined $DB{'_alpha'};

if ($opt_p) { open(BOOKp,">$opt_p") || die "Can't open $opt_p: $!\n"; }
if ($opt_e) { open(BOOKe,">$opt_e") || die "Can't open $opt_e: $!\n"; }
if ($opt_b) { open(BOOKb,">$opt_b") || die "Can't open $opt_b: $!\n"; }
if ($opt_w) { open(BOOKw,">$opt_w") || die "Can't open $opt_w: $!\n"; }
if ($opt_m) { open(BOOKm,">$opt_m") || die "Can't open $opt_m: $!\n"; }
if ($opt_n) { open(BOOKn,">$opt_n") || die "Can't open $opt_n: $!\n"; }
if ($opt_l) { open(BOOKl,">$opt_l") || die "Can't open $opt_l: $!\n"; }
if ($opt_v) { open(BOOKv,">$opt_v") || die "Can't open $opt_v: $!\n"; }
if ($opt_o) { open(BOOKo,">$opt_o") || die "Can't open $opt_o: $!\n"; }

$opt_p && &aid_book_write_prefix(*BOOKp,'p');
$opt_e && &aid_book_write_prefix(*BOOKe,'e');
$opt_b && &aid_book_write_prefix(*BOOKb,'b');
$opt_w && &aid_book_write_prefix(*BOOKw,'w');
$opt_m && &aid_book_write_prefix(*BOOKm,'m');
$opt_n && &aid_book_write_prefix(*BOOKn,'n');
$opt_l && &aid_book_write_prefix(*BOOKl,'l');
$opt_v && &aid_book_write_prefix(*BOOKv,'v');
$opt_o && &aid_book_write_prefix(*BOOKo,'o');

@alpha_ids = unpack("n*",$DB{'_alpha'});
foreach $id (@alpha_ids)
{
    %rec = &aid_db_unpack_rec($id,$DB{$id});
    next unless $rec{'v'};
    
    $opt_p && &aid_book_write_entry(*BOOKp,'p',*rec);
    $opt_e && &aid_book_write_entry(*BOOKe,'e',*rec);
    $opt_b && &aid_book_write_entry(*BOOKb,'b',*rec);
    $opt_w && &aid_book_write_entry(*BOOKw,'w',*rec);
    $opt_m && &aid_book_write_entry(*BOOKm,'m',*rec);
    $opt_n && &aid_book_write_entry(*BOOKn,'n',*rec);
    $opt_l && &aid_book_write_entry(*BOOKl,'l',*rec);
    $opt_v && &aid_book_write_entry(*BOOKv,'v',*rec);
    $opt_o && &aid_book_write_entry(*BOOKo,'o',*rec);

}

dbmclose(%DB);

$opt_p && &aid_book_write_suffix(*BOOKp,'p');
$opt_e && &aid_book_write_suffix(*BOOKe,'e');
$opt_b && &aid_book_write_suffix(*BOOKb,'b');
$opt_w && &aid_book_write_suffix(*BOOKw,'w');
$opt_m && &aid_book_write_suffix(*BOOKm,'m');
$opt_n && &aid_book_write_suffix(*BOOKn,'n');
$opt_l && &aid_book_write_suffix(*BOOKl,'l');
$opt_v && &aid_book_write_suffix(*BOOKv,'v');
$opt_o && &aid_book_write_suffix(*BOOKo,'o');

$opt_p && close(BOOKp);
$opt_e && close(BOOKe);
$opt_b && close(BOOKb);
$opt_w && close(BOOKw);
$opt_m && close(BOOKm);
$opt_n && close(BOOKn);
$opt_l && close(BOOKl);
$opt_v && close(BOOKv);
$opt_o && close(BOOKo);

exit(0);
