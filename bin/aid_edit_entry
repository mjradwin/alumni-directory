#!/usr/local/bin/perl5 -w

# $Id: aid_edit_entry,v 5.11 2000/04/25 01:31:38 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

use DB_File;

require 'aid_util.pl';
require 'getopts.pl';
require 'ctime.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-hdu] infile.db userid
    -h        Display usage information.
    -d        Display debug diffs.
    -u        Don't set update time.
";

&Getopts('hdu') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;		# avoid warning
$opt_d = $opt_d;		# avoid warning
defined $ARGV[0] || die "$usage\n";
defined $ARGV[1] || die "$usage\n";

$dbmfile = shift;
die "$0: $dbmfile: $!\n" unless -r $dbmfile;
if (-w $dbmfile) {
    tie(%DB, 'DB_File', $dbmfile, O_RDWR|O_CREAT, 0644, $DB_File::DB_HASH)
	or die "$dbmfile: $!\n";
    $mode = 0644;
} else {
    tie(%DB, 'DB_File', $dbmfile, O_RDONLY, 0444, $DB_File::DB_HASH)
	or die "$dbmfile: $!\n";
    $mode = 0444;
}

$id = shift;
if ($id =~ /^\d+$/)
{
    die "$0: no key $id in $dbmfile\n"
	unless defined $DB{$id} && $DB{$id} ne '';
    %rec = &aid_db_unpack_rec($id,$DB{$id});
}
elsif ($id =~ /\@/)
{
    $email = "\L$id\E";
    die "$0: no key \L$id\E in $dbmfile\n"
	unless defined $DB{$email} && $DB{$email} ne '';

    $id = unpack("n*", $DB{$email});
    die "$0: no key $id in $dbmfile\n"
	unless defined $DB{$id} && $DB{$id} ne '';

    %rec = &aid_db_unpack_rec($id,$DB{$id});
}
else
{
    %rec = %aid_util::blank_entry;
    $rec{'c'} = $rec{'u'} = $rec{'f'} = time;
    if (! defined $DB{'_nextid'})
    {
	$DB{'_nextid'} = 1;
    }
    $id = $rec{'id'} = $DB{'_nextid'};
    # don't set nextid here; rebuild_secondary_keys will get it
}

$note_beg_str = &aid_config('note_beg_str');
$note_end_str = &aid_config('note_end_str');
$tmpfile = '/tmp/aid_edit_entry.' . $$;

open(TMPFILE,">$tmpfile") || die "$tmpfile: $!\n";
print TMPFILE '# $Id: aid_edit_entry,v 5.11 2000/04/25 01:31:38 mradwin Exp mradwin $', "\n";
print TMPFILE "# record last touched: ",
 (($rec{'f'} > $rec{'b'}) ? &ctime($rec{'f'}) : &ctime($rec{'b'}));

foreach (@aid_edit_field_names)
{
    print TMPFILE $_, '=', $rec{$_}, "\n";
}
print TMPFILE $note_beg_str, "\n", $rec{'n'}, $note_end_str, "\n";
close(TMPFILE);

$editor = (defined $ENV{'VISUAL'} ? $ENV{'VISUAL'} : 
	   (defined $ENV{'EDITOR'} ? $ENV{'EDITOR'} : 'vi'));
system "$editor $tmpfile" || die "$0: $editor: $!\n";

%newrec = ();
open(TMPFILE,$tmpfile) || die "$tmpfile: $!\n";
unlink($tmpfile);
undef($note);
while(<TMPFILE>)
{
    if (/^$note_beg_str/o)
    {
	$note = '';
	while(<TMPFILE>)
	{
	    last if /^$note_end_str/o;
	    $note .= $_;
	}
	$note = '' if $note =~ /^\s*$/;
    }
    else
    {
	chop;
	next if /^#/;
	next if /^\s*$/;
	warn "$0: $tmpfile: bad line $_\n" unless /^.+=.*$/;
	($key,$val) = split(/=/, $_, 2);
	$newrec{$key} = $val;
    }
}
close(TMPFILE);

# note and id are special cases
$newrec{'n'} = $note if defined $note;
$newrec{'id'} = $id unless defined $newrec{'id'};
$newrec{'a'} = &aid_generate_alias(*newrec)
    unless (defined $newrec{'a'} && $newrec{'a'} ne '');

if ($id != $newrec{'id'})
{
    if ($newrec{'id'} !~ /^\d+$/)
    {
	warn "$0: id=`$newrec{'id'}' not numeric, reverting to old id=$id\n";
	$newrec{'id'} = $id;
    }
    elsif (defined $DB{$newrec{'id'}})
    {
	warn "$0: id=$newrec{'id'} clobbers existing entry, reverting to old id=$id\n";
	$newrec{'id'} = $id;
    }
}

# assign the old value unless it was explicit in the edit
$changed = 0;
while(($key,$val) = each(%rec))
{
    $newrec{$key} = $rec{$key} unless defined $newrec{$key};
    $changed = 1 if $newrec{$key} ne $rec{$key};
}

if ($mode == 0444)
{
    warn "$0: can't save changes ($dbmfile not writable)\n"
	if $changed == 1;
}
elsif ($changed == 1)
{
    if ($id != $newrec{'id'})
    {
	warn "$0: changed id from $id to $newrec{'id'}\n";
	delete $DB{$id};
    }

    $newrec{'u'} = $newrec{'f'} = time
	if (!$opt_u && $newrec{'u'} == $rec{'u'} && $newrec{'f'} == $rec{'f'});
    $DB{$newrec{'id'}} = &aid_db_pack_rec(*newrec);

    # if the id or email has changed, we need to redo the mapping
    if ($id != $newrec{'id'} || $rec{'e'} ne $newrec{'e'})
    {
	$email = $rec{'e'};
	delete $DB{"\L$email\E"};
	$email = $newrec{'e'};
	$DB{"\L$email\E"} = pack('n', $newrec{'id'});
    }

    local(@diffs) = &aid_rebuild_secondary_keys(*DB,0);
    if ($opt_d)
    {
	foreach (@diffs)
	{
	    print "key $_ changed.\n";
	}
    }

    warn "$0: update successful\n";
}

untie(%DB);
exit(0);

if ($^W && 0)
{
    @aid_edit_field_names = ();
    %aid_util::blank_entry = ();
    $opt_u = 0;
}
