#!/usr/local/bin/perl -w

# $Id: aid_delete_entry,v 6.2 2003/08/25 05:32:04 mradwin Exp mradwin $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, '.';
  }
}
use lib "/home/mradwin/local/share/perl";

use DB_File::Lock;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hd] infile.db userid
    -h        Display usage information.
    -d        Display debug diffs.
";

getopts('hd') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;		# avoid warning
$opt_d = $opt_d;		# avoid warning
defined $ARGV[0] || die "$usage\n";
defined $ARGV[1] || die "$usage\n";

my $dbmfile = shift;

my(%DB);
tie(%DB, 'DB_File::Lock', $dbmfile, O_CREAT|O_RDWR, 0644, $DB_HASH, 'write')
    or die "$dbmfile: $!\n";

my $logFile = aid_util::config('aiddir') . "logs/additions.log";
open(LOG, ">>$logFile") || die "$0: can't open $logFile: $!\n";
select(LOG); $| = 1; select(STDOUT);

my $id = shift;
my %rec;
if ($id =~ /^\d+$/)
{
    die "$0: no key $id in $dbmfile\n"
	unless defined $DB{$id} && $DB{$id} ne '';
    %rec = aid_util::db_unpack_rec($id,$DB{$id});
}
elsif ($id =~ /\@/)
{
    my $email = "\L$id\E";
    die "$0: no key \L$id\E in $dbmfile\n"
	unless defined $DB{$email} && $DB{$email} ne '';

    $id = unpack("n*", $DB{$email});
    die "$0: no key $id in $dbmfile\n"
	unless defined $DB{$id} && $DB{$id} ne '';

    %rec = aid_util::db_unpack_rec($id,$DB{$id});
}
else
{
    die "$0: invalid key $id isn't userid or e-mail in $dbmfile\n";
}

delete $DB{$id};
my $email = "\L$rec{'e'}\E";
delete $DB{$email};

my $joined = aid_util::ampersand_join(\%rec);
warn "$0: deleting $joined\n";
print LOG "del - $joined\n";

# rebuilding the secondary keys will reconstruct _nextid.  Let's keep it
# so we don't have duplicate people with the same id
my $prevnextid = $DB{'_nextid'};
my @diffs = aid_util::rebuild_secondary_keys(\%DB,0);
$DB{'_nextid'} = $prevnextid;

if ($opt_d)
{
    foreach (@diffs)
    {
	print "key $_ changed.\n";
    }
}

warn "$0: delete successful\n";

untie(%DB);

close(LOG);
exit 0;

