#!/usr/local/bin/perl -w

# $Id: aid_delete_entry,v 7.1 2006/02/28 17:06:22 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Internet Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, ".";
  }
}

use strict;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hn] userid
    -h        Display usage information.
    -n        Dry run.
";

my %opts;
getopts("hn", \%opts) || die "$usage\n";
$opts{"h"} && die "$usage\n";
@ARGV == 1 || die "$usage\n";

my $logFile = aid_util::config("aiddir") . "logs/additions.log";
open(LOG, ">>$logFile") || die "$0: can't open $logFile: $!\n";
select(LOG); $| = 1; select(STDOUT);

my $dbh = aid_util::db_connect();
my $id = shift;
my $recp;
if ($id =~ /^\d+$/)
{
    my $DB = aid_util::load_records($dbh, "AND a.alumnus_id = $id");
    my @recs = values %{$DB};
    if (@recs)
    {
	$recp = $recs[0];
    }
    else
    {
	die "$0: no alumnus with id $id\n";
    }
}
elsif ($id =~ /\@/)
{
    my $qkey = $dbh->quote(lc($id));
    my $DB = aid_util::load_records($dbh, "AND e.entry_email = $qkey");
    my @recs = values %{$DB};
    if (@recs)
    {
	$recp = $recs[0];
    }
    else
    {
	die "$0: no alumnus with e-mail $id\n";
    }
}
else
{
    die "$0: invalid key $id isn't numeric or e-mail address\n";
}

my $joined = aid_util::ampersand_join($recp);
warn "$0: deleting $joined\n";
print LOG "del - $joined\n";

my $sql = "SELECT alumnus_entry_id,alumnus_old_id"
    . " FROM aid_alumnus WHERE alumnus_id = ?";
if ($opts{"n"}) {
    print $sql, " -- $recp->{id}\n";
}
my $sth = $dbh->prepare($sql);
$sth->execute($recp->{"id"}) or die $sth->errstr;
my($entry_id,$old_entry_id) = $sth->fetchrow_array;
if (defined $entry_id) {
    $sql = "DELETE FROM aid_entry WHERE entry_id = ?";
    $sth = $dbh->prepare($sql);
    if ($opts{"n"}) {
	print $sql, " -- $entry_id\n";
    } else {
	$sth->execute($entry_id) or die $sth->errstr;
    }
    if (defined $old_entry_id) {
	if ($opts{"n"}) {
	    print $sql, " -- $old_entry_id\n";
	} else {
	    $sth->execute($old_entry_id) or die $sth->errstr;
	}
    }
}

$sql = "DELETE FROM aid_alumnus WHERE alumnus_id = ?";
if ($opts{"n"}) {
    print $sql, " -- $recp->{id}\n";
} else {
    $sth = $dbh->prepare($sql);
    $sth->execute($recp->{"id"}) or die $sth->errstr;
}

my $out2 = sprintf("%s%s/%06d.html",
		   aid_util::config("wwwdir"), "detail", $recp->{"id"});
if (-e $out2) {
    if ($opts{"n"}) {
	print "/bin/rm -f $out2\n";
    } else {
	unlink($out2);
    }
}

warn "$0: delete successful\n";

$dbh->disconnect;
close(LOG);
exit 0;

