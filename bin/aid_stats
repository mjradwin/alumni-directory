#!/usr/local/bin/perl -w

# $Id: aid_stats,v 7.1 2006/02/24 00:13:15 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Internet Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, ".";
  }
}

use strict;
use Getopt::Std;
use aid_util;
use DBI ();

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-ht] outfile
    -h        Display usage information.
    -t        Text only.
";

my %opts;
getopts("ht", \%opts) || die "$usage\n";
$opts{"h"} && die "$usage\n";
@ARGV == 1 || die "$usage\n";

my $outfile = shift;
open(FMTOUT,">$outfile") || die "Can't open $outfile: $!\n";

my $nvalid = 0;
my $ndubious = 0;
my $ntotal = 0;
my @nreq = (0, 0, 0, 0, 0);
my $nreunion = 0;
my $nlocation = 0;
my $nweb = 0;
my $nnews = 0;

my $update_time_sum = 0;
my @update_times = ();

my $join_time_sum = 0;
my @join_times = ();

my($nnever_updated,$nweek,$nmonth,$n3month,$n13month);
$nnever_updated = $nweek = $nmonth = $n3month = $n13month = 0;

my $dbh = aid_util::db_connect();
my $DB = aid_util::load_records($dbh, "");
$dbh->disconnect;

foreach my $recp (values %{$DB})
{
    $ntotal++;

    next unless $recp->{"v"};

    if ($recp->{"b"})
    {
	$ndubious++;
    }
    else
    {
	$nvalid++;
    }

    $nreq[$recp->{"q"}]++;

    $nreunion++ if $recp->{"r"};
    $nlocation++ if $recp->{"l"} ne "";
    $nweb++ if $recp->{"w"} ne "";
    $nnews++ if $recp->{"n"} !~ /^\s*$/;

    $update_time_sum += $recp->{"u"};
    push(@update_times, $recp->{"u"});

    $join_time_sum += $recp->{"c"};
    push(@join_times, $recp->{"c"});

    $nnever_updated++ if $recp->{"u"} == $recp->{"c"};
    $nweek++ if aid_util::is_new($recp->{"c"}, 0.25);
    $nmonth++ if aid_util::is_new($recp->{"c"}, 1);
    $n3month++ if aid_util::is_new($recp->{"c"}, 3);
    $n13month++ if aid_util::is_new($recp->{"c"}, 13);
}

undef $DB;

my $nlegit = $nvalid + $ndubious;

# time-based statistics
my $avg_update_time = $update_time_sum / $nlegit;
my $median_update_time = (sort @update_times)[$nlegit / 2];
my $avg_join_time = $join_time_sum / $nlegit;
my $median_join_time = (sort @join_times)[$nlegit / 2];
my $now = time;

my $avg_update_weeks = ($now - $avg_update_time) / (60 * 60 * 24 * 7);
my $median_update_weeks = ($now - $median_update_time) / (60 * 60 * 24 * 7);
my $avg_tenure_weeks = ($now - $avg_join_time) / (60 * 60 * 24 * 7);
my $median_tenure_weeks = ($now - $median_join_time) / (60 * 60 * 24 * 7);

my $time = $now;
if (!$opts{"t"})
{
    print FMTOUT aid_util::common_html_hdr(15,"Member Statistics",0,$time);
    print FMTOUT "<pre>";
}
else
{
    print FMTOUT "Mountain View High School Alumni Internet Directory\n";
    print FMTOUT "Member Statistics\n";
    print FMTOUT "------------------------------------------------------------------------\n\n";
}

printf FMTOUT "      %4d  total entries in the Directory\n",
    $ntotal;
printf FMTOUT "%3.0f%% (%4d) have valid e-mail address (no bounces)\n",
    ((100 * $nvalid) / $ntotal), $nvalid;
printf FMTOUT "%3.0f%% (%4d) have possibly valid e-mail address (bounced recently)\n",
    ((100 * $ndubious) / $ntotal), $ndubious;

printf FMTOUT "%3.0f%% (%4d) have invalid e-mail address (too many bounces)\n",
    ((100 * ($ntotal - $nlegit)) / $ntotal), ($ntotal - $nlegit);

print FMTOUT "\n";

printf FMTOUT "%3.0f%% (%4d) requesting quarterly digests:\n",
    ((100 * ($nreq[3] + $nreq[4])) / $nlegit),
    ($nreq[3] + $nreq[4]);

printf FMTOUT "%3.0f%% (%4d) - %s\n",
    ((100 * $nreq[3]) / $nlegit),
    $nreq[3],
    $aid_util::req_descr_long[3];
printf FMTOUT "%3.0f%% (%4d) - %s\n",
    ((100 * $nreq[4]) / $nlegit),
    $nreq[4],
    $aid_util::req_descr_long[4];

print FMTOUT "\n";

printf FMTOUT "%3.0f%% (%4d) allow class officers to mail reunion info\n",
    ((100 * $nreunion) / $nlegit), $nreunion;
printf FMTOUT "%3.0f%% (%4d) wrote some location info\n",
    ((100 * $nlocation) / $nlegit), $nlocation;
printf FMTOUT "%3.0f%% (%4d) have personal web page\n",
    ((100 * $nweb) / $nlegit), $nweb;
printf FMTOUT "%3.0f%% (%4d) wrote What's New? paragraph\n",
    ((100 * $nnews) / $nlegit), $nnews;

print FMTOUT "\n";

printf FMTOUT "%3.0f%% (%4d) joined during past week\n",
    ((100.0 * $nweek) / $nlegit), $nweek;
printf FMTOUT "%3.0f%% (%4d) joined during past month\n",
    ((100.0 * $nmonth) / $nlegit), $nmonth;
printf FMTOUT "%3.0f%% (%4d) joined during past 3 months\n",
    ((100.0 * $n3month) / $nlegit), $n3month;
printf FMTOUT "%3.0f%% (%4d) joined during past year\n",
    ((100.0 * $n13month) / $nlegit), $n13month;
printf FMTOUT "%3.0f%% (%4d) have never modified their listings\n",
    ((100.0 * $nnever_updated) / $nlegit), $nnever_updated;

print FMTOUT "\n";

printf FMTOUT "average tenure             : %3.0f weeks\n",
    $avg_tenure_weeks;
printf FMTOUT "median  tenure             : %3.0f weeks\n",
    $median_tenure_weeks;

printf FMTOUT "average time since modify  : %3.0f weeks\n",
    $avg_update_weeks;
printf FMTOUT "median  time since modify  : %3.0f weeks\n",
    $median_update_weeks;

if (!$opts{"t"})
{
    print FMTOUT "</pre>\n";
    print FMTOUT aid_util::common_html_ftr(15,$time);
}
else
{
    print FMTOUT "\n------------------------------------------------------------------------\n";
    print FMTOUT scalar(localtime($time)), "\n";
}

close(FMTOUT);
exit(0);
