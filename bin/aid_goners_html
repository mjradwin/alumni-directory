#!/usr/local/bin/perl

#
# does the html version of the invalid address list
# $Id: aid_goners_html,v 1.26 1998/01/02 20:14:18 mradwin Exp $
#

require 'aid_util.pl';

die "Usage: aid_goners_html infile.adr outfile.html\n" if !$ARGV[0] || !$ARGV[1];
open(DATA,$ARGV[0]) || die "Can't open $ARGV[0]: $!\n";
open(FMTOUT,">$ARGV[1]") || die "Can't open $ARGV[1]: $!\n";

print FMTOUT &common_html_hdr(-1,1);
print FMTOUT "<br>";
print FMTOUT &aid_tableheader('Alumni with Invalid Addresses');
print FMTOUT "
<p>The following addresses are invalid because either email to them
bounces, or the address is being used by a new owner.  If you know a
current email address for anyone on this list, please submit it!</p>
";
print FMTOUT "<pre>";
print FMTOUT "Name and Graduation Year                  Last known whereabouts\n";
print FMTOUT "---------------------------------------------------------------------------\n";

while(<DATA>) {
    chop;
    ($time,$id,$req,$last,$first,$married,
     $school,$year,$email,$homepage,$location) = &aid_split($_);

    $fullname = &fullname($first,$last,$married);
    ($affil,$len) = &affiliate($year,$school,0);

    # now that we've grabbed the fullname, modify the parts that
    # are likely to be bad for x-url-encoded.  Don't do anything fancy,
    # just replace spaces with plusses.
    $first =~ s/[ \t]/+/g;
    $last =~ s/[ \t]/+/g;
    $married =~ s/[ \t]/+/g;

    print FMTOUT "<a href=\"", &aid_config('cgi_path'), "?revise&";
    print FMTOUT "id=$id&request=$req&first=$first&last=$last&";
    print FMTOUT "married=$married&school=$school&grad=$year&";
    print FMTOUT "mail=$email&homepage=$homepage&location=$location\">";
    print FMTOUT $fullname;
    print FMTOUT "</a>";
    print FMTOUT $affil;
    print FMTOUT ' ', ' ' x (41 - (length($fullname) + $len));
    print FMTOUT $email;
    print FMTOUT "\n";
}

print FMTOUT "</pre>\n";
print FMTOUT &common_html_ftr(-1, "Invalid&nbsp;Addresses");

exit(0);
