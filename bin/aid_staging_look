#!/usr/local/bin/perl -w

# $Id: aid_staging_look,v 6.1 2003/08/25 04:10:32 mradwin Exp mradwin $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

use FindBin;
use lib $FindBin::Bin;
use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";

use DB_File::Lock;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-h] [-I inifile]
    -h        Display usage information.
    -I file   Dump data to <file>
";

getopts('hI:') || die "$usage\n";
$opt_h && die "$usage\n";

my($dbmfile) = aid_util::config('staging');
die "$dbmfile: $!\n" unless -r $dbmfile;

tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

my(%verif);
if (defined $DB{'_verified'})
{
    foreach (split(/\0/, $DB{'_verified'}))
    {
	$verif{$_} = 1;
    }
}

if ($opt_I)
{
    open(DATA,">$opt_I") || die "can't open $opt_I: $!\n";

    # sort the numeric keys by id
    %id2key = ();
    while (my($key,$val) = each %DB)
    {
	if ($key =~ /^\w{8}$/ && $val =~ /^-?\d+\0/)
	{
	    my($id,$packed) = split(/\0/, $val, 2);
	    $id2key{$id} = $key;
	}
    }

    foreach (sort { $a <=> $b } keys %id2key)
    {
	$key = $id2key{$_};
	my($id,$packed) = split(/\0/, $DB{$key}, 2);
	my %rec = aid_util::db_unpack_rec($id,$packed);
	print DATA "[$key]\n";

	foreach (@aid_edit_field_names)
	{
	    print DATA $_, '=', $rec{$_}, "\n";
	}

	print DATA "verif=", (defined $verif{$key} ? 1 : 0), "\n";
	print DATA 'n=', aid_util::url_escape($rec{'n'}), "\n\n";
    } 
    close(DATA);
}
else
{
while (my($key,$val) = each %DB)
{
    if ($key =~ /^\w{8}$/ && $val =~ /^-?\d+\0/)
    {
	my($id,$packed) = split(/\0/, $val, 2);
	my %rec = aid_util::db_unpack_rec($id,$packed);

	($affil,undef) = aid_util::affiliate(\%rec,0);

	print aid_util::inorder_fullname(\%rec), $affil, " <",
	$rec{'e'}, ">\n",
	"web submission: ", scalar(localtime($rec{'u'})),
	"mailed confirm: ", ($rec{'lm'} == 0 ? "(never)\n" :
			     scalar(localtime($rec{'lm'}))),
	"key=$key\tid=$id\n";

	print "*VERIFIED*\n" if defined $verif{$key};
	print "\n";
    }
}
}

untie(%DB);
exit 0;

# avoid warnings
if ($^W && 0)
{
    $opt_h = $opt_h;		# avoid warning
    @aid_edit_field_names = ();
}
