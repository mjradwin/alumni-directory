#!/usr/local/bin/perl -w

#
# does a short list, either compact or verbose, sorted by graduating
# class with a jump bar
#
# $Id: aid_shortlist_html,v 6.3 2003/10/30 07:28:18 mradwin Exp mradwin $
#
# Copyright (c) 2003  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Internet Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, '.';
  }
}
use lib "/home/mradwin/local/share/perl";

use DB_File::Lock;
use Getopt::Std;
use aid_util;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-htved] {-w,-m <mos>} [-M <mos_descr>] infile.db outfile
    -h        Display usage information.
    -t        Output text only.
    -v        Output verbose HTML.
    -e        Recency relative to email update ('eu') (default 'u')
    -d        Add email disclaimer.

    -w        Alumni with web pages only.
    -m <mos>  Define 'recent' to mean <mos> months.
    -M <desc> Describe <mos> as 'within the last <desc>.'

Either -w or -m must be supplied.  They are mutually exclusive.
";

getopts('htvwm:M:ed') || die "$usage\n";
$opt_h && die "$usage\n";

die "$usage\n" unless $ARGV[0];
die "$usage\n" unless $ARGV[1];
die "$usage\n" unless ($opt_m || $opt_w);
die "$usage\n" if     ($opt_m && $opt_w);

$info_gif = aid_util::image_tag('info');
$blank_gif = $opt_t ? '' : aid_util::image_tag('blank');

$dbmfile = shift;
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

die "corrupt/missing _class key!"
    unless defined $DB{'_class'} && $DB{'_class'} ne '';

$outfile = shift;
open(FMTOUT,">$outfile") || die "Can't open $outfile: $!\n";

@ids = ();
@class = unpack("n*", $DB{'_class'});
@years = ();
for (@class)
{
    my %rec = aid_util::db_unpack_rec($_,$DB{$_});
    next unless $rec{'v'};
    if ($opt_m)
    {
	if ($opt_e)
	{
	    next unless aid_util::is_new($rec{'eu'}, $opt_m) ||
		($rec{'eu'} == 0 && aid_util::is_new($rec{'u'}, $opt_m));
	}
	else
	{
	    next unless aid_util::is_new($rec{'u'}, $opt_m);
	}
    }
    $opt_w && next unless $rec{'w'} ne '';

    push(@ids,$_);
    aid_util::build_yearlist(\@years, $rec{'yr'});
}

if ($#ids + 1 == 1)
{
    $subtitle = '1 alumnus';
}
else
{
    $subtitle = sprintf("%d alumni", $#ids + 1);
}
#$subtitle = "<strong><font color=\"#000000\">$subtitle</font></strong>";

if (!$opt_t) {
    if ($opt_w)
    {
	die "corrupt/missing _t_www key!"
	    unless defined $DB{'_t_www'} && $DB{'_t_www'} ne '';
	$time = unpack("N",$DB{'_t_www'});
	print FMTOUT aid_util::common_html_hdr(4,'Alumni with Web Pages',1,$time,$subtitle);
	print FMTOUT aid_util::common_intro_para(1);
    }
    elsif ($opt_m)
    {
	die "corrupt/missing _t key!"
	    unless defined $DB{'_t'} && $DB{'_t'} ne '';
	$opt_M = 'month' unless defined $opt_M;
	$time = unpack("N",$DB{'_t'});
	print FMTOUT aid_util::common_html_hdr(5,'Recent Additions and Updates',1,$time,$subtitle);
	print FMTOUT
"<p>All alumni on this page have been added to the Directory
or updated their listings within the last $opt_M.</p>\n\n";
    }

    print FMTOUT aid_util::class_jump_bar('#grad','',\@years,1);
}

if ($opt_d)
{
    print FMTOUT "The following information is provided solely for the
information of the " . aid_util::config('school') . " community.
Any redistribution outside of this community, or
solicitation of business or contributions
from individuals listed below is forbidden.

";
}

if (!$opt_v) {
    $opt_t || print FMTOUT "<pre>";
    print FMTOUT "Name and Graduation Year$blank_gif                  E-Mail\n";
    print FMTOUT "---------------------------------------------------------------------------\n";

    $prev = '1900';
    for (@ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});

	$fullname = aid_util::fullname(\%rec);
	($affil,$len) = aid_util::affiliate(\%rec,!$opt_t);

	$opt_t || print FMTOUT "<a href=\"" . aid_util::about_path(\%rec) . "\">$info_gif</a>";
	$opt_t || print FMTOUT "<a";
	if (!$opt_t && $prev ne $rec{'yr'} && $prev ne 'other') {
	    $prev = ($rec{'yr'} =~ /^\d+$/) ? $rec{'yr'} : 'other';
	    print FMTOUT " name=\"grad${prev}\"";
	}
	$opt_t || print FMTOUT " href=\"$rec{'w'}\"" if $rec{'w'} ne '';
	$opt_t || print FMTOUT ">";
	print FMTOUT $fullname;
	$opt_t || print FMTOUT "</a>";
	print FMTOUT $affil;
	print FMTOUT ' ', ' ' x (41 - (length($fullname) + $len));
	if ($opt_t) {
	    print FMTOUT $rec{'e'};
	} else {
	    print FMTOUT "<a href=\"", aid_util::config('message_cgi'), 
		"?to=", $rec{'id'}, "\">",
	    aid_util::protect_email($rec{'e'}), "</a>";
	}
	$opt_t || $opt_m || print FMTOUT aid_util::is_new_html(\%rec);
	print FMTOUT "\n";
    }

    $opt_t || print FMTOUT "</pre>";

} else {

    $prev = '1900';
    for (@ids)
    {
	my %rec = aid_util::db_unpack_rec($_,$DB{$_});

	if ($prev ne $rec{'yr'} && $prev ne 'other') {
	    $prev = ($rec{'yr'} =~ /^\d+$/) ? $rec{'yr'} : 'other';
	    print FMTOUT "<a name=\"grad${prev}\">&nbsp;</a>\n";
	}

	print FMTOUT aid_util::verbose_entry(\%rec,1,1);
    }
}

$opt_t || print FMTOUT aid_util::common_html_ftr(5,$time);

untie(%DB);
close(FMTOUT);
utime $time, $time, $outfile unless $opt_t;

# touch timestamp
$now = time;
$ts = $outfile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

exit(0);

if ($^W && 0)
{
    $opt_h = $opt_d = 0;	# avoid warning
    $opt_e = $opt_e;		# avoid warning
    $opt_v = $opt_v;		# avoid warning
}
