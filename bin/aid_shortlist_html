#!/usr/bin/perl -w

#
# does a short list, either compact or verbose, sorted by graduating
# class with a jump bar
#
# $Id: aid_shortlist_html,v 1.21 1999/05/06 16:29:29 mradwin Exp mradwin $
#
#   Copyright (c) 1995-1999  Michael John Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
push(@INC, $dirname);

require 'aid_util.pl';
require 'getopts.pl';

$0 =~ s,.*/,,;  # basename
$usage = "usage: $0 [-htv] {-w,-m <mos>} [-M <mos_descr>] infile.db outfile
    -h        Display usage information.
    -t        Output text only.
    -v        Output verbose HTML.

    -w        Alumni with web pages only.
    -m <mos>  Define 'recent' to mean <mos> months.
    -M <desc> Describe <mos> as 'within the last <desc>.'

Either -w or -m must be supplied.  They are mutually exclusive.
";

&Getopts('htvwm:M:') || die "$usage\n";
$opt_h && die "$usage\n";
$opt_h = $opt_h;		# avoid warning
$opt_v = $opt_v;		# avoid warning

die "$usage\n" unless $ARGV[0];
die "$usage\n" unless $ARGV[1];
die "$usage\n" unless ($opt_m || $opt_w);
die "$usage\n" if     ($opt_m && $opt_w);

$info_gif = &aid_image_tag('info');
$blank_gif = $opt_t ? '' : &aid_image_tag('blank');

$ARGV[0] =~ s/\.db$//;
die "can't open $ARGV[0].db\n" unless -r "$ARGV[0].db";
dbmopen(%DB,$ARGV[0],0444);

die "no _class key!\n" unless defined $DB{'_class'};

open(FMTOUT,">$ARGV[1]") || die "Can't open $ARGV[1]: $!\n";

@ids = ();
@class = unpack("n*", $DB{'_class'});
for (@class)
{
    %rec = &aid_db_unpack_rec($_,$DB{$_});
    next unless $rec{'v'};
    if ($opt_m)
    {
	next unless &aid_is_new($rec{'u'}, $opt_m);
#	next unless &aid_is_new($rec{'eu'}, $opt_m) ||
#	    ($rec{'eu'} == 0 && &aid_is_new($rec{'u'}, $opt_m));
    }
    $opt_w && next unless $rec{'w'} ne '';

    push(@ids,$_);
    &aid_build_yearlist(*years, $rec{'yr'});
}

if ($#ids + 1 == 1)
{
    $subtitle = '1 alumnus';
}
else
{
    $subtitle = sprintf("%d alumni", $#ids + 1);
}
$subtitle = "<strong><font color=\"#000000\">$subtitle</font></strong>";

if (!$opt_t) {
    if ($opt_w) {
	$time = unpack("N",$DB{'_t_www'});
	print FMTOUT &aid_common_html_hdr(4,'Alumni with Web Pages',1,$time,$subtitle);
	print FMTOUT &aid_common_intro_para(1);

    } elsif ($opt_m) {
	$opt_M = 'month' unless defined $opt_M;
	$time = unpack("N",$DB{'_t'});
	print FMTOUT &aid_common_html_hdr(5,'Recent Additions and Updates',1,$time,$subtitle);
	print FMTOUT
"<p>All alumni on this page have been added to the Directory
or updated their listings within the last $opt_M.</p>\n\n";
    }

    print FMTOUT &aid_class_jump_bar('#grad','',*years,1);
}

if (!$opt_v) {
    $opt_t || print FMTOUT "<pre>";
    print FMTOUT "Name and Graduation Year$blank_gif                  E-Mail\n";
    print FMTOUT "---------------------------------------------------------------------------\n";

    $prev = '1900';
    for (@ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});

	$fullname = &aid_fullname(*rec);
	($affil,$len) = &aid_affiliate(*rec,!$opt_t);

	$opt_t || print FMTOUT "<a href=\"" . &aid_about_path(*rec) . "\">$info_gif</a>";
	$opt_t || print FMTOUT "<a";
	if (!$opt_t && $prev ne $rec{'yr'} && $prev ne 'other') {
	    $prev = ($rec{'yr'} =~ /^\d+$/) ? $rec{'yr'} : 'other';
	    print FMTOUT " name=\"grad${prev}\"";
	}
	$opt_t || print FMTOUT " href=\"$rec{'w'}\"" if $rec{'w'} ne '';
	$opt_t || print FMTOUT ">";
	print FMTOUT $fullname;
	$opt_t || print FMTOUT "</a>";
	print FMTOUT $affil;
	print FMTOUT ' ', ' ' x (41 - (length($fullname) + $len));
	$opt_t || print FMTOUT "<a href=\"mailto:", $rec{'e'}, "\">";
	print FMTOUT $rec{'e'};
	$opt_t || print FMTOUT "</a>";
	$opt_t || $opt_m || print FMTOUT &aid_is_new_html(*rec);
	print FMTOUT "\n";
    }

    $opt_t || print FMTOUT "</pre>";

} else {

    $prev = '1900';
    for (@ids)
    {
	%rec = &aid_db_unpack_rec($_,$DB{$_});

	if ($prev ne $rec{'yr'} && $prev ne 'other') {
	    $prev = ($rec{'yr'} =~ /^\d+$/) ? $rec{'yr'} : 'other';
	    print FMTOUT "<a name=\"grad${prev}\">&nbsp;</a>\n";
	}

	print FMTOUT &aid_verbose_entry(*rec,1,1);
    }
}

$opt_t || print FMTOUT &aid_common_html_ftr(5);

dbmclose(%DB);
close(FMTOUT);
utime $time, $time, $ARGV[1] unless $opt_t;

# touch timestamp
$now = time;
$ts = $ARGV[1];
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

exit(0);
