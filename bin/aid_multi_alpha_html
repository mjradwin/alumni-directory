#!/usr/local/bin/perl -w

#
# does the html verbose pages
# $Id: aid_multi_alpha_html,v 5.23 2003/05/15 00:30:45 mradwin Exp $
#
#   Copyright (c) 2003  Michael J. Radwin
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

$dirname = $0;
$dirname =~ s,/[^/]+$,,;
unshift(@INC, $dirname);

use lib "/pub/m/r/mradwin/private/lib/perl5/site_perl";
use DB_File::Lock;

use aid_util;
use Getopt::Std;

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hq] [-i <keys>] infile.db
    -h        Display usage information.
    -q        Quiet.
    -i <keys> Incremental update only for list of keys.
";

getopts('hi:q') || die "$usage\n";
$opt_h && die "$usage\n";
$ARGV[0] || die "$usage\n";
$opt_h = $opt_h;		# avoid warning

@incremental = ($opt_i ? split(/[,\s]+/, $opt_i) : ());

$dbmfile = shift;
tie(%DB, 'DB_File::Lock', $dbmfile, O_RDONLY, 0444, $DB_HASH, 'read')
    or die "$dbmfile: $!\n";

@initials = ();
%init_prev = ();
%init_next = ();
$prev = '';

for ($initial = 'a'; $initial ne 'aa'; $initial++)
{
    if (defined $DB{"_a_${initial}"})
    {
	push(@initials, $initial);
	if ($prev ne '')
	{
	    $init_next{$prev}    = $initial;
	    $init_prev{$initial} = $prev;
	}
	$prev = $initial;
    }
}

select(STDOUT); $| = 1;
foreach $initial (@initials)
{
    $key = "_t_${initial}";
    if (@incremental)
    {
	next unless grep(/$key/, @incremental);
    }

    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    $time = unpack("N",$DB{$key});

    print STDOUT "$initial "
	unless $opt_q;

    $key = "_a_${initial}";
    die "corrupt/missing $key key!"
	unless defined $DB{$key} && $DB{$key} ne '';
    @alpha_ids = unpack("n*",$DB{$key});

    $outFile = aid_util::config('wwwdir') . "alpha/${initial}.html";
    open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

    $extra_meta  = "\n<link rel=\"contents\" href=\"./\" title=\"Alphabetically\">";
    $extra_meta .= "\n<link rel=\"prev\" href=\"$init_prev{$initial}.html\" title=\"`\u$init_prev{$initial}' Alumni\">"
	if defined $init_prev{$initial};
    $extra_meta .= "\n<link rel=\"next\" href=\"$init_next{$initial}.html\" title=\"`\u$init_next{$initial}' Alumni\">"
	if defined $init_next{$initial};

    print FMTOUT aid_util::common_html_hdr(1,"`\u$initial' Alumni",1,$time,
				      '',$extra_meta),
      aid_util::common_intro_para(0),
      "<p>\n", &alpha_jump_bar($initial), "</p>\n",
      "<hr noshade=\"noshade\" size=\"1\">\n\n<ul>";

    foreach $id (@alpha_ids)
    {
	my %rec = aid_util::db_unpack_rec($id,$DB{$id});
	next unless $rec{'v'};

	print FMTOUT &html_pre_entry(\%rec);
    }

    print FMTOUT "</ul>\n";
    print FMTOUT aid_util::common_html_ftr(1,$time);
    close(FMTOUT);
    utime $time, $time, $outFile;
}

die "corrupt/missing _t key!" unless defined $DB{'_t'} && $DB{'_t'} ne '';
$time = unpack("N",$DB{'_t'});
untie(%DB);
print STDOUT "\n"
    unless $opt_q;

# index page
$outFile = aid_util::config('wwwdir') . "alpha/index.html";
open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

print FMTOUT aid_util::common_html_hdr(-1,'Alphabetically',0,$time);

print FMTOUT "<p align=\"center\"><big>\n";
print FMTOUT &alpha_jump_bar('');
print FMTOUT "</big></p>\n\n";

print FMTOUT aid_util::common_html_ftr(-1,$time);
close(FMTOUT);
utime $time, $time, $outFile;

# touch timestamp
$now = time;
$ts = $outFile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

exit(0);


sub html_pre_entry {
    my($recp) = @_;
    my($fullname,$affil,$len);

    $fullname = aid_util::fullname($recp);
    ($affil,$len) = aid_util::affiliate($recp,0);

    "<li><a href=\"" . aid_util::about_path($recp) . "\">" .
	$fullname . "</a>" . $affil . aid_util::is_new_html($recp) . "\n";
}

# do the funky quick-jump bar
sub alpha_jump_bar {
    my($regular) = @_;
    my($i,$retval);

    $retval = '';
    foreach $i (@initials)
    {
	$retval .= (($regular eq $i) ?
		    "\U${i}\E\n" :
		    "<a href=\"${i}.html\">\U${i}\E</a>\n");
    }

    $retval;
}
