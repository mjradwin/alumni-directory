#!/usr/local/bin/perl -w

#
# does the html verbose pages
# $Id: aid_multi_alpha_html,v 7.1 2006/02/24 00:13:15 mradwin Exp mradwin $
#
# Copyright (c) 2006  Michael J. Radwin.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
#  * Redistributions of source code must retain the above
#    copyright notice, this list of conditions and the following
#    disclaimer.
#
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
#  * Neither the name of the High School Alumni Internet Directory
#    nor the names of its contributors may be used to endorse or
#    promote products derived from this software without specific
#    prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

BEGIN {
  if ($0 =~ m,(.*[/\\]),) {
    unshift @INC, $1;
  } else {
    unshift @INC, ".";
  }
}

use strict;
use Getopt::Std;
use aid_util;
use DBI ();

$0 =~ s,.*/,,;  # basename
my $usage = "usage: $0 [-hq] [-i <keys>]
    -h        Display usage information.
    -q        Quiet.
    -i <keys> Incremental update only for list of keys.
";

my %opts;
getopts("hi:q", \%opts) || die "$usage\n";
$opts{"h"} && die "$usage\n";

my @incremental = ($opts{"i"} ? split(/[,\s]+/, $opts{"i"}) : ());

my $dbh = aid_util::db_connect();
my $DB = aid_util::load_records($dbh, "");
$dbh->disconnect;

my %alpha_id;
my %alpha_ts;
for (my $initial = "a"; $initial ne "aa"; $initial++)
{
    $alpha_id{$initial} = [];
    $alpha_ts{$initial} = 0;
}

foreach my $recp (values %{$DB})
{
#    next unless $recp->{"v"};
    my $initial = lc(substr($recp->{"sn"}, 0, 1));
    next if $initial !~ /^[a-z]$/;
    push(@{$alpha_id{$initial}}, $recp->{"id"});
    $alpha_ts{$initial} = $recp->{"u"} if $recp->{"u"} > $alpha_ts{$initial};
}

my @initials;
my %init_prev;
my %init_next;
my $prev = "";
for (my $initial = "a"; $initial ne "aa"; $initial++)
{
    if ($alpha_ts{$initial})
    {
	push(@initials, $initial);
	if ($prev ne "")
	{
	    $init_next{$prev}    = $initial;
	    $init_prev{$initial} = $prev;
	}
	$prev = $initial;
    }
}

select(STDOUT); $| = 1;
foreach my $initial (@initials)
{
    my $time = $alpha_ts{$initial};

    print STDOUT "$initial "
	unless $opts{"q"};

    my $outFile = aid_util::config("wwwdir") . "alpha/${initial}.html";
    open(FMTOUT,">$outFile.$$") || die "Can't open $outFile.$$: $!\n";

    my $extra_meta = "\n<link rel=\"contents\" href=\"./\" title=\"Alphabetically\">";
    $extra_meta .= "\n<link rel=\"prev\" href=\"$init_prev{$initial}.html\" title=\"`\u$init_prev{$initial}' Alumni\">"
	if defined $init_prev{$initial};
    $extra_meta .= "\n<link rel=\"next\" href=\"$init_next{$initial}.html\" title=\"`\u$init_next{$initial}' Alumni\">"
	if defined $init_next{$initial};

    print FMTOUT aid_util::common_html_hdr(1,"`\u$initial' Alumni",1,$time,
					   "",$extra_meta),
    aid_util::common_intro_para(0),
    "<p>\n", alpha_jump_bar($initial), "</p>\n",
    "<hr noshade=\"noshade\" size=\"1\">\n\n<ul>";

    my @alpha_ids = sort { lc($DB->{$a}->{"sn"}) cmp lc($DB->{$b}->{"sn"})
			   || lc($DB->{$a}->{"gn"}) cmp lc($DB->{$b}->{"gn"})
		       } @{$alpha_id{$initial}};

    foreach my $id (@alpha_ids)
    {
	print FMTOUT html_pre_entry($DB->{$id});
    }

    print FMTOUT "</ul>\n";
    print FMTOUT aid_util::common_html_ftr(1,$time);
    close(FMTOUT);
    utime $time, $time, "$outFile.$$";
    rename("$outFile.$$", $outFile);
}

print STDOUT "\n"
    unless $opts{"q"};

# index page
my $outFile = aid_util::config("wwwdir") . "alpha/index.html";
open(FMTOUT,">$outFile") || die "Can't open $outFile: $!\n";

my $time = time();
print FMTOUT aid_util::common_html_hdr(-1,"Alphabetically",0,$time);

print FMTOUT "<p align=\"center\"><big>\n";
print FMTOUT alpha_jump_bar("");
print FMTOUT "</big></p>\n\n";

print FMTOUT aid_util::common_html_ftr(-1,$time);
close(FMTOUT);
utime $time, $time, $outFile;

# touch timestamp
my $now = time;
my $ts = $outFile;
$ts =~ s,([^/]+)$,\.$1,;
open(TS,">$ts") && close(TS);
utime $now, $now, $ts;

exit(0);


sub html_pre_entry {
    my($recp) = @_;
    my($fullname,$affil,$len);

    $fullname = aid_util::fullname($recp);
    ($affil,$len) = aid_util::affiliate($recp,0);

    "<li><a href=\"" . aid_util::about_path($recp) . "\">" .
	$fullname . "</a>" . $affil . aid_util::is_new_html($recp) . "\n";
}

# do the funky quick-jump bar
sub alpha_jump_bar {
    my($regular) = @_;
    my($i,$retval);

    $retval = "";
    foreach $i (@initials)
    {
	$retval .= (($regular eq $i) ?
		    "\U${i}\E\n" :
		    "<a href=\"${i}.html\">\U${i}\E</a>\n");
    }

    $retval;
}
